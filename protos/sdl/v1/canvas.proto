// protos/sdl/v1/canvas.proto

syntax = "proto3";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/sdl/protos";
package sdl.v1;

import "sdl/v1/models.proto";
import "google/api/annotations.proto";

/**
 * Service for interacting with a canvas.
 */
service CanvasService {
  /**
   * Create a new canvas sesssion.
   */
  rpc CreateCanvas(CreateCanvasRequest) returns (CreateCanvasResponse) {
    option (google.api.http) = {
      post: "/v1/canvases",
      body: "*",
    };
  }

  /**
   * List all canvases from a user.
   */
  rpc ListCanvases(ListCanvasesRequest) returns (ListCanvasesResponse) { 
    option (google.api.http) = {
      get: "/v1/canvases"
    };
  }

  /**
   * Get details/stats for a particular canvas
   */
  rpc GetCanvas(GetCanvasRequest) returns (GetCanvasResponse) { 
    option (google.api.http) = {
      get: "/v1/canvases/{id=*}"
    };
  }

  rpc LoadFile(LoadFileRequest) returns (LoadFileResponse) {
    option (google.api.http) = {
      post: "/v1/canvases/{canvas_id=*}/actions:load"
      body: "*" // Contains initial title, type, content, and positioning info
    };
  }

  rpc UseSystem(UseSystemRequest) returns (UseSystemResponse) {
    option (google.api.http) = {
      post: "/v1/canvases/{canvas_id=*}/actions:use"
      body: "*" // Contains initial title, type, content, and positioning info
    };
  }

  /**
   * Delete a particular canvas.  Frees up resources used by it and all the connections
   */
  rpc DeleteCanvas(DeleteCanvasRequest) returns (DeleteCanvasResponse) { 
    option (google.api.http) = {
      delete: "/v1/canvases/{id=*}"
    };
  }

  //  ----- Generator Operations -----
  // Adds a generator to a canvas's generator_ids list and creates the generator resource.
  rpc AddGenerator (AddGeneratorRequest) returns (AddGeneratorResponse) {
    option (google.api.http) = {
      post: "/v1/canvases/{generator.canvas_id}/generators"
      body: "*" // Contains initial title, type, content, and positioning info
    };
  }

  // Request to start all generators
  rpc StartAllGenerators (StartAllGeneratorsRequest) returns (StartAllGeneratorsResponse) {
    option (google.api.http) = {
      put: "/v1/canvases/{canvas_id}/generators/actions:startall"
      body: "*" // Contains initial title, type, content, and positioning info
    };
  }

  // Request to start all generators
  rpc StopAllGenerators (StopAllGeneratorsRequest) returns (StopAllGeneratorsResponse) {
    option (google.api.http) = {
      put: "/v1/canvases/{canvas_id}/generators/actions:stopall"
      body: "*" // Contains initial title, type, content, and positioning info
    };
  }

  rpc ListGenerators (ListGeneratorsRequest) returns (ListGeneratorsResponse) {
    option (google.api.http) = {
      get: "/v1/canvases/{canvas_id}/generators"
    };
  }

  rpc GetGenerator (GetGeneratorRequest) returns (GetGeneratorResponse) {
    option (google.api.http) = {
      get: "/v1/canvases/{canvas_id}/generators/{generator_id}"
    };
  }

  // Use PATCH for partial updates to a generator (title, content)
  rpc UpdateGenerator (UpdateGeneratorRequest) returns (UpdateGeneratorResponse) {
     option (google.api.http) = {
       patch: "/v1/canvases/{generator.canvas_id}/generators/{generator.id}"
       body: "*" // Only the 'generator' field goes in the body
     };
  }

  rpc PauseGenerator (PauseGeneratorRequest) returns (PauseGeneratorResponse) {
     option (google.api.http) = {
       post: "/v1/canvases/{canvas_id}/generators/{generator_id}/actions:pause"
       body: "*" // Only the 'generator' field goes in the body
     };
  }

  rpc ResumeGenerator (ResumeGeneratorRequest) returns (ResumeGeneratorResponse) {
     option (google.api.http) = {
       post: "/v1/canvases/{canvas_id}/generators/{generator_id}/actions:resume"
       body: "*" // Only the 'generator' field goes in the body
     };
  }

  rpc DeleteGenerator (DeleteGeneratorRequest) returns (DeleteGeneratorResponse) {
    option (google.api.http) = {
      delete: "/v1/canvases/{canvas_id}/generators/{generator_id}"
    };
  }

  // Execute a single trace for debugging/analysis
  rpc ExecuteTrace(ExecuteTraceRequest) returns (ExecuteTraceResponse) {
    option (google.api.http) = {
      get: "/v1/canvases/{canvas_id}/trace/{component}/{method}"
    };
  }

  // ----- Parameter Operations -----
  // Set a component parameter value
  rpc SetParameter(SetParameterRequest) returns (SetParameterResponse) {
    option (google.api.http) = {
      put: "/v1/canvases/{canvas_id}/parameters/{path}"
      body: "*"
    };
  }

  // Get parameter values
  rpc GetParameters(GetParametersRequest) returns (GetParametersResponse) {
    option (google.api.http) = {
      get: "/v1/canvases/{canvas_id}/parameters"
    };
  }

  //  ----- Generator Operations -----
  // Adds a metric to live plot
  rpc AddMetric(AddMetricRequest) returns (AddMetricResponse) {
    option (google.api.http) = {
      post: "/v1/canvases/{metric.canvas_id}/metrics"
      body: "*" // Contains initial title, type, content, and positioning info
    };
  }

  /**
   * Delete a particular metriccanvas.  Frees up resources used by it and all the connections
   */
  rpc DeleteMetric(DeleteMetricRequest) returns (DeleteMetricResponse) { 
    option (google.api.http) = {
      delete: "/v1/canvases/{canvas_id}/metrics/{metric_id}"
    };
  }

  rpc LiveMetric(LiveMetricsRequest) returns (stream LiveMetricsResponse) {
    option (google.api.http) = {
      get: "/v1/canvases/{canvas_id}/metrics/subscribe"
    };
  }

  // --- Metric Query Operations ---
  
  // List all available metrics
  rpc ListMetrics(ListMetricsRequest) returns (ListMetricsResponse) {
    option (google.api.http) = {
      get: "/v1/canvases/{canvas_id}/metrics"
    };
  }

  // Query raw metric data points
  rpc QueryMetrics(QueryMetricsRequest) returns (QueryMetricsResponse) {
    option (google.api.http) = {
      get: "/v1/canvases/{canvas_id}/metrics/{metric_id}/query"
    };
  }

  // Get aggregated metric data
  rpc AggregateMetrics(AggregateMetricsRequest) returns (AggregateMetricsResponse) {
    option (google.api.http) = {
      get: "/v1/canvases/{canvas_id}/metrics/{metric_id}/aggregate"
    };
  }
}

/**
 * Canvas creation request object
 */
message CreateCanvasRequest {
  /**
   * Canvas being updated
   */
  Canvas canvas = 1;
}

/**
 * Response of an canvas creation.
 */
message CreateCanvasResponse {
  /**
   * Canvas being created
   */
  Canvas canvas = 1;

  /**
   * Error specific to a field if there are any errors.
   */
  map<string, string> field_errors = 2;
}

/**
 * An canvas search request.  For now only paginations params are provided.
 */
message ListCanvasesRequest {
  // Pagination info
  Pagination pagination = 1;
}

/**
 * Response of a canvas search/listing.
 */
message ListCanvasesResponse {
  /**
   * The list of canvases found as part of this response.
   */
  repeated Canvas canvases = 1;

  PaginationResponse pagination = 2;
}

/**
 * Request to get a canvas.
 */
message GetCanvasRequest {
  /**
   * ID of the canvas to be fetched
   */
  string id = 1;
}

/**
 * Canvas get response
 */
message GetCanvasResponse {
  Canvas canvas = 1;
}

/**
 * Request to delete an canvas.
 */
message DeleteCanvasRequest {
  /**
   * ID of the canvas to be deleted.
   */
  string id = 1;
}

/**
 * Canvas deletion response
 */
message DeleteCanvasResponse {
}

// --- Generator Messages ---

message AddGeneratorRequest {
  Generator generator = 1;
}

message AddGeneratorResponse {
  Generator generator = 1;
}

message ListGeneratorsRequest {
  string canvas_id = 1;
}

message ListGeneratorsResponse {
  repeated Generator generators = 1;
}

message StartAllGeneratorsRequest {
  string canvas_id = 1;
}

message StartAllGeneratorsResponse {
  int32 total_generators = 1;      // Total number of generators
  int32 started_count = 2;         // Number successfully started
  int32 already_running_count = 3; // Number already running
  int32 failed_count = 4;          // Number that failed to start
  repeated string failed_ids = 5;  // IDs of generators that failed
}

message StopAllGeneratorsRequest {
  string canvas_id = 1;
}

message StopAllGeneratorsResponse {
  int32 total_generators = 1;     // Total number of generators
  int32 stopped_count = 2;        // Number successfully stopped
  int32 already_stopped_count = 3; // Number already stopped
  int32 failed_count = 4;         // Number that failed to stop
  repeated string failed_ids = 5; // IDs of generators that failed
}

message GetGeneratorRequest {
  string canvas_id = 1;
  string generator_id = 2;
}

message GetGeneratorResponse {
  Generator generator = 1;
}

// Consolidate generator updates into one RPC using PATCH and FieldMask
message UpdateGeneratorRequest {
  // Generator object containing *only* the fields to be updated.
  // The server will use the update_mask to know which fields from
  // this 'generator' message to apply to the stored generator.
  Generator generator = 1;
  google.protobuf.FieldMask update_mask = 2; // e.g., paths: "title", paths: "text_content"
}

message UpdateGeneratorResponse {
  Generator generator = 1;
}

message ResumeGeneratorRequest {
  string canvas_id = 1;
  string generator_id = 2; // The generator being moved
}

message ResumeGeneratorResponse {
}

message PauseGeneratorRequest {
  string canvas_id = 1;
  string generator_id = 2; // The generator being moved
}

message PauseGeneratorResponse {
}

message DeleteGeneratorRequest {
  string canvas_id = 1;
  string generator_id = 2;
}

message DeleteGeneratorResponse {
}

message LoadFileRequest {
  string canvas_id = 1;
  string sdl_file_path = 2;
}

message LoadFileResponse {
}

message UseSystemRequest {
  string canvas_id = 1;
  string system_name = 2;
}

message UseSystemResponse {
}


message AddMetricRequest {
  Metric metric = 1;
}

message AddMetricResponse {
  Metric metric = 1;
}

message DeleteMetricRequest {
  string canvas_id = 1;
  string metric_id = 2;
}

message DeleteMetricResponse {
}

message LiveMetricsRequest {
  string canvas_id = 1;
}

message LiveMetricsResponse {
}

// --- Metric Query Messages ---

message QueryMetricsRequest {
  string canvas_id = 1;
  // Metric identifier (component.method.type)
  string metric_id = 2;
  // Time range for the query
  double start_time = 3;  // Unix timestamp in seconds
  double end_time = 4;    // Unix timestamp in seconds
  // Optional: limit number of points returned
  int32 limit = 5;
}

message QueryMetricsResponse {
  repeated MetricPoint points = 1;
}

message MetricPoint {
  double timestamp = 1;  // Unix timestamp in seconds
  double value = 2;
}

message AggregateMetricsRequest {
  string canvas_id = 1;
  string metric_id = 2;
  double start_time = 3;
  double end_time = 4;
  // Aggregation function: "count", "sum", "avg", "min", "max", "p50", "p90", "p95", "p99"
  string function = 5;
  // Optional: window size for time-based aggregation (in seconds)
  double window_size = 6;
}

message AggregateMetricsResponse {
  // Single value if no windowing, multiple if windowed
  repeated AggregateResult results = 1;
}

message AggregateResult {
  double timestamp = 1;  // Start of window (if windowed)
  double value = 2;
}

// List all available metrics
message ListMetricsRequest {
  string canvas_id = 1;
}

message ListMetricsResponse {
  repeated MetricInfo metrics = 1;
}

message MetricInfo {
  string id = 1;  // component.method.type
  string component = 2;
  string method = 3;
  string metric_type = 4;
  int64 data_points = 5;  // Number of data points stored
  double oldest_timestamp = 6;
  double newest_timestamp = 7;
}

message ExecuteTraceRequest {
  string canvas_id = 1;
  string component = 2;
  string method = 3;
  // Optional: arguments for the method call (for future enhancement)
  // repeated string args = 4;
}

message ExecuteTraceResponse {
  // The complete trace data
  TraceData trace_data = 1;
}

// TraceData matches the runtime.TraceData structure
message TraceData {
  string system = 1;
  string entry_point = 2;
  repeated TraceEvent events = 3;
}

// TraceEvent matches the runtime.TraceEvent structure
message TraceEvent {
  string kind = 1;  // "enter", "exit", "go", "wait"
  int64 id = 2;
  int64 parent_id = 3;
  double timestamp = 4;  // Virtual time in seconds
  double duration = 5;   // Duration in seconds (for exit events)
  string component = 6;
  string method = 7;
  repeated string args = 8;
  string return_value = 9;
  string error_message = 10;
}

// ----- Parameter Management Messages -----

// Request to set a parameter value
message SetParameterRequest {
  string canvas_id = 1;
  string path = 2;       // dot-separated path like "server.cache.HitRate"
  string new_value = 3;      // SDL expression string (e.g., "42", "true", "'hello'", "[1,2,3]", etc.)
}

// Response from setting a parameter
message SetParameterResponse {
  bool success = 1;
  string error_message = 2;  // Set if success is false
  string new_value = 3;      // SDL expression string (e.g., "42", "true", "'hello'", "[1,2,3]", etc.)
  string old_value = 4;
}

// Request to get parameter values
message GetParametersRequest {
  string canvas_id = 1;
  string path = 2;  // Optional: if empty, return all parameters
}

// Response containing parameter values
message GetParametersResponse {
  map<string, string> parameters = 1;  // Values as SDL expression strings
}
