// protos/sdl/v1/models.proto

syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
option go_package = "github.com/sdl/protos";
package sdl.v1;

message Pagination {
  /**
   * Instead of an offset an abstract  "page" key is provided that offers
   * an opaque "pointer" into some offset in a result set.
   */
  string page_key = 1;

  /**
   * If a pagekey is not supported we can also support a direct integer offset
   * for cases where it makes sense.
   */
  int32 page_offset = 2;

  /**
   * Number of results to return.
   */
  int32 page_size = 3;
}

message PaginationResponse {
  /**
   * The key/pointer string that subsequent List requests should pass to
   * continue the pagination.
   */
  string next_page_key = 2;

  /**
   * Also support an integer offset if possible
   */
  int32 next_page_offset = 3;

  /**
   * Whether theere are more results.
   */
  bool has_more = 4;

  /**
   * Total number of results.
   */
  int32 total_results = 5;
}

message Canvas {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;

  // Unique ID for the canvas
  string id = 3;

  // Active system being observed
  string active_system = 4;

  // Files that have been loaded so far
  repeated string loaded_files = 5;

  // Registered generators for this canvas
  repeated Generator generators = 6;

  // Registered live metrics for this canvas
  repeated Metric metrics = 7;
}

message Generator {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;

  // ID of the generator
  string id = 3;

  // Canvas this generator is sending traffic to
  string canvas_id = 4;

  // A descriptive label
  string name = 5;

  // Name of the target component to generate traffic on. This component should be defined in the System,
  // eg "server"
  string component = 6;

  // Method in the target component to generate traffic on.
  string method = 7;

  // Traffic rate in RPS (>= 1).  Does not support < 1 yet
  double rate = 8;

  // Duration in seconds over which the genarator is run. 0 => For ever
  double duration = 9;

  // whether it is enabled or not
  bool enabled = 10;
}

message Metric {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;

  string id = 3;

  string canvas_id = 4;

  // A descriptive label
  string name = 5;

  // Name of the target component to monitor
  // eg "server"
  string component = 6;

  // Method in the target component to generate traffic on.
  repeated string methods = 7;

  // whether it is enabled or not
  bool enabled = 8;

  // Type of metric "count" or "latency"
  string metric_type = 9;

  // Type of aggregation on the metric
  string aggregation = 10;

  // Aggregation window to match on
  string aggregation_window = 11;

  // Result value to match
  string match_result = 12;

  // The result "type" if a matching result is provided
  // This will be parsed into a type declaration so we know how to treat
  // the match_result value provided
  string match_result_type = 13;
}

