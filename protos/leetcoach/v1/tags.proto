
syntax = "proto3";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/leetcoach/protos";
package leetcoach.v1;

import "leetcoach/v1/models.proto";
import "google/api/annotations.proto";

/**
 * Service for tags
 */
service TagService {
  /**
   * Create a new tag.  If a tag by name already exists then it is returned.
   */
  rpc CreateTag(CreateTagRequest) returns (CreateTagResponse) {
    option (google.api.http) = {
      post: "/v1/tags/{tag.name=*}",
      body: "*",
    };
  }

  /**
   * List all tags
   */
  rpc ListTags(ListTagsRequest) returns (ListTagsResponse) { 
    option (google.api.http) = {
      get: "/v1/tags"
    };
  }

  /**
   * Get a particular tag
   */
  rpc GetTag(GetTagRequest) returns (GetTagResponse) { 
    option (google.api.http) = {
      get: "/v1/tags/{id=*}"
    };
  }

  /**
   * Batch get multiple tags by ID
   */
  rpc GetTags(GetTagsRequest) returns (GetTagsResponse) { 
    option (google.api.http) = {
      get: "/v1/tags:batchGet"
    };
  }

  /**
   * Delete a particular tag
   */
  rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse) { 
    option (google.api.http) = {
      delete: "/v1/tags/{id=*}"
    };
  }

  /**
   * Updates specific fields of a tag
   */
  rpc UpdateTag(UpdateTagRequest) returns (UpdateTagResponse) {
    option (google.api.http) = {
      patch: "/v1/tags/{tag.name=*}"
      body: "*"
    };
    // option (google.api.method_signature) = "tag,update_mask";
  }
}

/**
 * Tag creation request object
 */
message CreateTagRequest {
  /**
   * Tag being updated
   */
  Tag tag = 1;
}

/**
 * Response of an tag creation.
 */
message CreateTagResponse {
  /**
   * Tag being created
   */
  Tag tag = 1;

  /**
   * Error specific to a field if there are any errors.
   */
  map<string, string> field_errors = 2;
}

/**
 * An tag search request.  For now only paginations params are provided.
 */
message ListTagsRequest {
  /**
   * Instead of an offset an abstract  "page" key is provided that offers
   * an opaque "pointer" into some offset in a result set.
   */
  string page_key = 1;

  /**
   * Number of results to return.
   */
  int32 page_size = 2;

  /**
   * Limit to tags of a particular user
   */
  string user_id = 3;

  /**
   * search by tag prefix.
   */
  string prefix = 4;

  /**
   * "recent" or "name" or num_designs
   */
  string order_by = 5;
}

/**
 * Response of a tag search/listing.
 */
message ListTagsResponse {
  /**
   * The list of tags found as part of this response.
   */
  repeated Tag tags = 1;

  /**
   * The key/pointer string that subsequent List requests should pass to
   * continue the pagination.
   */
  string next_page_key = 2;
}

/**
 * Request to get an tag.
 */
message GetTagRequest {
  /**
   * ID of the tag to be fetched
   */
  string id = 1;

  /**
   * Returns if contents are also to be returned.
   */
  bool with_contents = 2;
}

/**
 * Tag get response
 */
message GetTagResponse {
  Tag tag = 1;
}

/**
 * Request to batch get tags
 */
message GetTagsRequest {
  /**
   * IDs of the tag to be fetched
   */
  repeated string ids = 1;
}

/**
 * Tag batch-get response
 */
message GetTagsResponse {
  map<string, Tag> tags = 1;
}

/**
 * Request to delete an tag.
 */
message DeleteTagRequest {
  /**
   * ID of the tag to be deleted.
   */
  string id = 1;
}

/**
 * Tag deletion response
 */
message DeleteTagResponse {
}

/**
 * The request for (partially) updating an Tag.
 */
message UpdateTagRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UpdateTagRequest"
    }
  };

  /**
   * Tag being updated
   */
  Tag tag = 1;

  /**
   * Mask of fields being updated in this Tag to make partial changes.
   */
  google.protobuf.FieldMask update_mask = 2;
}

/**
 * The request for (partially) updating an Tag.
 */
message UpdateTagResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UpdateTagResponse"
    }
  };

  /**
   * Tag being updated
   */
  Tag tag = 1;
}
