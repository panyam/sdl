// protos/leetcoach/v1/designs.proto

syntax = "proto3";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/leetcoach/protos";
package leetcoach.v1;

import "leetcoach/v1/models.proto";
import "leetcoach/v1/content.proto";
import "google/api/annotations.proto";

// Used for positioning new/moved sections
enum PositionType {
  POSITION_TYPE_UNSPECIFIED = 0;
  POSITION_TYPE_BEFORE = 1; // Insert before the relative_section_id
  POSITION_TYPE_AFTER = 2;  // Insert after the relative_section_id
  POSITION_TYPE_END = 3;    // Append to the end of the design
}

/**
 * Service for operating on design documents
 */
service DesignService {
  /**
   * Create a new sesssion
   */
  rpc CreateDesign(CreateDesignRequest) returns (CreateDesignResponse) {
    option (google.api.http) = {
      post: "/v1/designs",
      body: "*",
    };
  }

  /**
   * List all designs from a user.
   */
  rpc ListDesigns(ListDesignsRequest) returns (ListDesignsResponse) { 
    option (google.api.http) = {
      get: "/v1/designs"
    };
  }

  /**
   * Get a particular design
   */
  rpc GetDesign(GetDesignRequest) returns (GetDesignResponse) { 
    option (google.api.http) = {
      get: "/v1/designs/{id=*}"
    };
  }

  /**
   * Batch get multiple designs by ID
   */
  rpc GetDesigns(GetDesignsRequest) returns (GetDesignsResponse) { 
    option (google.api.http) = {
      get: "/v1/designs:batchGet"
    };
  }

  /**
   * Delete a particular design
   */
  rpc DeleteDesign(DeleteDesignRequest) returns (DeleteDesignResponse) { 
    option (google.api.http) = {
      delete: "/v1/designs/{id=*}"
    };
  }

  /**
   * Updates specific fields of a design
   */
  rpc UpdateDesign(UpdateDesignRequest) returns (UpdateDesignResponse) {
    option (google.api.http) = {
      patch: "/v1/designs/{design.id=*}"
      body: "*"
    };
    // option (google.api.method_signature) = "design,update_mask";
  }

  //  ----- Section Operations -----

  // Adds a section to a design's section_ids list and creates the section resource.
  rpc AddSection (AddSectionRequest) returns (Section) {
    option (google.api.http) = {
      post: "/v1/designs/{section.design_id}/sections"
      body: "*" // Contains initial title, type, content, and positioning info
    };
  }

  rpc GetSection (GetSectionRequest) returns (Section) {
    option (google.api.http) = {
      get: "/v1/designs/{design_id}/sections/{section_id}"
    };
  }

  // Use PATCH for partial updates to a section (title, content)
  rpc UpdateSection (UpdateSectionRequest) returns (Section) {
     option (google.api.http) = {
       patch: "/v1/designs/{section.design_id}/sections/{section.id}"
       body: "*" // Only the 'section' field goes in the body
     };
  }

  // Moves a section within the Design's section_ids list
  // We could have done this via an UpdateDesign with the changed order but this is 
  // clearer and only needs to deal with the current (and target) section instead of
  // needing to know all sections for an update.
  rpc MoveSection (MoveSectionRequest) returns (MoveSectionResponse) {
    option (google.api.http) = {
      // Use a custom verb ':move' applied to the specific section resource
      post: "/v1/designs/{design_id}/sections/{section_id}:move"
      body: "*" // Contains relative_section_id and position
    };
  }

  rpc DeleteSection (DeleteSectionRequest) returns (DeleteSectionResponse) {
    option (google.api.http) = {
      delete: "/v1/designs/{design_id}/sections/{section_id}"
    };
  }

  /*
  rpc SetContent(SetContentRequest) returns (SetContentResponse) {
    option (google.api.http) = {
      patch: "/v1/designs/{design_id=*}/sections/{section_id=*}/content/{name=*}"
      body: "content_bytes"
    };
  };
  */
}

/**
 * Design creation request object
 */
message CreateDesignRequest {
  /**
   * Design being updated
   */
  Design design = 1;
}

/**
 * Response of an design creation.
 */
message CreateDesignResponse {
  /**
   * Design being created
   */
  Design design = 1;

  /**
   * Error specific to a field if there are any errors.
   */
  map<string, string> field_errors = 2;
}

/**
 * An design search request.  For now only paginations params are provided.
 */
message ListDesignsRequest {
  // Pagination info
  Pagination pagination = 1;

  /**
   * Limit to designs of a particular user
   */
  string owner_id = 3;

  /**
   * Whether to only get public ones.
   */
  bool limit_to_public = 5;

  /**
   * "recent" or "name"
   */
  string order_by = 6;
}

/**
 * Response of a design search/listing.
 */
message ListDesignsResponse {
  /**
   * The list of designs found as part of this response.
   */
  repeated Design designs = 1;

  PaginationResponse pagination = 2;
}

/**
 * Request to get an design.
 */
message GetDesignRequest {
  /**
   * ID of the design to be fetched
   */
  string id = 1;

  // New flag to request metadata inclusion.  Note section content is NOT returned here but instead with GetSection
  bool include_section_metadata = 2;
}

/**
 * Design get response
 */
message GetDesignResponse {
  Design design = 1;

  // Optionally populated by server if include_section_metadata was true.
  // Sections in this list will *not* have their 'content' oneof populated.
  // The order should match design.section_ids.
  repeated Section sections_metadata = 2;
}

/**
 * Request to batch get designs
 */
message GetDesignsRequest {
  /**
   * IDs of the design to be fetched
   */
  repeated string ids = 1;
}

/**
 * Design batch-get response
 */
message GetDesignsResponse {
  map<string, Design> designs = 1;
}

/**
 * Request to delete an design.
 */
message DeleteDesignRequest {
  /**
   * ID of the design to be deleted.
   */
  string id = 1;
}

/**
 * Design deletion response
 */
message DeleteDesignResponse {
}

/**
 * The request for (partially) updating an Design.  Note this only updates design level metadata.
 * Specific changes to section contetn will not happen here.
 */
message UpdateDesignRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UpdateDesignRequest"
    }
  };

  /**
   * Design being updated
   */
  Design design = 1;

  /**
   * Mask of fields being updated in this Design to make partial changes.
   */
  google.protobuf.FieldMask update_mask = 2;
}

/**
 * The request for (partially) updating an Design.
 */
message UpdateDesignResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UpdateDesignResponse"
    }
  };

  /**
   * Design being updated
   */
  Design design = 1;
}


// --- Section Messages ---

message AddSectionRequest {
  Section section = 1;
  string relative_section_id = 2;
  PositionType position = 3;
}

message GetSectionRequest {
  string design_id = 1;
  string section_id = 2;
}

// Consolidate section updates into one RPC using PATCH and FieldMask
message UpdateSectionRequest {
  // Section object containing *only* the fields to be updated.
  // The server will use the update_mask to know which fields from
  // this 'section' message to apply to the stored section.
  Section section = 1;
  google.protobuf.FieldMask update_mask = 2; // e.g., paths: "title", paths: "text_content"
}

message MoveSectionRequest {
  string design_id = 1;
  string section_id = 2; // The section being moved
  string relative_section_id = 3;
  PositionType position = 4;
}

message MoveSectionResponse {
}

message DeleteSectionRequest {
  string design_id = 1;
  string section_id = 2;
}

message DeleteSectionResponse {
}
