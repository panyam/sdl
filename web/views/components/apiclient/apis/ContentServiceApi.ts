/* tslint:disable */
/* eslint-disable */
/**
 * leetcoach/v1/models.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  V1GetContentResponse,
  V1SetContentResponse,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1GetContentResponseFromJSON,
    V1GetContentResponseToJSON,
    V1SetContentResponseFromJSON,
    V1SetContentResponseToJSON,
} from '../models/index';

export interface ContentServiceDeleteContentRequest {
    designId: string;
    sectionId: string;
    name: string;
}

export interface ContentServiceGetContentRequest {
    designId: string;
    sectionId: string;
    name: string;
}

export interface ContentServiceSetContentRequest {
    designId: string;
    sectionId: string;
    name: string;
    contentBytes: string;
}

/**
 * 
 */
export class ContentServiceApi extends runtime.BaseAPI {

    /**
     * Delete a named content piece from a section.
     */
    async contentServiceDeleteContentRaw(requestParameters: ContentServiceDeleteContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['designId'] == null) {
            throw new runtime.RequiredError(
                'designId',
                'Required parameter "designId" was null or undefined when calling contentServiceDeleteContent().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling contentServiceDeleteContent().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling contentServiceDeleteContent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/designs/{designId}/sections/{sectionId}/content/{name}`.replace(`{${"designId"}}`, encodeURIComponent(String(requestParameters['designId']))).replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters['sectionId']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a named content piece from a section.
     */
    async contentServiceDeleteContent(requestParameters: ContentServiceDeleteContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.contentServiceDeleteContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific content piece\'s metadata and bytes.
     */
    async contentServiceGetContentRaw(requestParameters: ContentServiceGetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetContentResponse>> {
        if (requestParameters['designId'] == null) {
            throw new runtime.RequiredError(
                'designId',
                'Required parameter "designId" was null or undefined when calling contentServiceGetContent().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling contentServiceGetContent().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling contentServiceGetContent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/designs/{designId}/sections/{sectionId}/content/{name}`.replace(`{${"designId"}}`, encodeURIComponent(String(requestParameters['designId']))).replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters['sectionId']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetContentResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific content piece\'s metadata and bytes.
     */
    async contentServiceGetContent(requestParameters: ContentServiceGetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetContentResponse> {
        const response = await this.contentServiceGetContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set or create a content piece\'s metadata (type/format) and/or its bytes.
     */
    async contentServiceSetContentRaw(requestParameters: ContentServiceSetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SetContentResponse>> {
        if (requestParameters['designId'] == null) {
            throw new runtime.RequiredError(
                'designId',
                'Required parameter "designId" was null or undefined when calling contentServiceSetContent().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling contentServiceSetContent().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling contentServiceSetContent().'
            );
        }

        if (requestParameters['contentBytes'] == null) {
            throw new runtime.RequiredError(
                'contentBytes',
                'Required parameter "contentBytes" was null or undefined when calling contentServiceSetContent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/designs/{designId}/sections/{sectionId}/content/{name}`.replace(`{${"designId"}}`, encodeURIComponent(String(requestParameters['designId']))).replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters['sectionId']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['contentBytes'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SetContentResponseFromJSON(jsonValue));
    }

    /**
     * Set or create a content piece\'s metadata (type/format) and/or its bytes.
     */
    async contentServiceSetContent(requestParameters: ContentServiceSetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SetContentResponse> {
        const response = await this.contentServiceSetContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
