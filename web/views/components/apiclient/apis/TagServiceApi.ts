/* tslint:disable */
/* eslint-disable */
/**
 * leetcoach/v1/models.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  TagCreationRequestObject,
  UpdateTagRequest,
  V1CreateTagResponse,
  V1GetTagResponse,
  V1GetTagsResponse,
  V1ListTagsResponse,
  V1UpdateTagResponse,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    TagCreationRequestObjectFromJSON,
    TagCreationRequestObjectToJSON,
    UpdateTagRequestFromJSON,
    UpdateTagRequestToJSON,
    V1CreateTagResponseFromJSON,
    V1CreateTagResponseToJSON,
    V1GetTagResponseFromJSON,
    V1GetTagResponseToJSON,
    V1GetTagsResponseFromJSON,
    V1GetTagsResponseToJSON,
    V1ListTagsResponseFromJSON,
    V1ListTagsResponseToJSON,
    V1UpdateTagResponseFromJSON,
    V1UpdateTagResponseToJSON,
} from '../models/index';

export interface TagServiceCreateTagRequest {
    tagName: string;
    body: TagCreationRequestObject;
}

export interface TagServiceDeleteTagRequest {
    id: string;
}

export interface TagServiceGetTagRequest {
    id: string;
    withContents?: boolean;
}

export interface TagServiceGetTagsRequest {
    ids?: Array<string>;
}

export interface TagServiceListTagsRequest {
    pageKey?: string;
    pageSize?: number;
    userId?: string;
    prefix?: string;
    orderBy?: string;
}

export interface TagServiceUpdateTagRequest {
    tagName: string;
    body: UpdateTagRequest;
}

/**
 * 
 */
export class TagServiceApi extends runtime.BaseAPI {

    /**
     * * Create a new tag.  If a tag by name already exists then it is returned.
     */
    async tagServiceCreateTagRaw(requestParameters: TagServiceCreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateTagResponse>> {
        if (requestParameters['tagName'] == null) {
            throw new runtime.RequiredError(
                'tagName',
                'Required parameter "tagName" was null or undefined when calling tagServiceCreateTag().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling tagServiceCreateTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tags/{tag.name}`.replace(`{${"tag.name"}}`, encodeURIComponent(String(requestParameters['tagName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagCreationRequestObjectToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateTagResponseFromJSON(jsonValue));
    }

    /**
     * * Create a new tag.  If a tag by name already exists then it is returned.
     */
    async tagServiceCreateTag(requestParameters: TagServiceCreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateTagResponse> {
        const response = await this.tagServiceCreateTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Delete a particular tag
     */
    async tagServiceDeleteTagRaw(requestParameters: TagServiceDeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tagServiceDeleteTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * * Delete a particular tag
     */
    async tagServiceDeleteTag(requestParameters: TagServiceDeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tagServiceDeleteTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Get a particular tag
     */
    async tagServiceGetTagRaw(requestParameters: TagServiceGetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetTagResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tagServiceGetTag().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['withContents'] != null) {
            queryParameters['withContents'] = requestParameters['withContents'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetTagResponseFromJSON(jsonValue));
    }

    /**
     * * Get a particular tag
     */
    async tagServiceGetTag(requestParameters: TagServiceGetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetTagResponse> {
        const response = await this.tagServiceGetTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Batch get multiple tags by ID
     */
    async tagServiceGetTagsRaw(requestParameters: TagServiceGetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetTagsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tags:batchGet`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetTagsResponseFromJSON(jsonValue));
    }

    /**
     * * Batch get multiple tags by ID
     */
    async tagServiceGetTags(requestParameters: TagServiceGetTagsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetTagsResponse> {
        const response = await this.tagServiceGetTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * List all tags
     */
    async tagServiceListTagsRaw(requestParameters: TagServiceListTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListTagsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['pageKey'] != null) {
            queryParameters['pageKey'] = requestParameters['pageKey'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['prefix'] != null) {
            queryParameters['prefix'] = requestParameters['prefix'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListTagsResponseFromJSON(jsonValue));
    }

    /**
     * * List all tags
     */
    async tagServiceListTags(requestParameters: TagServiceListTagsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListTagsResponse> {
        const response = await this.tagServiceListTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Updates specific fields of a tag
     */
    async tagServiceUpdateTagRaw(requestParameters: TagServiceUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1UpdateTagResponse>> {
        if (requestParameters['tagName'] == null) {
            throw new runtime.RequiredError(
                'tagName',
                'Required parameter "tagName" was null or undefined when calling tagServiceUpdateTag().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling tagServiceUpdateTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tags/{tag.name}`.replace(`{${"tag.name"}}`, encodeURIComponent(String(requestParameters['tagName']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTagRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UpdateTagResponseFromJSON(jsonValue));
    }

    /**
     * * Updates specific fields of a tag
     */
    async tagServiceUpdateTag(requestParameters: TagServiceUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1UpdateTagResponse> {
        const response = await this.tagServiceUpdateTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
