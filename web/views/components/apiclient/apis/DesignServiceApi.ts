/* tslint:disable */
/* eslint-disable */
/**
 * leetcoach/v1/models.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConsolidateSectionUpdatesIntoOneRPCUsingPATCHAndFieldMask,
  DesignServiceAddSectionRequest,
  DesignServiceMoveSectionRequest,
  RpcStatus,
  UpdateDesignRequest,
  V1CreateDesignRequest,
  V1CreateDesignResponse,
  V1GetDesignResponse,
  V1GetDesignsResponse,
  V1ListDesignsResponse,
  V1Section,
  V1UpdateDesignResponse,
} from '../models/index';
import {
    ConsolidateSectionUpdatesIntoOneRPCUsingPATCHAndFieldMaskFromJSON,
    ConsolidateSectionUpdatesIntoOneRPCUsingPATCHAndFieldMaskToJSON,
    DesignServiceAddSectionRequestFromJSON,
    DesignServiceAddSectionRequestToJSON,
    DesignServiceMoveSectionRequestFromJSON,
    DesignServiceMoveSectionRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    UpdateDesignRequestFromJSON,
    UpdateDesignRequestToJSON,
    V1CreateDesignRequestFromJSON,
    V1CreateDesignRequestToJSON,
    V1CreateDesignResponseFromJSON,
    V1CreateDesignResponseToJSON,
    V1GetDesignResponseFromJSON,
    V1GetDesignResponseToJSON,
    V1GetDesignsResponseFromJSON,
    V1GetDesignsResponseToJSON,
    V1ListDesignsResponseFromJSON,
    V1ListDesignsResponseToJSON,
    V1SectionFromJSON,
    V1SectionToJSON,
    V1UpdateDesignResponseFromJSON,
    V1UpdateDesignResponseToJSON,
} from '../models/index';

export interface DesignServiceAddSectionOperationRequest {
    sectionDesignId: string;
    body: DesignServiceAddSectionRequest;
}

export interface DesignServiceCreateDesignRequest {
    body: V1CreateDesignRequest;
}

export interface DesignServiceDeleteDesignRequest {
    id: string;
}

export interface DesignServiceDeleteSectionRequest {
    designId: string;
    sectionId: string;
}

export interface DesignServiceGetDesignRequest {
    id: string;
    includeSectionMetadata?: boolean;
}

export interface DesignServiceGetDesignsRequest {
    ids?: Array<string>;
}

export interface DesignServiceGetSectionRequest {
    designId: string;
    sectionId: string;
}

export interface DesignServiceListDesignsRequest {
    paginationPageKey?: string;
    paginationPageOffset?: number;
    paginationPageSize?: number;
    ownerId?: string;
    limitToPublic?: boolean;
    orderBy?: string;
}

export interface DesignServiceMoveSectionOperationRequest {
    designId: string;
    sectionId: string;
    body: DesignServiceMoveSectionRequest;
}

export interface DesignServiceUpdateDesignRequest {
    designId: string;
    body: UpdateDesignRequest;
}

export interface DesignServiceUpdateSectionRequest {
    sectionDesignId: string;
    sectionId: string;
    body: ConsolidateSectionUpdatesIntoOneRPCUsingPATCHAndFieldMask;
}

/**
 * 
 */
export class DesignServiceApi extends runtime.BaseAPI {

    /**
     * Adds a section to a design\'s section_ids list and creates the section resource.
     */
    async designServiceAddSectionRaw(requestParameters: DesignServiceAddSectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Section>> {
        if (requestParameters['sectionDesignId'] == null) {
            throw new runtime.RequiredError(
                'sectionDesignId',
                'Required parameter "sectionDesignId" was null or undefined when calling designServiceAddSection().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling designServiceAddSection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/designs/{section.designId}/sections`.replace(`{${"section.designId"}}`, encodeURIComponent(String(requestParameters['sectionDesignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DesignServiceAddSectionRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SectionFromJSON(jsonValue));
    }

    /**
     * Adds a section to a design\'s section_ids list and creates the section resource.
     */
    async designServiceAddSection(requestParameters: DesignServiceAddSectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Section> {
        const response = await this.designServiceAddSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Create a new sesssion
     */
    async designServiceCreateDesignRaw(requestParameters: DesignServiceCreateDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateDesignResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling designServiceCreateDesign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/designs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateDesignRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateDesignResponseFromJSON(jsonValue));
    }

    /**
     * * Create a new sesssion
     */
    async designServiceCreateDesign(requestParameters: DesignServiceCreateDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateDesignResponse> {
        const response = await this.designServiceCreateDesignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Delete a particular design
     */
    async designServiceDeleteDesignRaw(requestParameters: DesignServiceDeleteDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling designServiceDeleteDesign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/designs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * * Delete a particular design
     */
    async designServiceDeleteDesign(requestParameters: DesignServiceDeleteDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.designServiceDeleteDesignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async designServiceDeleteSectionRaw(requestParameters: DesignServiceDeleteSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['designId'] == null) {
            throw new runtime.RequiredError(
                'designId',
                'Required parameter "designId" was null or undefined when calling designServiceDeleteSection().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling designServiceDeleteSection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/designs/{designId}/sections/{sectionId}`.replace(`{${"designId"}}`, encodeURIComponent(String(requestParameters['designId']))).replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters['sectionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async designServiceDeleteSection(requestParameters: DesignServiceDeleteSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.designServiceDeleteSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Get a particular design
     */
    async designServiceGetDesignRaw(requestParameters: DesignServiceGetDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetDesignResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling designServiceGetDesign().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeSectionMetadata'] != null) {
            queryParameters['includeSectionMetadata'] = requestParameters['includeSectionMetadata'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/designs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetDesignResponseFromJSON(jsonValue));
    }

    /**
     * * Get a particular design
     */
    async designServiceGetDesign(requestParameters: DesignServiceGetDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetDesignResponse> {
        const response = await this.designServiceGetDesignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Batch get multiple designs by ID
     */
    async designServiceGetDesignsRaw(requestParameters: DesignServiceGetDesignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetDesignsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/designs:batchGet`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetDesignsResponseFromJSON(jsonValue));
    }

    /**
     * * Batch get multiple designs by ID
     */
    async designServiceGetDesigns(requestParameters: DesignServiceGetDesignsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetDesignsResponse> {
        const response = await this.designServiceGetDesignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async designServiceGetSectionRaw(requestParameters: DesignServiceGetSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Section>> {
        if (requestParameters['designId'] == null) {
            throw new runtime.RequiredError(
                'designId',
                'Required parameter "designId" was null or undefined when calling designServiceGetSection().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling designServiceGetSection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/designs/{designId}/sections/{sectionId}`.replace(`{${"designId"}}`, encodeURIComponent(String(requestParameters['designId']))).replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters['sectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SectionFromJSON(jsonValue));
    }

    /**
     */
    async designServiceGetSection(requestParameters: DesignServiceGetSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Section> {
        const response = await this.designServiceGetSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * List all designs from a user.
     */
    async designServiceListDesignsRaw(requestParameters: DesignServiceListDesignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListDesignsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['paginationPageKey'] != null) {
            queryParameters['pagination.pageKey'] = requestParameters['paginationPageKey'];
        }

        if (requestParameters['paginationPageOffset'] != null) {
            queryParameters['pagination.pageOffset'] = requestParameters['paginationPageOffset'];
        }

        if (requestParameters['paginationPageSize'] != null) {
            queryParameters['pagination.pageSize'] = requestParameters['paginationPageSize'];
        }

        if (requestParameters['ownerId'] != null) {
            queryParameters['ownerId'] = requestParameters['ownerId'];
        }

        if (requestParameters['limitToPublic'] != null) {
            queryParameters['limitToPublic'] = requestParameters['limitToPublic'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/designs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListDesignsResponseFromJSON(jsonValue));
    }

    /**
     * * List all designs from a user.
     */
    async designServiceListDesigns(requestParameters: DesignServiceListDesignsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListDesignsResponse> {
        const response = await this.designServiceListDesignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Moves a section within the Design\'s section_ids list We could have done this via an UpdateDesign with the changed order but this is  clearer and only needs to deal with the current (and target) section instead of needing to know all sections for an update.
     */
    async designServiceMoveSectionRaw(requestParameters: DesignServiceMoveSectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['designId'] == null) {
            throw new runtime.RequiredError(
                'designId',
                'Required parameter "designId" was null or undefined when calling designServiceMoveSection().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling designServiceMoveSection().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling designServiceMoveSection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/designs/{designId}/sections/{sectionId}:move`.replace(`{${"designId"}}`, encodeURIComponent(String(requestParameters['designId']))).replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters['sectionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DesignServiceMoveSectionRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Moves a section within the Design\'s section_ids list We could have done this via an UpdateDesign with the changed order but this is  clearer and only needs to deal with the current (and target) section instead of needing to know all sections for an update.
     */
    async designServiceMoveSection(requestParameters: DesignServiceMoveSectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.designServiceMoveSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * * Updates specific fields of a design
     */
    async designServiceUpdateDesignRaw(requestParameters: DesignServiceUpdateDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1UpdateDesignResponse>> {
        if (requestParameters['designId'] == null) {
            throw new runtime.RequiredError(
                'designId',
                'Required parameter "designId" was null or undefined when calling designServiceUpdateDesign().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling designServiceUpdateDesign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/designs/{design.id}`.replace(`{${"design.id"}}`, encodeURIComponent(String(requestParameters['designId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDesignRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UpdateDesignResponseFromJSON(jsonValue));
    }

    /**
     * * Updates specific fields of a design
     */
    async designServiceUpdateDesign(requestParameters: DesignServiceUpdateDesignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1UpdateDesignResponse> {
        const response = await this.designServiceUpdateDesignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use PATCH for partial updates to a section (title, content)
     */
    async designServiceUpdateSectionRaw(requestParameters: DesignServiceUpdateSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Section>> {
        if (requestParameters['sectionDesignId'] == null) {
            throw new runtime.RequiredError(
                'sectionDesignId',
                'Required parameter "sectionDesignId" was null or undefined when calling designServiceUpdateSection().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling designServiceUpdateSection().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling designServiceUpdateSection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/designs/{section.designId}/sections/{section.id}`.replace(`{${"section.designId"}}`, encodeURIComponent(String(requestParameters['sectionDesignId']))).replace(`{${"section.id"}}`, encodeURIComponent(String(requestParameters['sectionId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ConsolidateSectionUpdatesIntoOneRPCUsingPATCHAndFieldMaskToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SectionFromJSON(jsonValue));
    }

    /**
     * Use PATCH for partial updates to a section (title, content)
     */
    async designServiceUpdateSection(requestParameters: DesignServiceUpdateSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Section> {
        const response = await this.designServiceUpdateSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
