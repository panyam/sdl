// protos/sdl/v1/canvas.proto

// @generated by protoc-gen-es v2.5.2 with parameter "target=ts"
// @generated from file sdl/v1/canvas.proto (package sdl.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import type { Canvas, Generator, Metric, Pagination, PaginationResponse } from "./models_pb";
import { file_sdl_v1_models } from "./models_pb";
import { file_google_api_annotations } from "../../google/api/annotations_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file sdl/v1/canvas.proto.
 */
export const file_sdl_v1_canvas: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_field_mask, file_sdl_v1_models, file_google_api_annotations]);

/**
 * *
 * Canvas creation request object
 *
 * @generated from message sdl.v1.CreateCanvasRequest
 */
export type CreateCanvasRequest = Message<"sdl.v1.CreateCanvasRequest"> & {
  /**
   * *
   * Canvas being updated
   *
   * @generated from field: sdl.v1.Canvas canvas = 1;
   */
  canvas?: Canvas;
};

/**
 * Describes the message sdl.v1.CreateCanvasRequest.
 * Use `create(CreateCanvasRequestSchema)` to create a new message.
 */
export const CreateCanvasRequestSchema: GenMessage<CreateCanvasRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 0);

/**
 * *
 * Response of an canvas creation.
 *
 * @generated from message sdl.v1.CreateCanvasResponse
 */
export type CreateCanvasResponse = Message<"sdl.v1.CreateCanvasResponse"> & {
  /**
   * *
   * Canvas being created
   *
   * @generated from field: sdl.v1.Canvas canvas = 1;
   */
  canvas?: Canvas;

  /**
   * *
   * Error specific to a field if there are any errors.
   *
   * @generated from field: map<string, string> field_errors = 2;
   */
  fieldErrors: { [key: string]: string };
};

/**
 * Describes the message sdl.v1.CreateCanvasResponse.
 * Use `create(CreateCanvasResponseSchema)` to create a new message.
 */
export const CreateCanvasResponseSchema: GenMessage<CreateCanvasResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 1);

/**
 * *
 * An canvas search request.  For now only paginations params are provided.
 *
 * @generated from message sdl.v1.ListCanvasesRequest
 */
export type ListCanvasesRequest = Message<"sdl.v1.ListCanvasesRequest"> & {
  /**
   * Pagination info
   *
   * @generated from field: sdl.v1.Pagination pagination = 1;
   */
  pagination?: Pagination;
};

/**
 * Describes the message sdl.v1.ListCanvasesRequest.
 * Use `create(ListCanvasesRequestSchema)` to create a new message.
 */
export const ListCanvasesRequestSchema: GenMessage<ListCanvasesRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 2);

/**
 * *
 * Response of a canvas search/listing.
 *
 * @generated from message sdl.v1.ListCanvasesResponse
 */
export type ListCanvasesResponse = Message<"sdl.v1.ListCanvasesResponse"> & {
  /**
   * *
   * The list of canvases found as part of this response.
   *
   * @generated from field: repeated sdl.v1.Canvas canvases = 1;
   */
  canvases: Canvas[];

  /**
   * @generated from field: sdl.v1.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;
};

/**
 * Describes the message sdl.v1.ListCanvasesResponse.
 * Use `create(ListCanvasesResponseSchema)` to create a new message.
 */
export const ListCanvasesResponseSchema: GenMessage<ListCanvasesResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 3);

/**
 * *
 * Request to get a canvas.
 *
 * @generated from message sdl.v1.GetCanvasRequest
 */
export type GetCanvasRequest = Message<"sdl.v1.GetCanvasRequest"> & {
  /**
   * *
   * ID of the canvas to be fetched
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message sdl.v1.GetCanvasRequest.
 * Use `create(GetCanvasRequestSchema)` to create a new message.
 */
export const GetCanvasRequestSchema: GenMessage<GetCanvasRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 4);

/**
 * *
 * Canvas get response
 *
 * @generated from message sdl.v1.GetCanvasResponse
 */
export type GetCanvasResponse = Message<"sdl.v1.GetCanvasResponse"> & {
  /**
   * @generated from field: sdl.v1.Canvas canvas = 1;
   */
  canvas?: Canvas;
};

/**
 * Describes the message sdl.v1.GetCanvasResponse.
 * Use `create(GetCanvasResponseSchema)` to create a new message.
 */
export const GetCanvasResponseSchema: GenMessage<GetCanvasResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 5);

/**
 * *
 * Request to delete an canvas.
 *
 * @generated from message sdl.v1.DeleteCanvasRequest
 */
export type DeleteCanvasRequest = Message<"sdl.v1.DeleteCanvasRequest"> & {
  /**
   * *
   * ID of the canvas to be deleted.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message sdl.v1.DeleteCanvasRequest.
 * Use `create(DeleteCanvasRequestSchema)` to create a new message.
 */
export const DeleteCanvasRequestSchema: GenMessage<DeleteCanvasRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 6);

/**
 * *
 * Canvas deletion response
 *
 * @generated from message sdl.v1.DeleteCanvasResponse
 */
export type DeleteCanvasResponse = Message<"sdl.v1.DeleteCanvasResponse"> & {
};

/**
 * Describes the message sdl.v1.DeleteCanvasResponse.
 * Use `create(DeleteCanvasResponseSchema)` to create a new message.
 */
export const DeleteCanvasResponseSchema: GenMessage<DeleteCanvasResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 7);

/**
 * @generated from message sdl.v1.AddGeneratorRequest
 */
export type AddGeneratorRequest = Message<"sdl.v1.AddGeneratorRequest"> & {
  /**
   * @generated from field: sdl.v1.Generator generator = 1;
   */
  generator?: Generator;
};

/**
 * Describes the message sdl.v1.AddGeneratorRequest.
 * Use `create(AddGeneratorRequestSchema)` to create a new message.
 */
export const AddGeneratorRequestSchema: GenMessage<AddGeneratorRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 8);

/**
 * @generated from message sdl.v1.AddGeneratorResponse
 */
export type AddGeneratorResponse = Message<"sdl.v1.AddGeneratorResponse"> & {
  /**
   * @generated from field: sdl.v1.Generator generator = 1;
   */
  generator?: Generator;
};

/**
 * Describes the message sdl.v1.AddGeneratorResponse.
 * Use `create(AddGeneratorResponseSchema)` to create a new message.
 */
export const AddGeneratorResponseSchema: GenMessage<AddGeneratorResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 9);

/**
 * @generated from message sdl.v1.ListGeneratorsRequest
 */
export type ListGeneratorsRequest = Message<"sdl.v1.ListGeneratorsRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;
};

/**
 * Describes the message sdl.v1.ListGeneratorsRequest.
 * Use `create(ListGeneratorsRequestSchema)` to create a new message.
 */
export const ListGeneratorsRequestSchema: GenMessage<ListGeneratorsRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 10);

/**
 * @generated from message sdl.v1.ListGeneratorsResponse
 */
export type ListGeneratorsResponse = Message<"sdl.v1.ListGeneratorsResponse"> & {
  /**
   * @generated from field: repeated sdl.v1.Generator generators = 1;
   */
  generators: Generator[];
};

/**
 * Describes the message sdl.v1.ListGeneratorsResponse.
 * Use `create(ListGeneratorsResponseSchema)` to create a new message.
 */
export const ListGeneratorsResponseSchema: GenMessage<ListGeneratorsResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 11);

/**
 * @generated from message sdl.v1.StartAllGeneratorsRequest
 */
export type StartAllGeneratorsRequest = Message<"sdl.v1.StartAllGeneratorsRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;
};

/**
 * Describes the message sdl.v1.StartAllGeneratorsRequest.
 * Use `create(StartAllGeneratorsRequestSchema)` to create a new message.
 */
export const StartAllGeneratorsRequestSchema: GenMessage<StartAllGeneratorsRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 12);

/**
 * @generated from message sdl.v1.StartAllGeneratorsResponse
 */
export type StartAllGeneratorsResponse = Message<"sdl.v1.StartAllGeneratorsResponse"> & {
  /**
   * Total number of generators
   *
   * @generated from field: int32 total_generators = 1;
   */
  totalGenerators: number;

  /**
   * Number successfully started
   *
   * @generated from field: int32 started_count = 2;
   */
  startedCount: number;

  /**
   * Number already running
   *
   * @generated from field: int32 already_running_count = 3;
   */
  alreadyRunningCount: number;

  /**
   * Number that failed to start
   *
   * @generated from field: int32 failed_count = 4;
   */
  failedCount: number;

  /**
   * IDs of generators that failed
   *
   * @generated from field: repeated string failed_ids = 5;
   */
  failedIds: string[];
};

/**
 * Describes the message sdl.v1.StartAllGeneratorsResponse.
 * Use `create(StartAllGeneratorsResponseSchema)` to create a new message.
 */
export const StartAllGeneratorsResponseSchema: GenMessage<StartAllGeneratorsResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 13);

/**
 * @generated from message sdl.v1.StopAllGeneratorsRequest
 */
export type StopAllGeneratorsRequest = Message<"sdl.v1.StopAllGeneratorsRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;
};

/**
 * Describes the message sdl.v1.StopAllGeneratorsRequest.
 * Use `create(StopAllGeneratorsRequestSchema)` to create a new message.
 */
export const StopAllGeneratorsRequestSchema: GenMessage<StopAllGeneratorsRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 14);

/**
 * @generated from message sdl.v1.StopAllGeneratorsResponse
 */
export type StopAllGeneratorsResponse = Message<"sdl.v1.StopAllGeneratorsResponse"> & {
  /**
   * Total number of generators
   *
   * @generated from field: int32 total_generators = 1;
   */
  totalGenerators: number;

  /**
   * Number successfully stopped
   *
   * @generated from field: int32 stopped_count = 2;
   */
  stoppedCount: number;

  /**
   * Number already stopped
   *
   * @generated from field: int32 already_stopped_count = 3;
   */
  alreadyStoppedCount: number;

  /**
   * Number that failed to stop
   *
   * @generated from field: int32 failed_count = 4;
   */
  failedCount: number;

  /**
   * IDs of generators that failed
   *
   * @generated from field: repeated string failed_ids = 5;
   */
  failedIds: string[];
};

/**
 * Describes the message sdl.v1.StopAllGeneratorsResponse.
 * Use `create(StopAllGeneratorsResponseSchema)` to create a new message.
 */
export const StopAllGeneratorsResponseSchema: GenMessage<StopAllGeneratorsResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 15);

/**
 * @generated from message sdl.v1.GetGeneratorRequest
 */
export type GetGeneratorRequest = Message<"sdl.v1.GetGeneratorRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * @generated from field: string generator_id = 2;
   */
  generatorId: string;
};

/**
 * Describes the message sdl.v1.GetGeneratorRequest.
 * Use `create(GetGeneratorRequestSchema)` to create a new message.
 */
export const GetGeneratorRequestSchema: GenMessage<GetGeneratorRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 16);

/**
 * @generated from message sdl.v1.GetGeneratorResponse
 */
export type GetGeneratorResponse = Message<"sdl.v1.GetGeneratorResponse"> & {
  /**
   * @generated from field: sdl.v1.Generator generator = 1;
   */
  generator?: Generator;
};

/**
 * Describes the message sdl.v1.GetGeneratorResponse.
 * Use `create(GetGeneratorResponseSchema)` to create a new message.
 */
export const GetGeneratorResponseSchema: GenMessage<GetGeneratorResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 17);

/**
 * Consolidate generator updates into one RPC using PATCH and FieldMask
 *
 * @generated from message sdl.v1.UpdateGeneratorRequest
 */
export type UpdateGeneratorRequest = Message<"sdl.v1.UpdateGeneratorRequest"> & {
  /**
   * Generator object containing *only* the fields to be updated.
   * The server will use the update_mask to know which fields from
   * this 'generator' message to apply to the stored generator.
   *
   * @generated from field: sdl.v1.Generator generator = 1;
   */
  generator?: Generator;

  /**
   * e.g., paths: "title", paths: "text_content"
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message sdl.v1.UpdateGeneratorRequest.
 * Use `create(UpdateGeneratorRequestSchema)` to create a new message.
 */
export const UpdateGeneratorRequestSchema: GenMessage<UpdateGeneratorRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 18);

/**
 * @generated from message sdl.v1.UpdateGeneratorResponse
 */
export type UpdateGeneratorResponse = Message<"sdl.v1.UpdateGeneratorResponse"> & {
  /**
   * @generated from field: sdl.v1.Generator generator = 1;
   */
  generator?: Generator;
};

/**
 * Describes the message sdl.v1.UpdateGeneratorResponse.
 * Use `create(UpdateGeneratorResponseSchema)` to create a new message.
 */
export const UpdateGeneratorResponseSchema: GenMessage<UpdateGeneratorResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 19);

/**
 * @generated from message sdl.v1.StartGeneratorRequest
 */
export type StartGeneratorRequest = Message<"sdl.v1.StartGeneratorRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * The generator being moved
   *
   * @generated from field: string generator_id = 2;
   */
  generatorId: string;
};

/**
 * Describes the message sdl.v1.StartGeneratorRequest.
 * Use `create(StartGeneratorRequestSchema)` to create a new message.
 */
export const StartGeneratorRequestSchema: GenMessage<StartGeneratorRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 20);

/**
 * @generated from message sdl.v1.StartGeneratorResponse
 */
export type StartGeneratorResponse = Message<"sdl.v1.StartGeneratorResponse"> & {
};

/**
 * Describes the message sdl.v1.StartGeneratorResponse.
 * Use `create(StartGeneratorResponseSchema)` to create a new message.
 */
export const StartGeneratorResponseSchema: GenMessage<StartGeneratorResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 21);

/**
 * @generated from message sdl.v1.StopGeneratorRequest
 */
export type StopGeneratorRequest = Message<"sdl.v1.StopGeneratorRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * The generator being moved
   *
   * @generated from field: string generator_id = 2;
   */
  generatorId: string;
};

/**
 * Describes the message sdl.v1.StopGeneratorRequest.
 * Use `create(StopGeneratorRequestSchema)` to create a new message.
 */
export const StopGeneratorRequestSchema: GenMessage<StopGeneratorRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 22);

/**
 * @generated from message sdl.v1.StopGeneratorResponse
 */
export type StopGeneratorResponse = Message<"sdl.v1.StopGeneratorResponse"> & {
};

/**
 * Describes the message sdl.v1.StopGeneratorResponse.
 * Use `create(StopGeneratorResponseSchema)` to create a new message.
 */
export const StopGeneratorResponseSchema: GenMessage<StopGeneratorResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 23);

/**
 * @generated from message sdl.v1.DeleteGeneratorRequest
 */
export type DeleteGeneratorRequest = Message<"sdl.v1.DeleteGeneratorRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * @generated from field: string generator_id = 2;
   */
  generatorId: string;
};

/**
 * Describes the message sdl.v1.DeleteGeneratorRequest.
 * Use `create(DeleteGeneratorRequestSchema)` to create a new message.
 */
export const DeleteGeneratorRequestSchema: GenMessage<DeleteGeneratorRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 24);

/**
 * @generated from message sdl.v1.DeleteGeneratorResponse
 */
export type DeleteGeneratorResponse = Message<"sdl.v1.DeleteGeneratorResponse"> & {
};

/**
 * Describes the message sdl.v1.DeleteGeneratorResponse.
 * Use `create(DeleteGeneratorResponseSchema)` to create a new message.
 */
export const DeleteGeneratorResponseSchema: GenMessage<DeleteGeneratorResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 25);

/**
 * @generated from message sdl.v1.LoadFileRequest
 */
export type LoadFileRequest = Message<"sdl.v1.LoadFileRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * @generated from field: string sdl_file_path = 2;
   */
  sdlFilePath: string;
};

/**
 * Describes the message sdl.v1.LoadFileRequest.
 * Use `create(LoadFileRequestSchema)` to create a new message.
 */
export const LoadFileRequestSchema: GenMessage<LoadFileRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 26);

/**
 * @generated from message sdl.v1.LoadFileResponse
 */
export type LoadFileResponse = Message<"sdl.v1.LoadFileResponse"> & {
};

/**
 * Describes the message sdl.v1.LoadFileResponse.
 * Use `create(LoadFileResponseSchema)` to create a new message.
 */
export const LoadFileResponseSchema: GenMessage<LoadFileResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 27);

/**
 * @generated from message sdl.v1.UseSystemRequest
 */
export type UseSystemRequest = Message<"sdl.v1.UseSystemRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * @generated from field: string system_name = 2;
   */
  systemName: string;
};

/**
 * Describes the message sdl.v1.UseSystemRequest.
 * Use `create(UseSystemRequestSchema)` to create a new message.
 */
export const UseSystemRequestSchema: GenMessage<UseSystemRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 28);

/**
 * @generated from message sdl.v1.UseSystemResponse
 */
export type UseSystemResponse = Message<"sdl.v1.UseSystemResponse"> & {
};

/**
 * Describes the message sdl.v1.UseSystemResponse.
 * Use `create(UseSystemResponseSchema)` to create a new message.
 */
export const UseSystemResponseSchema: GenMessage<UseSystemResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 29);

/**
 * @generated from message sdl.v1.AddMetricRequest
 */
export type AddMetricRequest = Message<"sdl.v1.AddMetricRequest"> & {
  /**
   * @generated from field: sdl.v1.Metric metric = 1;
   */
  metric?: Metric;
};

/**
 * Describes the message sdl.v1.AddMetricRequest.
 * Use `create(AddMetricRequestSchema)` to create a new message.
 */
export const AddMetricRequestSchema: GenMessage<AddMetricRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 30);

/**
 * @generated from message sdl.v1.AddMetricResponse
 */
export type AddMetricResponse = Message<"sdl.v1.AddMetricResponse"> & {
  /**
   * @generated from field: sdl.v1.Metric metric = 1;
   */
  metric?: Metric;
};

/**
 * Describes the message sdl.v1.AddMetricResponse.
 * Use `create(AddMetricResponseSchema)` to create a new message.
 */
export const AddMetricResponseSchema: GenMessage<AddMetricResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 31);

/**
 * @generated from message sdl.v1.DeleteMetricRequest
 */
export type DeleteMetricRequest = Message<"sdl.v1.DeleteMetricRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * @generated from field: string metric_id = 2;
   */
  metricId: string;
};

/**
 * Describes the message sdl.v1.DeleteMetricRequest.
 * Use `create(DeleteMetricRequestSchema)` to create a new message.
 */
export const DeleteMetricRequestSchema: GenMessage<DeleteMetricRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 32);

/**
 * @generated from message sdl.v1.DeleteMetricResponse
 */
export type DeleteMetricResponse = Message<"sdl.v1.DeleteMetricResponse"> & {
};

/**
 * Describes the message sdl.v1.DeleteMetricResponse.
 * Use `create(DeleteMetricResponseSchema)` to create a new message.
 */
export const DeleteMetricResponseSchema: GenMessage<DeleteMetricResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 33);

/**
 * @generated from message sdl.v1.QueryMetricsRequest
 */
export type QueryMetricsRequest = Message<"sdl.v1.QueryMetricsRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * Metric identifier (component.method.type)
   *
   * @generated from field: string metric_id = 2;
   */
  metricId: string;

  /**
   * Time range for the query
   *
   * Unix timestamp in seconds
   *
   * @generated from field: double start_time = 3;
   */
  startTime: number;

  /**
   * Unix timestamp in seconds
   *
   * @generated from field: double end_time = 4;
   */
  endTime: number;

  /**
   * Optional: limit number of points returned
   *
   * @generated from field: int32 limit = 5;
   */
  limit: number;
};

/**
 * Describes the message sdl.v1.QueryMetricsRequest.
 * Use `create(QueryMetricsRequestSchema)` to create a new message.
 */
export const QueryMetricsRequestSchema: GenMessage<QueryMetricsRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 34);

/**
 * @generated from message sdl.v1.QueryMetricsResponse
 */
export type QueryMetricsResponse = Message<"sdl.v1.QueryMetricsResponse"> & {
  /**
   * @generated from field: repeated sdl.v1.MetricPoint points = 1;
   */
  points: MetricPoint[];
};

/**
 * Describes the message sdl.v1.QueryMetricsResponse.
 * Use `create(QueryMetricsResponseSchema)` to create a new message.
 */
export const QueryMetricsResponseSchema: GenMessage<QueryMetricsResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 35);

/**
 * @generated from message sdl.v1.MetricPoint
 */
export type MetricPoint = Message<"sdl.v1.MetricPoint"> & {
  /**
   * Unix timestamp in seconds
   *
   * @generated from field: double timestamp = 1;
   */
  timestamp: number;

  /**
   * @generated from field: double value = 2;
   */
  value: number;
};

/**
 * Describes the message sdl.v1.MetricPoint.
 * Use `create(MetricPointSchema)` to create a new message.
 */
export const MetricPointSchema: GenMessage<MetricPoint> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 36);

/**
 * @generated from message sdl.v1.AggregateMetricsRequest
 */
export type AggregateMetricsRequest = Message<"sdl.v1.AggregateMetricsRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * @generated from field: string metric_id = 2;
   */
  metricId: string;

  /**
   * @generated from field: double start_time = 3;
   */
  startTime: number;

  /**
   * @generated from field: double end_time = 4;
   */
  endTime: number;

  /**
   * Aggregation function: "count", "sum", "avg", "min", "max", "p50", "p90", "p95", "p99"
   *
   * @generated from field: string function = 5;
   */
  function: string;

  /**
   * Optional: window size for time-based aggregation (in seconds)
   *
   * @generated from field: double window_size = 6;
   */
  windowSize: number;
};

/**
 * Describes the message sdl.v1.AggregateMetricsRequest.
 * Use `create(AggregateMetricsRequestSchema)` to create a new message.
 */
export const AggregateMetricsRequestSchema: GenMessage<AggregateMetricsRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 37);

/**
 * @generated from message sdl.v1.AggregateMetricsResponse
 */
export type AggregateMetricsResponse = Message<"sdl.v1.AggregateMetricsResponse"> & {
  /**
   * Single value if no windowing, multiple if windowed
   *
   * @generated from field: repeated sdl.v1.AggregateResult results = 1;
   */
  results: AggregateResult[];
};

/**
 * Describes the message sdl.v1.AggregateMetricsResponse.
 * Use `create(AggregateMetricsResponseSchema)` to create a new message.
 */
export const AggregateMetricsResponseSchema: GenMessage<AggregateMetricsResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 38);

/**
 * @generated from message sdl.v1.AggregateResult
 */
export type AggregateResult = Message<"sdl.v1.AggregateResult"> & {
  /**
   * Start of window (if windowed)
   *
   * @generated from field: double timestamp = 1;
   */
  timestamp: number;

  /**
   * @generated from field: double value = 2;
   */
  value: number;
};

/**
 * Describes the message sdl.v1.AggregateResult.
 * Use `create(AggregateResultSchema)` to create a new message.
 */
export const AggregateResultSchema: GenMessage<AggregateResult> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 39);

/**
 * List all available metrics
 *
 * @generated from message sdl.v1.ListMetricsRequest
 */
export type ListMetricsRequest = Message<"sdl.v1.ListMetricsRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;
};

/**
 * Describes the message sdl.v1.ListMetricsRequest.
 * Use `create(ListMetricsRequestSchema)` to create a new message.
 */
export const ListMetricsRequestSchema: GenMessage<ListMetricsRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 40);

/**
 * @generated from message sdl.v1.ListMetricsResponse
 */
export type ListMetricsResponse = Message<"sdl.v1.ListMetricsResponse"> & {
  /**
   * @generated from field: repeated sdl.v1.Metric metrics = 1;
   */
  metrics: Metric[];
};

/**
 * Describes the message sdl.v1.ListMetricsResponse.
 * Use `create(ListMetricsResponseSchema)` to create a new message.
 */
export const ListMetricsResponseSchema: GenMessage<ListMetricsResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 41);

/**
 * Stream metrics request
 *
 * @generated from message sdl.v1.StreamMetricsRequest
 */
export type StreamMetricsRequest = Message<"sdl.v1.StreamMetricsRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * Optional: specific metric IDs to stream. If empty, stream all metrics.
   *
   * @generated from field: repeated string metric_ids = 2;
   */
  metricIds: string[];
};

/**
 * Describes the message sdl.v1.StreamMetricsRequest.
 * Use `create(StreamMetricsRequestSchema)` to create a new message.
 */
export const StreamMetricsRequestSchema: GenMessage<StreamMetricsRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 42);

/**
 * Stream metrics response - can contain updates for multiple metrics
 *
 * @generated from message sdl.v1.StreamMetricsResponse
 */
export type StreamMetricsResponse = Message<"sdl.v1.StreamMetricsResponse"> & {
  /**
   * Metric updates in this batch
   *
   * @generated from field: repeated sdl.v1.MetricUpdate updates = 1;
   */
  updates: MetricUpdate[];
};

/**
 * Describes the message sdl.v1.StreamMetricsResponse.
 * Use `create(StreamMetricsResponseSchema)` to create a new message.
 */
export const StreamMetricsResponseSchema: GenMessage<StreamMetricsResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 43);

/**
 * Individual metric update
 *
 * @generated from message sdl.v1.MetricUpdate
 */
export type MetricUpdate = Message<"sdl.v1.MetricUpdate"> & {
  /**
   * @generated from field: string metric_id = 1;
   */
  metricId: string;

  /**
   * @generated from field: sdl.v1.MetricPoint point = 2;
   */
  point?: MetricPoint;
};

/**
 * Describes the message sdl.v1.MetricUpdate.
 * Use `create(MetricUpdateSchema)` to create a new message.
 */
export const MetricUpdateSchema: GenMessage<MetricUpdate> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 44);

/**
 * @generated from message sdl.v1.ExecuteTraceRequest
 */
export type ExecuteTraceRequest = Message<"sdl.v1.ExecuteTraceRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * @generated from field: string component = 2;
   */
  component: string;

  /**
   * Optional: arguments for the method call (for future enhancement)
   * repeated string args = 4;
   *
   * @generated from field: string method = 3;
   */
  method: string;
};

/**
 * Describes the message sdl.v1.ExecuteTraceRequest.
 * Use `create(ExecuteTraceRequestSchema)` to create a new message.
 */
export const ExecuteTraceRequestSchema: GenMessage<ExecuteTraceRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 45);

/**
 * @generated from message sdl.v1.ExecuteTraceResponse
 */
export type ExecuteTraceResponse = Message<"sdl.v1.ExecuteTraceResponse"> & {
  /**
   * The complete trace data
   *
   * @generated from field: sdl.v1.TraceData trace_data = 1;
   */
  traceData?: TraceData;
};

/**
 * Describes the message sdl.v1.ExecuteTraceResponse.
 * Use `create(ExecuteTraceResponseSchema)` to create a new message.
 */
export const ExecuteTraceResponseSchema: GenMessage<ExecuteTraceResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 46);

/**
 * @generated from message sdl.v1.TraceAllPathsRequest
 */
export type TraceAllPathsRequest = Message<"sdl.v1.TraceAllPathsRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * @generated from field: string component = 2;
   */
  component: string;

  /**
   * @generated from field: string method = 3;
   */
  method: string;

  /**
   * Optional: maximum depth to traverse (default unlimited)
   *
   * @generated from field: int32 max_depth = 4;
   */
  maxDepth: number;
};

/**
 * Describes the message sdl.v1.TraceAllPathsRequest.
 * Use `create(TraceAllPathsRequestSchema)` to create a new message.
 */
export const TraceAllPathsRequestSchema: GenMessage<TraceAllPathsRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 47);

/**
 * @generated from message sdl.v1.TraceAllPathsResponse
 */
export type TraceAllPathsResponse = Message<"sdl.v1.TraceAllPathsResponse"> & {
  /**
   * All discovered execution paths in tree format
   *
   * @generated from field: sdl.v1.AllPathsTraceData trace_data = 1;
   */
  traceData?: AllPathsTraceData;
};

/**
 * Describes the message sdl.v1.TraceAllPathsResponse.
 * Use `create(TraceAllPathsResponseSchema)` to create a new message.
 */
export const TraceAllPathsResponseSchema: GenMessage<TraceAllPathsResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 48);

/**
 * Enhanced TraceData for all-paths traversal - represents the complete execution tree
 *
 * @generated from message sdl.v1.AllPathsTraceData
 */
export type AllPathsTraceData = Message<"sdl.v1.AllPathsTraceData"> & {
  /**
   * @generated from field: string trace_id = 1;
   */
  traceId: string;

  /**
   * The root TraceNode always starts from the <Component>.<Method> where we are kicking off the trace from
   *
   * @generated from field: sdl.v1.TraceNode root = 2;
   */
  root?: TraceNode;
};

/**
 * Describes the message sdl.v1.AllPathsTraceData.
 * Use `create(AllPathsTraceDataSchema)` to create a new message.
 */
export const AllPathsTraceDataSchema: GenMessage<AllPathsTraceData> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 49);

/**
 * TraceNode represents a single node in the execution tree
 *
 * @generated from message sdl.v1.TraceNode
 */
export type TraceNode = Message<"sdl.v1.TraceNode"> & {
  /**
   * Name of the component and method in the form <Component>.<Method> we are starting the trace from
   *
   * @generated from field: string starting_target = 1;
   */
  startingTarget: string;

  /**
   * All edges in an ordered fashion
   *
   * @generated from field: repeated sdl.v1.Edge edges = 2;
   */
  edges: Edge[];

  /**
   * Multiple groups for flexible labeling of sub-trees (loops, conditionals, etc.)
   *
   * @generated from field: repeated sdl.v1.GroupInfo groups = 3;
   */
  groups: GroupInfo[];
};

/**
 * Describes the message sdl.v1.TraceNode.
 * Use `create(TraceNodeSchema)` to create a new message.
 */
export const TraceNodeSchema: GenMessage<TraceNode> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 50);

/**
 * Edge represents a transition from one node to another in the execution tree
 *
 * @generated from message sdl.v1.Edge
 */
export type Edge = Message<"sdl.v1.Edge"> & {
  /**
   * Unique Edge ID across the entire Trace
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The next node this edge leads to
   *
   * @generated from field: sdl.v1.TraceNode next_node = 2;
   */
  nextNode?: TraceNode;

  /**
   * Label on the edge (if any)
   *
   * @generated from field: string label = 3;
   */
  label: string;

  /**
   * Async edges denote Futures being sent without a return
   *
   * @generated from field: bool is_async = 4;
   */
  isAsync: boolean;

  /**
   * "Reverse" edges show a "wait" on a future
   *
   * @generated from field: bool is_reverse = 5;
   */
  isReverse: boolean;

  /**
   * This is optional but leaving it here just in case.
   *
   * @generated from field: string probability = 6;
   */
  probability: string;

  /**
   * Condition information for branching
   *
   * @generated from field: string condition = 7;
   */
  condition: string;

  /**
   * true if this edge represents a conditional branch
   *
   * @generated from field: bool is_conditional = 8;
   */
  isConditional: boolean;
};

/**
 * Describes the message sdl.v1.Edge.
 * Use `create(EdgeSchema)` to create a new message.
 */
export const EdgeSchema: GenMessage<Edge> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 51);

/**
 * GroupInfo allows flexible grouping of edges with labels
 *
 * @generated from message sdl.v1.GroupInfo
 */
export type GroupInfo = Message<"sdl.v1.GroupInfo"> & {
  /**
   * Starting edge index
   *
   * @generated from field: int32 group_start = 1;
   */
  groupStart: number;

  /**
   * Ending edge index (inclusive)
   *
   * @generated from field: int32 group_end = 2;
   */
  groupEnd: number;

  /**
   * Generic label: "loop: 3x", "if cached", "switch: status"
   *
   * @generated from field: string group_label = 3;
   */
  groupLabel: string;

  /**
   * Optional hint: "loop", "conditional", "switch" (for tooling)
   *
   * @generated from field: string group_type = 4;
   */
  groupType: string;
};

/**
 * Describes the message sdl.v1.GroupInfo.
 * Use `create(GroupInfoSchema)` to create a new message.
 */
export const GroupInfoSchema: GenMessage<GroupInfo> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 52);

/**
 * TraceData matches the runtime.TraceData structure
 *
 * @generated from message sdl.v1.TraceData
 */
export type TraceData = Message<"sdl.v1.TraceData"> & {
  /**
   * @generated from field: string system = 1;
   */
  system: string;

  /**
   * @generated from field: string entry_point = 2;
   */
  entryPoint: string;

  /**
   * @generated from field: repeated sdl.v1.TraceEvent events = 3;
   */
  events: TraceEvent[];
};

/**
 * Describes the message sdl.v1.TraceData.
 * Use `create(TraceDataSchema)` to create a new message.
 */
export const TraceDataSchema: GenMessage<TraceData> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 53);

/**
 * TraceEvent matches the runtime.TraceEvent structure
 *
 * @generated from message sdl.v1.TraceEvent
 */
export type TraceEvent = Message<"sdl.v1.TraceEvent"> & {
  /**
   * "enter", "exit", "go", "wait"
   *
   * @generated from field: string kind = 1;
   */
  kind: string;

  /**
   * @generated from field: int64 id = 2;
   */
  id: bigint;

  /**
   * @generated from field: int64 parent_id = 3;
   */
  parentId: bigint;

  /**
   * Virtual time in seconds
   *
   * @generated from field: double timestamp = 4;
   */
  timestamp: number;

  /**
   * Duration in seconds (for exit events)
   *
   * @generated from field: double duration = 5;
   */
  duration: number;

  /**
   * @generated from field: string component = 6;
   */
  component: string;

  /**
   * @generated from field: string method = 7;
   */
  method: string;

  /**
   * @generated from field: repeated string args = 8;
   */
  args: string[];

  /**
   * @generated from field: string return_value = 9;
   */
  returnValue: string;

  /**
   * @generated from field: string error_message = 10;
   */
  errorMessage: string;
};

/**
 * Describes the message sdl.v1.TraceEvent.
 * Use `create(TraceEventSchema)` to create a new message.
 */
export const TraceEventSchema: GenMessage<TraceEvent> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 54);

/**
 * Request to set a parameter value
 *
 * @generated from message sdl.v1.SetParameterRequest
 */
export type SetParameterRequest = Message<"sdl.v1.SetParameterRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * dot-separated path like "server.cache.HitRate"
   *
   * @generated from field: string path = 2;
   */
  path: string;

  /**
   * SDL expression string (e.g., "42", "true", "'hello'", "[1,2,3]", etc.)
   *
   * @generated from field: string new_value = 3;
   */
  newValue: string;
};

/**
 * Describes the message sdl.v1.SetParameterRequest.
 * Use `create(SetParameterRequestSchema)` to create a new message.
 */
export const SetParameterRequestSchema: GenMessage<SetParameterRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 55);

/**
 * Response from setting a parameter
 *
 * @generated from message sdl.v1.SetParameterResponse
 */
export type SetParameterResponse = Message<"sdl.v1.SetParameterResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * Set if success is false
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;

  /**
   * SDL expression string (e.g., "42", "true", "'hello'", "[1,2,3]", etc.)
   *
   * @generated from field: string new_value = 3;
   */
  newValue: string;

  /**
   * @generated from field: string old_value = 4;
   */
  oldValue: string;
};

/**
 * Describes the message sdl.v1.SetParameterResponse.
 * Use `create(SetParameterResponseSchema)` to create a new message.
 */
export const SetParameterResponseSchema: GenMessage<SetParameterResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 56);

/**
 * Request to get parameter values
 *
 * @generated from message sdl.v1.GetParametersRequest
 */
export type GetParametersRequest = Message<"sdl.v1.GetParametersRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * Optional: if empty, return all parameters
   *
   * @generated from field: string path = 2;
   */
  path: string;
};

/**
 * Describes the message sdl.v1.GetParametersRequest.
 * Use `create(GetParametersRequestSchema)` to create a new message.
 */
export const GetParametersRequestSchema: GenMessage<GetParametersRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 57);

/**
 * Response containing parameter values
 *
 * @generated from message sdl.v1.GetParametersResponse
 */
export type GetParametersResponse = Message<"sdl.v1.GetParametersResponse"> & {
  /**
   * Values as SDL expression strings
   *
   * @generated from field: map<string, string> parameters = 1;
   */
  parameters: { [key: string]: string };
};

/**
 * Describes the message sdl.v1.GetParametersResponse.
 * Use `create(GetParametersResponseSchema)` to create a new message.
 */
export const GetParametersResponseSchema: GenMessage<GetParametersResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 58);

/**
 * Request to batch set multiple parameters
 *
 * @generated from message sdl.v1.BatchSetParametersRequest
 */
export type BatchSetParametersRequest = Message<"sdl.v1.BatchSetParametersRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * @generated from field: repeated sdl.v1.ParameterUpdate updates = 2;
   */
  updates: ParameterUpdate[];
};

/**
 * Describes the message sdl.v1.BatchSetParametersRequest.
 * Use `create(BatchSetParametersRequestSchema)` to create a new message.
 */
export const BatchSetParametersRequestSchema: GenMessage<BatchSetParametersRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 59);

/**
 * Single parameter update
 *
 * @generated from message sdl.v1.ParameterUpdate
 */
export type ParameterUpdate = Message<"sdl.v1.ParameterUpdate"> & {
  /**
   * dot-separated path like "server.cache.HitRate"
   *
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * SDL expression string
   *
   * @generated from field: string new_value = 2;
   */
  newValue: string;
};

/**
 * Describes the message sdl.v1.ParameterUpdate.
 * Use `create(ParameterUpdateSchema)` to create a new message.
 */
export const ParameterUpdateSchema: GenMessage<ParameterUpdate> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 60);

/**
 * Response from batch setting parameters
 *
 * @generated from message sdl.v1.BatchSetParametersResponse
 */
export type BatchSetParametersResponse = Message<"sdl.v1.BatchSetParametersResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * Set if success is false
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;

  /**
   * @generated from field: repeated sdl.v1.ParameterUpdateResult results = 3;
   */
  results: ParameterUpdateResult[];
};

/**
 * Describes the message sdl.v1.BatchSetParametersResponse.
 * Use `create(BatchSetParametersResponseSchema)` to create a new message.
 */
export const BatchSetParametersResponseSchema: GenMessage<BatchSetParametersResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 61);

/**
 * Result for individual parameter update
 *
 * @generated from message sdl.v1.ParameterUpdateResult
 */
export type ParameterUpdateResult = Message<"sdl.v1.ParameterUpdateResult"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: bool success = 2;
   */
  success: boolean;

  /**
   * Set if this specific update failed
   *
   * @generated from field: string error_message = 3;
   */
  errorMessage: string;

  /**
   * Previous value
   *
   * @generated from field: string old_value = 4;
   */
  oldValue: string;

  /**
   * New value that was set
   *
   * @generated from field: string new_value = 5;
   */
  newValue: string;
};

/**
 * Describes the message sdl.v1.ParameterUpdateResult.
 * Use `create(ParameterUpdateResultSchema)` to create a new message.
 */
export const ParameterUpdateResultSchema: GenMessage<ParameterUpdateResult> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 62);

/**
 * Request to evaluate flows
 *
 * @generated from message sdl.v1.EvaluateFlowsRequest
 */
export type EvaluateFlowsRequest = Message<"sdl.v1.EvaluateFlowsRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * e.g., "runtime", "simulated", etc.
   *
   * @generated from field: string strategy = 2;
   */
  strategy: string;
};

/**
 * Describes the message sdl.v1.EvaluateFlowsRequest.
 * Use `create(EvaluateFlowsRequestSchema)` to create a new message.
 */
export const EvaluateFlowsRequestSchema: GenMessage<EvaluateFlowsRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 63);

/**
 * Request to get current flow state
 *
 * @generated from message sdl.v1.GetFlowStateRequest
 */
export type GetFlowStateRequest = Message<"sdl.v1.GetFlowStateRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;
};

/**
 * Describes the message sdl.v1.GetFlowStateRequest.
 * Use `create(GetFlowStateRequestSchema)` to create a new message.
 */
export const GetFlowStateRequestSchema: GenMessage<GetFlowStateRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 64);

/**
 * Response with current flow state
 *
 * @generated from message sdl.v1.GetFlowStateResponse
 */
export type GetFlowStateResponse = Message<"sdl.v1.GetFlowStateResponse"> & {
  /**
   * @generated from field: sdl.v1.FlowState state = 1;
   */
  state?: FlowState;
};

/**
 * Describes the message sdl.v1.GetFlowStateResponse.
 * Use `create(GetFlowStateResponseSchema)` to create a new message.
 */
export const GetFlowStateResponseSchema: GenMessage<GetFlowStateResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 65);

/**
 * Current flow state
 *
 * @generated from message sdl.v1.FlowState
 */
export type FlowState = Message<"sdl.v1.FlowState"> & {
  /**
   * Current strategy being used
   *
   * @generated from field: string strategy = 1;
   */
  strategy: string;

  /**
   * Current component.method rates
   *
   * @generated from field: map<string, double> rates = 2;
   */
  rates: { [key: string]: number };

  /**
   * Manual rate overrides
   *
   * @generated from field: map<string, double> manual_overrides = 3;
   */
  manualOverrides: { [key: string]: number };
};

/**
 * Describes the message sdl.v1.FlowState.
 * Use `create(FlowStateSchema)` to create a new message.
 */
export const FlowStateSchema: GenMessage<FlowState> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 66);

/**
 * Response from flow evaluation
 *
 * @generated from message sdl.v1.EvaluateFlowsResponse
 */
export type EvaluateFlowsResponse = Message<"sdl.v1.EvaluateFlowsResponse"> & {
  /**
   * @generated from field: string strategy = 1;
   */
  strategy: string;

  /**
   * "converged", "partial", "failed"
   *
   * @generated from field: string status = 2;
   */
  status: string;

  /**
   * @generated from field: int32 iterations = 3;
   */
  iterations: number;

  /**
   * @generated from field: repeated string warnings = 4;
   */
  warnings: string[];

  /**
   * Component arrival rates calculated by flow analysis
   *
   * e.g., "database.pool.ArrivalRate" -> 5.0
   *
   * @generated from field: map<string, double> component_rates = 5;
   */
  componentRates: { [key: string]: number };

  /**
   * Detailed flow information (optional, for debugging)
   *
   * @generated from field: repeated sdl.v1.FlowEdge flow_edges = 6;
   */
  flowEdges: FlowEdge[];
};

/**
 * Describes the message sdl.v1.EvaluateFlowsResponse.
 * Use `create(EvaluateFlowsResponseSchema)` to create a new message.
 */
export const EvaluateFlowsResponseSchema: GenMessage<EvaluateFlowsResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 67);

/**
 * Represents a flow edge between components
 *
 * @generated from message sdl.v1.FlowEdge
 */
export type FlowEdge = Message<"sdl.v1.FlowEdge"> & {
  /**
   * @generated from field: string from_component = 1;
   */
  fromComponent: string;

  /**
   * @generated from field: string from_method = 2;
   */
  fromMethod: string;

  /**
   * @generated from field: string to_component = 3;
   */
  toComponent: string;

  /**
   * @generated from field: string to_method = 4;
   */
  toMethod: string;

  /**
   * @generated from field: double rate = 5;
   */
  rate: number;

  /**
   * Optional condition expression
   *
   * @generated from field: string condition = 6;
   */
  condition: string;
};

/**
 * Describes the message sdl.v1.FlowEdge.
 * Use `create(FlowEdgeSchema)` to create a new message.
 */
export const FlowEdgeSchema: GenMessage<FlowEdge> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 68);

/**
 * Request to get the system diagram
 *
 * @generated from message sdl.v1.GetSystemDiagramRequest
 */
export type GetSystemDiagramRequest = Message<"sdl.v1.GetSystemDiagramRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;
};

/**
 * Describes the message sdl.v1.GetSystemDiagramRequest.
 * Use `create(GetSystemDiagramRequestSchema)` to create a new message.
 */
export const GetSystemDiagramRequestSchema: GenMessage<GetSystemDiagramRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 69);

/**
 * Response containing the system diagram
 *
 * @generated from message sdl.v1.GetSystemDiagramResponse
 */
export type GetSystemDiagramResponse = Message<"sdl.v1.GetSystemDiagramResponse"> & {
  /**
   * @generated from field: sdl.v1.SystemDiagram diagram = 1;
   */
  diagram?: SystemDiagram;
};

/**
 * Describes the message sdl.v1.GetSystemDiagramResponse.
 * Use `create(GetSystemDiagramResponseSchema)` to create a new message.
 */
export const GetSystemDiagramResponseSchema: GenMessage<GetSystemDiagramResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 70);

/**
 * SystemDiagram represents the topology of a system
 *
 * @generated from message sdl.v1.SystemDiagram
 */
export type SystemDiagram = Message<"sdl.v1.SystemDiagram"> & {
  /**
   * @generated from field: string system_name = 1;
   */
  systemName: string;

  /**
   * @generated from field: repeated sdl.v1.DiagramNode nodes = 2;
   */
  nodes: DiagramNode[];

  /**
   * @generated from field: repeated sdl.v1.DiagramEdge edges = 3;
   */
  edges: DiagramEdge[];
};

/**
 * Describes the message sdl.v1.SystemDiagram.
 * Use `create(SystemDiagramSchema)` to create a new message.
 */
export const SystemDiagramSchema: GenMessage<SystemDiagram> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 71);

/**
 * DiagramNode represents a component or instance in the system
 *
 * @generated from message sdl.v1.DiagramNode
 */
export type DiagramNode = Message<"sdl.v1.DiagramNode"> & {
  /**
   * Unique identifier for the node
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Display name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Component type for display
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * Methods provided by this component
   *
   * @generated from field: repeated sdl.v1.MethodInfo methods = 4;
   */
  methods: MethodInfo[];

  /**
   * Current traffic flow (e.g., "0 rps")
   *
   * @generated from field: string traffic = 5;
   */
  traffic: string;

  /**
   * Full path from system root (e.g., "webserver.db.pool")
   *
   * @generated from field: string full_path = 6;
   */
  fullPath: string;

  /**
   * Icon identifier (e.g., "database", "cache", "service")
   *
   * @generated from field: string icon = 7;
   */
  icon: string;
};

/**
 * Describes the message sdl.v1.DiagramNode.
 * Use `create(DiagramNodeSchema)` to create a new message.
 */
export const DiagramNodeSchema: GenMessage<DiagramNode> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 72);

/**
 * MethodInfo represents information about a component method
 *
 * @generated from message sdl.v1.MethodInfo
 */
export type MethodInfo = Message<"sdl.v1.MethodInfo"> & {
  /**
   * Method name
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Return type (e.g., "Bool", "Int", etc.)
   *
   * @generated from field: string return_type = 2;
   */
  returnType: string;

  /**
   * Current traffic rate in RPS
   *
   * @generated from field: double traffic = 3;
   */
  traffic: number;
};

/**
 * Describes the message sdl.v1.MethodInfo.
 * Use `create(MethodInfoSchema)` to create a new message.
 */
export const MethodInfoSchema: GenMessage<MethodInfo> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 73);

/**
 * DiagramEdge represents a connection between nodes
 *
 * @generated from message sdl.v1.DiagramEdge
 */
export type DiagramEdge = Message<"sdl.v1.DiagramEdge"> & {
  /**
   * @generated from field: string from_id = 1;
   */
  fromId: string;

  /**
   * @generated from field: string to_id = 2;
   */
  toId: string;

  /**
   * Source method name (for flow edges)
   *
   * @generated from field: string from_method = 3;
   */
  fromMethod: string;

  /**
   * Target method name (for flow edges)
   *
   * @generated from field: string to_method = 4;
   */
  toMethod: string;

  /**
   * @generated from field: string label = 5;
   */
  label: string;

  /**
   * Execution order (supports decimals for conditional paths)
   *
   * @generated from field: double order = 6;
   */
  order: number;

  /**
   * Condition expression if this is a conditional path
   *
   * @generated from field: string condition = 7;
   */
  condition: string;

  /**
   * Probability of this path being taken
   *
   * @generated from field: double probability = 8;
   */
  probability: number;

  /**
   * ID of the generator that originated this flow
   *
   * @generated from field: string generator_id = 9;
   */
  generatorId: string;

  /**
   * Color for visualization (based on generator)
   *
   * @generated from field: string color = 10;
   */
  color: string;
};

/**
 * Describes the message sdl.v1.DiagramEdge.
 * Use `create(DiagramEdgeSchema)` to create a new message.
 */
export const DiagramEdgeSchema: GenMessage<DiagramEdge> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 74);

/**
 * Request to reset a canvas
 *
 * @generated from message sdl.v1.ResetCanvasRequest
 */
export type ResetCanvasRequest = Message<"sdl.v1.ResetCanvasRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;
};

/**
 * Describes the message sdl.v1.ResetCanvasRequest.
 * Use `create(ResetCanvasRequestSchema)` to create a new message.
 */
export const ResetCanvasRequestSchema: GenMessage<ResetCanvasRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 75);

/**
 * Response from resetting a canvas
 *
 * @generated from message sdl.v1.ResetCanvasResponse
 */
export type ResetCanvasResponse = Message<"sdl.v1.ResetCanvasResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * Optional message about what was reset
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message sdl.v1.ResetCanvasResponse.
 * Use `create(ResetCanvasResponseSchema)` to create a new message.
 */
export const ResetCanvasResponseSchema: GenMessage<ResetCanvasResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 76);

/**
 * Request to get utilization information
 *
 * @generated from message sdl.v1.GetUtilizationRequest
 */
export type GetUtilizationRequest = Message<"sdl.v1.GetUtilizationRequest"> & {
  /**
   * @generated from field: string canvas_id = 1;
   */
  canvasId: string;

  /**
   * Optional: filter by specific components
   *
   * @generated from field: repeated string components = 2;
   */
  components: string[];
};

/**
 * Describes the message sdl.v1.GetUtilizationRequest.
 * Use `create(GetUtilizationRequestSchema)` to create a new message.
 */
export const GetUtilizationRequestSchema: GenMessage<GetUtilizationRequest> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 77);

/**
 * Response with utilization information
 *
 * @generated from message sdl.v1.GetUtilizationResponse
 */
export type GetUtilizationResponse = Message<"sdl.v1.GetUtilizationResponse"> & {
  /**
   * @generated from field: repeated sdl.v1.UtilizationInfo utilizations = 1;
   */
  utilizations: UtilizationInfo[];
};

/**
 * Describes the message sdl.v1.GetUtilizationResponse.
 * Use `create(GetUtilizationResponseSchema)` to create a new message.
 */
export const GetUtilizationResponseSchema: GenMessage<GetUtilizationResponse> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 78);

/**
 * Resource utilization information
 *
 * @generated from message sdl.v1.UtilizationInfo
 */
export type UtilizationInfo = Message<"sdl.v1.UtilizationInfo"> & {
  /**
   * e.g., "pool", "disk", "queue"
   *
   * @generated from field: string resource_name = 1;
   */
  resourceName: string;

  /**
   * e.g., "database.pool", "database.driverTable.disk"
   *
   * @generated from field: string component_path = 2;
   */
  componentPath: string;

  /**
   * 0.0 to 1.0
   *
   * @generated from field: double utilization = 3;
   */
  utilization: number;

  /**
   * Maximum capacity
   *
   * @generated from field: double capacity = 4;
   */
  capacity: number;

  /**
   * Current arrival rate
   *
   * @generated from field: double current_load = 5;
   */
  currentLoad: number;

  /**
   * Whether this is the bottleneck resource
   *
   * @generated from field: bool is_bottleneck = 6;
   */
  isBottleneck: boolean;

  /**
   * Utilization level for warning (e.g., 0.8)
   *
   * @generated from field: double warning_threshold = 7;
   */
  warningThreshold: number;

  /**
   * Utilization level for critical (e.g., 0.95)
   *
   * @generated from field: double critical_threshold = 8;
   */
  criticalThreshold: number;
};

/**
 * Describes the message sdl.v1.UtilizationInfo.
 * Use `create(UtilizationInfoSchema)` to create a new message.
 */
export const UtilizationInfoSchema: GenMessage<UtilizationInfo> = /*@__PURE__*/
  messageDesc(file_sdl_v1_canvas, 79);

/**
 * *
 * Service for interacting with a canvas.
 *
 * @generated from service sdl.v1.CanvasService
 */
export const CanvasService: GenService<{
  /**
   * *
   * Create a new canvas sesssion.
   *
   * @generated from rpc sdl.v1.CanvasService.CreateCanvas
   */
  createCanvas: {
    methodKind: "unary";
    input: typeof CreateCanvasRequestSchema;
    output: typeof CreateCanvasResponseSchema;
  },
  /**
   * *
   * List all canvases from a user.
   *
   * @generated from rpc sdl.v1.CanvasService.ListCanvases
   */
  listCanvases: {
    methodKind: "unary";
    input: typeof ListCanvasesRequestSchema;
    output: typeof ListCanvasesResponseSchema;
  },
  /**
   * *
   * Get details/stats for a particular canvas
   *
   * @generated from rpc sdl.v1.CanvasService.GetCanvas
   */
  getCanvas: {
    methodKind: "unary";
    input: typeof GetCanvasRequestSchema;
    output: typeof GetCanvasResponseSchema;
  },
  /**
   * @generated from rpc sdl.v1.CanvasService.LoadFile
   */
  loadFile: {
    methodKind: "unary";
    input: typeof LoadFileRequestSchema;
    output: typeof LoadFileResponseSchema;
  },
  /**
   * @generated from rpc sdl.v1.CanvasService.UseSystem
   */
  useSystem: {
    methodKind: "unary";
    input: typeof UseSystemRequestSchema;
    output: typeof UseSystemResponseSchema;
  },
  /**
   * *
   * Delete a particular canvas.  Frees up resources used by it and all the connections
   *
   * @generated from rpc sdl.v1.CanvasService.DeleteCanvas
   */
  deleteCanvas: {
    methodKind: "unary";
    input: typeof DeleteCanvasRequestSchema;
    output: typeof DeleteCanvasResponseSchema;
  },
  /**
   * *
   * Reset a canvas - clears all state, generators, and metrics
   *
   * @generated from rpc sdl.v1.CanvasService.ResetCanvas
   */
  resetCanvas: {
    methodKind: "unary";
    input: typeof ResetCanvasRequestSchema;
    output: typeof ResetCanvasResponseSchema;
  },
  /**
   *  ----- Generator Operations -----
   * Adds a generator to a canvas's generator_ids list and creates the generator resource.
   *
   * @generated from rpc sdl.v1.CanvasService.AddGenerator
   */
  addGenerator: {
    methodKind: "unary";
    input: typeof AddGeneratorRequestSchema;
    output: typeof AddGeneratorResponseSchema;
  },
  /**
   * Request to start all generators
   *
   * @generated from rpc sdl.v1.CanvasService.StartAllGenerators
   */
  startAllGenerators: {
    methodKind: "unary";
    input: typeof StartAllGeneratorsRequestSchema;
    output: typeof StartAllGeneratorsResponseSchema;
  },
  /**
   * Request to start all generators
   *
   * @generated from rpc sdl.v1.CanvasService.StopAllGenerators
   */
  stopAllGenerators: {
    methodKind: "unary";
    input: typeof StopAllGeneratorsRequestSchema;
    output: typeof StopAllGeneratorsResponseSchema;
  },
  /**
   * @generated from rpc sdl.v1.CanvasService.ListGenerators
   */
  listGenerators: {
    methodKind: "unary";
    input: typeof ListGeneratorsRequestSchema;
    output: typeof ListGeneratorsResponseSchema;
  },
  /**
   * @generated from rpc sdl.v1.CanvasService.GetGenerator
   */
  getGenerator: {
    methodKind: "unary";
    input: typeof GetGeneratorRequestSchema;
    output: typeof GetGeneratorResponseSchema;
  },
  /**
   * Use PATCH for partial updates to a generator (title, content)
   *
   * @generated from rpc sdl.v1.CanvasService.UpdateGenerator
   */
  updateGenerator: {
    methodKind: "unary";
    input: typeof UpdateGeneratorRequestSchema;
    output: typeof UpdateGeneratorResponseSchema;
  },
  /**
   * @generated from rpc sdl.v1.CanvasService.StopGenerator
   */
  stopGenerator: {
    methodKind: "unary";
    input: typeof StopGeneratorRequestSchema;
    output: typeof StopGeneratorResponseSchema;
  },
  /**
   * @generated from rpc sdl.v1.CanvasService.StartGenerator
   */
  startGenerator: {
    methodKind: "unary";
    input: typeof StartGeneratorRequestSchema;
    output: typeof StartGeneratorResponseSchema;
  },
  /**
   * @generated from rpc sdl.v1.CanvasService.DeleteGenerator
   */
  deleteGenerator: {
    methodKind: "unary";
    input: typeof DeleteGeneratorRequestSchema;
    output: typeof DeleteGeneratorResponseSchema;
  },
  /**
   * Execute a single trace for debugging/analysis
   *
   * @generated from rpc sdl.v1.CanvasService.ExecuteTrace
   */
  executeTrace: {
    methodKind: "unary";
    input: typeof ExecuteTraceRequestSchema;
    output: typeof ExecuteTraceResponseSchema;
  },
  /**
   * Execute breadth-first traversal to find all possible execution paths
   *
   * @generated from rpc sdl.v1.CanvasService.TraceAllPaths
   */
  traceAllPaths: {
    methodKind: "unary";
    input: typeof TraceAllPathsRequestSchema;
    output: typeof TraceAllPathsResponseSchema;
  },
  /**
   * ----- Parameter Operations -----
   * Set a component parameter value
   *
   * @generated from rpc sdl.v1.CanvasService.SetParameter
   */
  setParameter: {
    methodKind: "unary";
    input: typeof SetParameterRequestSchema;
    output: typeof SetParameterResponseSchema;
  },
  /**
   * Get parameter values
   *
   * @generated from rpc sdl.v1.CanvasService.GetParameters
   */
  getParameters: {
    methodKind: "unary";
    input: typeof GetParametersRequestSchema;
    output: typeof GetParametersResponseSchema;
  },
  /**
   * Batch set multiple parameters atomically
   *
   * @generated from rpc sdl.v1.CanvasService.BatchSetParameters
   */
  batchSetParameters: {
    methodKind: "unary";
    input: typeof BatchSetParametersRequestSchema;
    output: typeof BatchSetParametersResponseSchema;
  },
  /**
   * ----- Flow Analysis Operations -----
   * Evaluate system flows using specified strategy
   *
   * @generated from rpc sdl.v1.CanvasService.EvaluateFlows
   */
  evaluateFlows: {
    methodKind: "unary";
    input: typeof EvaluateFlowsRequestSchema;
    output: typeof EvaluateFlowsResponseSchema;
  },
  /**
   * Get current flow state
   *
   * @generated from rpc sdl.v1.CanvasService.GetFlowState
   */
  getFlowState: {
    methodKind: "unary";
    input: typeof GetFlowStateRequestSchema;
    output: typeof GetFlowStateResponseSchema;
  },
  /**
   *  ----- Generator Operations -----
   * Adds a metric to live plot
   *
   * @generated from rpc sdl.v1.CanvasService.AddMetric
   */
  addMetric: {
    methodKind: "unary";
    input: typeof AddMetricRequestSchema;
    output: typeof AddMetricResponseSchema;
  },
  /**
   * *
   * Delete a particular metriccanvas.  Frees up resources used by it and all the connections
   *
   * @generated from rpc sdl.v1.CanvasService.DeleteMetric
   */
  deleteMetric: {
    methodKind: "unary";
    input: typeof DeleteMetricRequestSchema;
    output: typeof DeleteMetricResponseSchema;
  },
  /**
   * List all available metrics
   *
   * @generated from rpc sdl.v1.CanvasService.ListMetrics
   */
  listMetrics: {
    methodKind: "unary";
    input: typeof ListMetricsRequestSchema;
    output: typeof ListMetricsResponseSchema;
  },
  /**
   * Query raw metric data points
   *
   * @generated from rpc sdl.v1.CanvasService.QueryMetrics
   */
  queryMetrics: {
    methodKind: "unary";
    input: typeof QueryMetricsRequestSchema;
    output: typeof QueryMetricsResponseSchema;
  },
  /**
   * Stream real-time metric updates
   *
   * Note: Server-streaming RPCs are not supported by grpc-gateway HTTP mapping
   * This will only be available via gRPC or Connect protocol
   *
   * @generated from rpc sdl.v1.CanvasService.StreamMetrics
   */
  streamMetrics: {
    methodKind: "server_streaming";
    input: typeof StreamMetricsRequestSchema;
    output: typeof StreamMetricsResponseSchema;
  },
  /**
   * Get the system diagram for visualization
   *
   * @generated from rpc sdl.v1.CanvasService.GetSystemDiagram
   */
  getSystemDiagram: {
    methodKind: "unary";
    input: typeof GetSystemDiagramRequestSchema;
    output: typeof GetSystemDiagramResponseSchema;
  },
  /**
   * Get resource utilization information
   *
   * @generated from rpc sdl.v1.CanvasService.GetUtilization
   */
  getUtilization: {
    methodKind: "unary";
    input: typeof GetUtilizationRequestSchema;
    output: typeof GetUtilizationResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_sdl_v1_canvas, 0);

