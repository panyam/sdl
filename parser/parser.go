// Code generated by goyacc -o parser.go -p SDL grammar.y. DO NOT EDIT.

//line grammar.y:2
package parser

import __yyfmt__ "fmt"

//line grammar.y:2

import (
	// "reflect"
	"fmt"
	gfn "github.com/panyam/goutils/fn"
	"io"
	"log"
)

// Function to be called by SDLParse on error.
// Needs access to the lexer passed via %parse-param.
func yyerror(yyl SDLLexer, msg string) {
	lexer := yyl.(LexerInterface)
	// line, col := lexer.Position()
	// log.Println("YYERROR MSG = ", msg)
	// errMsg := fmt.Sprintf("Error at Line %d, Col %d, Near ('%s'): %s", line, col, /* TokenString(lexer.LastToken()),*/ lexer.Text(), msg) // Added TokenString helper call
	lexer.Error(msg)
}

func yyerrok(lexer SDLLexer) {
	log.Println("Error here... not sure how to recover")
	///ErrFlag = 0
}

//line grammar.y:31
type SDLSymType struct {
	yys int
	// Basic types from lexer
	sval string // Holds raw string values like identifiers, literal content

	// AST Nodes (using pointers) - these should have NodeInfo
	file          *FileDecl
	componentDecl *ComponentDecl
	systemDecl    *SystemDecl
	node          Node // Generic interface for lists and for accessing NodeInfo
	// tokenNode   TokenNode // Generic interface for lists and for accessing NodeInfo
	expr         Expr
	chainedExpr  *ChainedExpr
	stmt         Stmt
	typeDecl     *TypeDecl
	paramDecl    *ParamDecl
	usesDecl     *UsesDecl
	methodDef    *MethodDecl
	instanceDecl *InstanceDecl
	analyzeDecl  *AnalyzeDecl
	expectBlock  *ExpectationsDecl
	expectStmt   *ExpectStmt
	blockStmt    *BlockStmt
	ifStmt       *IfStmt

	distributeExpr *DistributeExpr
	caseExpr       *CaseExpr

	switchStmt *SwitchStmt
	caseStmt   *CaseStmt

	tupleExpr   *TupleExpr
	goStmt      *GoStmt
	forStmt     *ForStmt
	assignStmt  *AssignmentStmt
	optionsDecl *OptionsDecl
	enumDecl    *EnumDecl
	importDecl  *ImportDecl
	waitStmt    *WaitStmt
	delayStmt   *DelayStmt
	sampleExpr  *SampleExpr

	// Slices for lists
	nodeList               []Node
	caseExprList           []*CaseExpr
	typeDeclList           []*TypeDecl
	caseStmtList           []*CaseStmt
	importDeclList         []*ImportDecl
	compBodyItem           ComponentDeclBodyItem
	compBodyItemList       []ComponentDeclBodyItem
	sysBodyItemList        []SystemDeclBodyItem
	paramList              []*ParamDecl
	assignList             []*AssignmentStmt
	exprList               []Expr
	stmtList               []Stmt
	ident                  *IdentifierExpr
	identList              []*IdentifierExpr
	distributeExprCaseList []*CaseExpr
	expectStmtList         []*ExpectStmt
	methodSigItemList      []*MethodDecl

	// Add field to store position for simple tokens if needed
	// posInfo     NodeInfo
}

const SYSTEM = 57346
const USES = 57347
const METHOD = 57348
const ANALYZE = 57349
const EXPECT = 57350
const LET = 57351
const IF = 57352
const ELSE = 57353
const SAMPLE = 57354
const DISTRIBUTE = 57355
const DEFAULT = 57356
const RETURN = 57357
const DELAY = 57358
const WAIT = 57359
const GO = 57360
const LOG = 57361
const SWITCH = 57362
const CASE = 57363
const FOR = 57364
const USE = 57365
const NATIVE = 57366
const LSQUARE = 57367
const RSQUARE = 57368
const LBRACE = 57369
const RBRACE = 57370
const OPTIONS = 57371
const ENUM = 57372
const COMPONENT = 57373
const PARAM = 57374
const IMPORT = 57375
const FROM = 57376
const AS = 57377
const ASSIGN = 57378
const COLON = 57379
const LPAREN = 57380
const RPAREN = 57381
const COMMA = 57382
const DOT = 57383
const ARROW = 57384
const LET_ASSIGN = 57385
const SEMICOLON = 57386
const INT = 57387
const FLOAT = 57388
const BOOL = 57389
const STRING = 57390
const DURATION = 57391
const INT_LITERAL = 57392
const FLOAT_LITERAL = 57393
const STRING_LITERAL = 57394
const BOOL_LITERAL = 57395
const DURATION_LITERAL = 57396
const IDENTIFIER = 57397
const OR = 57398
const AND = 57399
const EQ = 57400
const NEQ = 57401
const LT = 57402
const LTE = 57403
const GT = 57404
const GTE = 57405
const PLUS = 57406
const MUL = 57407
const DIV = 57408
const MOD = 57409
const DUAL_OP = 57410
const BINARY_NC_OP = 57411
const BINARY_OP = 57412
const UNARY_OP = 57413
const MINUS = 57414
const UMINUS = 57415

var SDLToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SYSTEM",
	"USES",
	"METHOD",
	"ANALYZE",
	"EXPECT",
	"LET",
	"IF",
	"ELSE",
	"SAMPLE",
	"DISTRIBUTE",
	"DEFAULT",
	"RETURN",
	"DELAY",
	"WAIT",
	"GO",
	"LOG",
	"SWITCH",
	"CASE",
	"FOR",
	"USE",
	"NATIVE",
	"LSQUARE",
	"RSQUARE",
	"LBRACE",
	"RBRACE",
	"OPTIONS",
	"ENUM",
	"COMPONENT",
	"PARAM",
	"IMPORT",
	"FROM",
	"AS",
	"ASSIGN",
	"COLON",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"DOT",
	"ARROW",
	"LET_ASSIGN",
	"SEMICOLON",
	"INT",
	"FLOAT",
	"BOOL",
	"STRING",
	"DURATION",
	"INT_LITERAL",
	"FLOAT_LITERAL",
	"STRING_LITERAL",
	"BOOL_LITERAL",
	"DURATION_LITERAL",
	"IDENTIFIER",
	"OR",
	"AND",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"PLUS",
	"MUL",
	"DIV",
	"MOD",
	"DUAL_OP",
	"BINARY_NC_OP",
	"BINARY_OP",
	"UNARY_OP",
	"MINUS",
	"UMINUS",
}

var SDLStatenames = [...]string{}

const SDLEofCode = 1
const SDLErrCode = 2
const SDLInitialStackSize = 16

//line grammar.y:954
// --- Go Code Section ---

// Interface for the lexer required by the parser.
type LexerInterface interface {
	Lex(lval *SDLSymType) int
	Error(s string)
	Pos() int                  // Start byte position of the last token read
	End() int                  // End byte position of the last token read
	Text() string              // Text of the last token read
	Position() (line, col int) // Added: Get line/col of last token start
	LastToken() int            // Added: Get the token code that was just lexed
}

// Parse takes an input stream and attempts to parse it according to the SDL grammar. 22222
// It returns the root of the Abstract Syntax Tree (*FileDecl) if successful, or an error.
func Parse(input io.Reader) (*Lexer, *FileDecl, error) {
	// Reset global result before parsing
	lexer := NewLexer(input)
	// Set yyDebug = 3 for verbose parser debugging output
	// yyDebug = 3
	resultCode := SDLParse(lexer) // Call the LALR parser generated by goyacc

	if resultCode != 0 {
		// A syntax error occurred. The lexer's Error method should have been called
		// and stored the error message.
		if lexer.lastError != nil {
			return lexer, nil, lexer.lastError
		}
		// Fallback error message if lexer didn't store one
		return lexer, nil, fmt.Errorf("syntax error near byte %d (Line %d, Col %d)", lexer.location.Pos, lexer.location.Line, lexer.location.Col)
	}

	// Parsing succeeded
	if lexer.parseResult == nil {
		// This indicates a potential issue with the grammar's top rule action
		return lexer, nil, fmt.Errorf("parsing finished successfully, but no AST result was produced")
	}

	return lexer, lexer.parseResult, nil
}

// The parser expects the lexer variable to be named yyLex.
// We can satisfy this by creating a global or passing it via SDLParseWithLexer.
// Using SDLParseWithLexer is cleaner.

// Example main function (optional, for standalone testing)
/*
func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: parser <input_file>")
		return
	}
	filePath := os.Args[1]
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Printf("Error opening file %s: %v\n", filePath, err)
		return
	}
	defer file.Close()

	astRoot, err := Parse(file)
	if err != nil {
		fmt.Printf("Parsing failed: %v\n", err)
		// Error message should ideally include line/column from lexer
	} else {
		fmt.Println("Parsing successful!")
		// Print the AST (implement String() methods for AST nodes for nice output)
		fmt.Println(astRoot.String())
	}
}
*/

//line yacctab:1
var SDLExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const SDLPrivate = 57344

const SDLLast = 288

var SDLAct = [...]uint8{
	121, 105, 98, 49, 131, 187, 195, 185, 164, 177,
	59, 30, 54, 93, 153, 154, 139, 132, 140, 112,
	111, 188, 133, 165, 166, 157, 155, 45, 152, 136,
	73, 134, 72, 62, 74, 83, 133, 81, 80, 34,
	18, 27, 23, 21, 20, 113, 32, 229, 112, 111,
	50, 115, 8, 221, 218, 204, 82, 106, 107, 108,
	109, 110, 100, 77, 91, 114, 116, 126, 118, 119,
	125, 127, 124, 137, 113, 123, 13, 128, 95, 96,
	234, 233, 122, 128, 208, 120, 106, 107, 108, 109,
	110, 100, 90, 72, 62, 138, 11, 117, 88, 190,
	87, 14, 15, 12, 130, 10, 205, 95, 96, 141,
	142, 24, 144, 145, 147, 150, 3, 25, 171, 128,
	206, 227, 219, 207, 72, 62, 189, 148, 181, 146,
	180, 172, 192, 159, 161, 135, 212, 209, 167, 158,
	38, 156, 26, 19, 228, 220, 129, 78, 170, 149,
	178, 179, 70, 168, 169, 35, 61, 65, 31, 182,
	29, 28, 64, 67, 66, 184, 69, 68, 22, 63,
	191, 196, 197, 65, 70, 151, 160, 178, 79, 17,
	216, 202, 174, 46, 61, 199, 203, 198, 200, 42,
	70, 60, 6, 201, 210, 196, 175, 176, 89, 211,
	213, 217, 71, 84, 14, 33, 72, 62, 222, 57,
	225, 223, 214, 226, 224, 215, 101, 193, 194, 230,
	143, 61, 65, 72, 62, 231, 75, 64, 67, 66,
	232, 69, 68, 76, 63, 61, 65, 186, 52, 70,
	48, 64, 67, 66, 86, 69, 68, 41, 63, 44,
	46, 40, 183, 70, 162, 163, 60, 39, 92, 104,
	97, 99, 94, 103, 102, 56, 55, 71, 11, 58,
	60, 53, 51, 173, 16, 12, 43, 5, 9, 47,
	36, 71, 37, 7, 4, 85, 2, 1,
}

var SDLPact = [...]int16{
	-1000, -1000, 72, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-15, 112, -11, -12, 141, -13, 77, -1000, 107, -14,
	134, 133, -1000, 131, -6, -15, -16, 128, 244, -1000,
	212, -21, -1000, -1000, -1000, 177, 119, 244, -1000, -1000,
	-1000, -1000, -1000, -17, -18, 125, -20, 175, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -21, -1000, 36, 7, 36, -21, 36, 36, 36,
	-1000, 34, 29, 43, -1000, 118, 177, -1000, -1000, -1000,
	-19, -24, -1000, 97, -1000, -1000, -1000, -1000, -1000, -26,
	37, 226, -54, -1000, -1000, 36, 36, -1000, -1000, -1000,
	34, -1000, -1000, -1000, -1000, 29, -1000, -1000, -1000, -1000,
	-1000, 36, 36, 36, -1000, -1000, 125, 79, -1000, 122,
	75, -1000, 147, -27, 36, -29, 36, -1000, -30, -1000,
	-1000, 103, 36, 151, 96, -32, -31, 36, -1000, 36,
	36, -1000, -1000, 121, -1000, -1000, 78, 92, 171, 36,
	36, -1000, -1000, 91, 75, -1000, 89, -1000, 36, -1000,
	-33, -34, 87, 59, -1000, -33, 94, -1000, -1000, -1000,
	36, 36, -1000, -1000, 163, 167, 36, -1000, 13, -1000,
	-1000, -1000, -1000, 80, -1000, 84, 44, -1000, 101, -33,
	-32, 100, -34, 166, 36, -1000, 12, 83, -1000, -1000,
	117, -1000, 11, -1000, 226, -1000, -33, -1000, -34, 36,
	-1000, -1000, 36, 82, 116, -1000, 5, -1000, 36, -1000,
	-1000, 226, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36,
	41, -1000, 40, -1000, -1000,
}

var SDLPgo = [...]int16{
	0, 287, 286, 285, 284, 189, 283, 140, 282, 280,
	279, 52, 278, 30, 179, 277, 274, 3, 273, 50,
	272, 271, 269, 266, 265, 264, 10, 11, 263, 0,
	13, 262, 261, 2, 1, 260, 259, 258, 257, 8,
	255, 254, 4, 252, 251, 247, 27, 244, 238, 5,
	237, 7, 233, 226, 12, 14, 15, 220, 6, 218,
	217, 216, 215, 212, 209, 9, 197, 196, 193, 188,
	188,
}

var SDLR1 = [...]int8{
	0, 1, 2, 2, 2, 2, 4, 4, 4, 4,
	11, 5, 5, 12, 13, 13, 15, 16, 16, 14,
	14, 53, 53, 52, 52, 46, 46, 9, 9, 8,
	8, 7, 7, 7, 7, 38, 38, 38, 42, 42,
	43, 43, 44, 44, 45, 41, 41, 40, 40, 39,
	39, 6, 10, 10, 3, 3, 3, 47, 47, 51,
	51, 50, 50, 49, 27, 27, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 26, 48, 19,
	20, 21, 21, 24, 23, 22, 55, 55, 56, 56,
	54, 18, 18, 18, 25, 57, 57, 28, 70, 70,
	70, 29, 37, 37, 37, 30, 30, 30, 31, 31,
	35, 35, 35, 35, 35, 35, 35, 36, 32, 32,
	32, 32, 32, 34, 34, 33, 33, 61, 60, 60,
	59, 59, 58, 58, 63, 63, 62, 62, 64, 67,
	67, 66, 66, 65, 69, 69, 68,
}

var SDLR2 = [...]int8{
	0, 1, 0, 2, 2, 2, 1, 1, 1, 1,
	4, 6, 5, 5, 1, 3, 4, 1, 3, 1,
	3, 0, 1, 1, 2, 5, 6, 0, 1, 1,
	2, 1, 1, 1, 1, 3, 4, 5, 1, 4,
	1, 3, 3, 6, 2, 0, 1, 1, 3, 2,
	4, 5, 0, 2, 1, 1, 1, 3, 6, 0,
	1, 1, 3, 3, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 4,
	1, 2, 2, 2, 2, 2, 0, 1, 1, 3,
	4, 0, 2, 2, 2, 0, 1, 5, 4, 2,
	4, 1, 1, 3, 3, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 4, 4, 6, 0, 1,
	1, 2, 3, 4, 0, 1, 3, 4, 6, 0,
	1, 1, 2, 3, 0, 1, 3,
}

var SDLChk = [...]int16{
	-1000, -1, -2, 44, -4, -15, -5, -6, -11, -12,
	33, 24, 31, 4, 29, 30, -16, -14, 55, 31,
	55, 55, 27, 55, 34, 40, 35, 55, 27, 27,
	-27, 27, 52, -14, 55, 27, -9, -8, -7, -38,
	-44, -45, -5, 32, 5, -46, 6, -10, 28, -17,
	-19, -20, -48, -21, -54, -23, -24, -64, -22, -26,
	44, 9, -33, 22, 15, 10, 17, 16, 20, 19,
	27, 55, -34, -13, 55, -53, -52, -46, 28, -7,
	55, 55, -26, 55, 28, -3, -47, -11, -19, 23,
	-13, -29, -37, -30, -31, 71, 72, -35, -33, -32,
	55, -61, -25, -28, -36, -34, 50, 51, 52, 53,
	54, 13, 12, 38, -29, 44, -29, -13, -29, -29,
	-56, -29, -27, 41, 38, 41, 38, 28, 40, 28,
	-46, -42, 36, 55, 55, 38, 55, 36, -17, 70,
	72, -30, -30, -57, -29, -29, -56, -29, -26, 27,
	40, 28, 55, -55, -56, 55, -55, 55, 36, -29,
	25, 38, -41, -40, -39, 55, 55, -29, -30, -30,
	27, 40, 39, -18, 11, -67, -66, -65, -29, -29,
	39, 39, -29, -43, -42, -51, -50, -49, 55, 39,
	40, -42, 38, -60, -59, -58, -29, -29, -54, -26,
	-69, -68, 14, -65, 42, 26, 40, 39, 40, 36,
	-42, -39, 36, -51, -63, -62, 14, -58, 42, 39,
	28, 42, -17, -42, -49, -29, -29, 39, 28, 42,
	-29, -17, -29, 40, 40,
}

var SDLDef = [...]int16{
	2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	0, 0, 0, 0, 0, 0, 0, 17, 19, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 27, 52,
	0, 0, 16, 18, 20, 21, 0, 28, 29, 31,
	32, 33, 34, 0, 0, 0, 0, 0, 10, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 14, 0, 22, 23, 12, 30,
	0, 0, 44, 0, 51, 53, 54, 55, 56, 0,
	0, 0, 101, 102, 105, 0, 0, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 118, 119, 120, 121,
	122, 95, 0, 0, 81, 82, 0, 84, 83, 0,
	85, 88, 0, 0, 86, 0, 86, 13, 0, 11,
	24, 35, 0, 38, 42, 45, 0, 0, 78, 0,
	0, 106, 107, 0, 96, 94, 0, 88, 91, 139,
	0, 77, 123, 0, 87, 124, 0, 15, 0, 36,
	0, 59, 0, 46, 47, 0, 57, 79, 103, 104,
	128, 0, 117, 90, 0, 144, 140, 141, 0, 89,
	125, 126, 37, 0, 40, 0, 60, 61, 0, 25,
	0, 49, 59, 134, 129, 130, 0, 89, 92, 93,
	0, 145, 0, 142, 0, 39, 0, 43, 0, 0,
	26, 48, 0, 0, 0, 135, 0, 131, 0, 97,
	138, 0, 143, 41, 62, 63, 50, 58, 127, 0,
	132, 146, 136, 133, 137,
}

var SDLTok1 = [...]int8{
	1,
}

var SDLTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73,
}

var SDLTok3 = [...]int8{
	0,
}

var SDLErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	SDLDebug        = 0
	SDLErrorVerbose = false
)

type SDLLexer interface {
	Lex(lval *SDLSymType) int
	Error(s string)
}

type SDLParser interface {
	Parse(SDLLexer) int
	Lookahead() int
}

type SDLParserImpl struct {
	lval  SDLSymType
	stack [SDLInitialStackSize]SDLSymType
	char  int
}

func (p *SDLParserImpl) Lookahead() int {
	return p.char
}

func SDLNewParser() SDLParser {
	return &SDLParserImpl{}
}

const SDLFlag = -1000

func SDLTokname(c int) string {
	if c >= 1 && c-1 < len(SDLToknames) {
		if SDLToknames[c-1] != "" {
			return SDLToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func SDLStatname(s int) string {
	if s >= 0 && s < len(SDLStatenames) {
		if SDLStatenames[s] != "" {
			return SDLStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func SDLErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !SDLErrorVerbose {
		return "syntax error"
	}

	for _, e := range SDLErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + SDLTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(SDLPact[state])
	for tok := TOKSTART; tok-1 < len(SDLToknames); tok++ {
		if n := base + tok; n >= 0 && n < SDLLast && int(SDLChk[int(SDLAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if SDLDef[state] == -2 {
		i := 0
		for SDLExca[i] != -1 || int(SDLExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; SDLExca[i] >= 0; i += 2 {
			tok := int(SDLExca[i])
			if tok < TOKSTART || SDLExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if SDLExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += SDLTokname(tok)
	}
	return res
}

func SDLlex1(lex SDLLexer, lval *SDLSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(SDLTok1[0])
		goto out
	}
	if char < len(SDLTok1) {
		token = int(SDLTok1[char])
		goto out
	}
	if char >= SDLPrivate {
		if char < SDLPrivate+len(SDLTok2) {
			token = int(SDLTok2[char-SDLPrivate])
			goto out
		}
	}
	for i := 0; i < len(SDLTok3); i += 2 {
		token = int(SDLTok3[i+0])
		if token == char {
			token = int(SDLTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(SDLTok2[1]) /* unknown char */
	}
	if SDLDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", SDLTokname(token), uint(char))
	}
	return char, token
}

func SDLParse(SDLlex SDLLexer) int {
	return SDLNewParser().Parse(SDLlex)
}

func (SDLrcvr *SDLParserImpl) Parse(SDLlex SDLLexer) int {
	var SDLn int
	var SDLVAL SDLSymType
	var SDLDollar []SDLSymType
	_ = SDLDollar // silence set and not used
	SDLS := SDLrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	SDLstate := 0
	SDLrcvr.char = -1
	SDLtoken := -1 // SDLrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		SDLstate = -1
		SDLrcvr.char = -1
		SDLtoken = -1
	}()
	SDLp := -1
	goto SDLstack

ret0:
	return 0

ret1:
	return 1

SDLstack:
	/* put a state and value onto the stack */
	if SDLDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", SDLTokname(SDLtoken), SDLStatname(SDLstate))
	}

	SDLp++
	if SDLp >= len(SDLS) {
		nyys := make([]SDLSymType, len(SDLS)*2)
		copy(nyys, SDLS)
		SDLS = nyys
	}
	SDLS[SDLp] = SDLVAL
	SDLS[SDLp].yys = SDLstate

SDLnewstate:
	SDLn = int(SDLPact[SDLstate])
	if SDLn <= SDLFlag {
		goto SDLdefault /* simple state */
	}
	if SDLrcvr.char < 0 {
		SDLrcvr.char, SDLtoken = SDLlex1(SDLlex, &SDLrcvr.lval)
	}
	SDLn += SDLtoken
	if SDLn < 0 || SDLn >= SDLLast {
		goto SDLdefault
	}
	SDLn = int(SDLAct[SDLn])
	if int(SDLChk[SDLn]) == SDLtoken { /* valid shift */
		SDLrcvr.char = -1
		SDLtoken = -1
		SDLVAL = SDLrcvr.lval
		SDLstate = SDLn
		if Errflag > 0 {
			Errflag--
		}
		goto SDLstack
	}

SDLdefault:
	/* default state action */
	SDLn = int(SDLDef[SDLstate])
	if SDLn == -2 {
		if SDLrcvr.char < 0 {
			SDLrcvr.char, SDLtoken = SDLlex1(SDLlex, &SDLrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if SDLExca[xi+0] == -1 && int(SDLExca[xi+1]) == SDLstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			SDLn = int(SDLExca[xi+0])
			if SDLn < 0 || SDLn == SDLtoken {
				break
			}
		}
		SDLn = int(SDLExca[xi+1])
		if SDLn < 0 {
			goto ret0
		}
	}
	if SDLn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			SDLlex.Error(SDLErrorMessage(SDLstate, SDLtoken))
			Nerrs++
			if SDLDebug >= 1 {
				__yyfmt__.Printf("%s", SDLStatname(SDLstate))
				__yyfmt__.Printf(" saw %s\n", SDLTokname(SDLtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for SDLp >= 0 {
				SDLn = int(SDLPact[SDLS[SDLp].yys]) + SDLErrCode
				if SDLn >= 0 && SDLn < SDLLast {
					SDLstate = int(SDLAct[SDLn]) /* simulate a shift of "error" */
					if int(SDLChk[SDLstate]) == SDLErrCode {
						goto SDLstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if SDLDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", SDLS[SDLp].yys)
				}
				SDLp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if SDLDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", SDLTokname(SDLtoken))
			}
			if SDLtoken == SDLEofCode {
				goto ret1
			}
			SDLrcvr.char = -1
			SDLtoken = -1
			goto SDLnewstate /* try again in the same state */
		}
	}

	/* reduction by production SDLn */
	if SDLDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", SDLn, SDLStatname(SDLstate))
	}

	SDLnt := SDLn
	SDLpt := SDLp
	_ = SDLpt // guard against "declared and not used"

	SDLp -= int(SDLR2[SDLn])
	// SDLp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if SDLp+1 >= len(SDLS) {
		nyys := make([]SDLSymType, len(SDLS)*2)
		copy(nyys, SDLS)
		SDLS = nyys
	}
	SDLVAL = SDLS[SDLp+1]

	/* consult goto table to find next state */
	SDLn = int(SDLR1[SDLn])
	SDLg := int(SDLPgo[SDLn])
	SDLj := SDLg + SDLS[SDLp].yys + 1

	if SDLj >= SDLLast {
		SDLstate = int(SDLAct[SDLg])
	} else {
		SDLstate = int(SDLAct[SDLj])
		if int(SDLChk[SDLstate]) != -SDLn {
			SDLstate = int(SDLAct[SDLg])
		}
	}
	// dummy call; replaced with literal code
	switch SDLnt {

	case 1:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:192
		{
			ni := NodeInfo{}
			if len(SDLDollar[1].nodeList) > 0 {
				ni.StartPos = SDLDollar[1].nodeList[0].Pos()
				ni.StopPos = SDLDollar[1].nodeList[len(SDLDollar[1].nodeList)-1].End()
			}
			SDLlex.(*Lexer).parseResult = &FileDecl{NodeInfo: ni, Declarations: SDLDollar[1].nodeList}
			// $$ = &File{NodeInfo: ni, Declarations: $1}
		}
	case 2:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:204
		{
			SDLVAL.nodeList = []Node{}
		}
	case 3:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:205
		{
			SDLVAL.nodeList = SDLDollar[1].nodeList
		}
	case 4:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:206
		{
			SDLVAL.nodeList = append(SDLDollar[1].nodeList, SDLDollar[2].node)
		}
	case 5:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:209
		{
			for _, imp := range SDLDollar[2].importDeclList {
				SDLDollar[1].nodeList = append(SDLDollar[1].nodeList, imp)
			}
			SDLVAL.nodeList = SDLDollar[1].nodeList
		}
	case 6:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:218
		{
			SDLVAL.node = SDLDollar[1].componentDecl
		}
	case 7:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:219
		{
			SDLVAL.node = SDLDollar[1].systemDecl
		}
	case 8:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:220
		{
			SDLVAL.node = SDLDollar[1].optionsDecl
		}
	case 9:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:221
		{
			SDLVAL.node = SDLDollar[1].enumDecl
		}
	case 10:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:225
		{ // OPTIONS ($1) LBRACE ($2) StmtList ($3) RBRACE ($4)
			// Assume OPTIONS token itself doesn't carry complex NodeInfo from lexer for this example.
			// Span from LBRACE to RBRACE for body. If StmtList is empty, Body.NodeInfo might be tricky.
			/*
			   bodyStart := $2.(Node).Pos() // Position of LBRACE (assuming lexer returns it as Node)
			   bodyEnd := $4.(Node).Pos()   // Position of RBRACE (actually its start, use .End() for full span)
			   if len($3) > 0 { // If StmtList is not empty
			       bodyStart = $3[0].Pos()
			       bodyEnd = $3[len($3)-1].End()
			   }
			*/
			SDLVAL.optionsDecl = &OptionsDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].node.(Node).End()), // Pos of OPTIONS, End of RBRACE
				Body: &BlockStmt{
					NodeInfo:   NewNodeInfo(SDLDollar[2].node.(Node).Pos(), SDLDollar[4].node.(Node).End()),
					Statements: SDLDollar[3].stmtList,
				},
			}
		}
	case 11:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:247
		{ // COMPONENT($1) ... RBRACE($5)
			SDLVAL.componentDecl = &ComponentDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.(Node).End()),
				Name:     SDLDollar[3].ident,
				Body:     gfn.Map(SDLDollar[5].methodSigItemList, func(m *MethodDecl) ComponentDeclBodyItem { return m }),
				IsNative: true,
			}
		}
	case 12:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:255
		{ // COMPONENT($1) ... RBRACE($5)
			SDLVAL.componentDecl = &ComponentDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Name:     SDLDollar[2].ident,
				Body:     SDLDollar[4].compBodyItemList,
			}
		}
	case 13:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:265
		{ // ENUM($1) IDENTIFIER($2) ... RBRACE($5)
			SDLVAL.enumDecl = &EnumDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Name:     SDLDollar[2].ident, // $2 is an IdentifierExpr from lexer, has Pos/End
				Values:   SDLDollar[4].identList,
			}
		}
	case 14:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:275
		{
			SDLVAL.identList = []*IdentifierExpr{SDLDollar[1].ident}
		}
	case 15:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:276
		{
			SDLVAL.identList = append(SDLDollar[1].identList, SDLDollar[3].ident)
		}
	case 16:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:280
		{ // IMPORT($1) STRING_LITERAL($2)
			path := SDLDollar[4].expr.(*LiteralExpr)
			for _, imp := range SDLDollar[2].importDeclList {
				imp.Path = path
			}
			SDLVAL.importDeclList = SDLDollar[2].importDeclList
		}
	case 17:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:289
		{
			SDLVAL.importDeclList = []*ImportDecl{SDLDollar[1].importDecl}
		}
	case 18:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:290
		{
			SDLVAL.importDeclList = append(SDLVAL.importDeclList, SDLDollar[3].importDecl)
		}
	case 19:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:293
		{
			SDLVAL.importDecl = &ImportDecl{ImportedItem: SDLDollar[1].ident, Alias: SDLDollar[1].ident}
		}
	case 20:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:294
		{
			SDLVAL.importDecl = &ImportDecl{ImportedItem: SDLDollar[1].ident, Alias: SDLDollar[3].ident}
		}
	case 21:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:298
		{
			SDLVAL.methodSigItemList = []*MethodDecl{}
		}
	case 22:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:299
		{
			SDLVAL.methodSigItemList = SDLDollar[1].methodSigItemList
		}
	case 23:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:303
		{
			SDLVAL.methodSigItemList = []*MethodDecl{SDLDollar[1].methodDef}
		}
	case 24:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:304
		{
			SDLVAL.methodSigItemList = append(SDLDollar[1].methodSigItemList, SDLDollar[2].methodDef)
		}
	case 25:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:307
		{ // METHOD($1) ... BlockStmt($6)
			SDLVAL.methodDef = &MethodDecl{
				NodeInfo:   NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.End()),
				Name:       SDLDollar[2].ident,
				Parameters: SDLDollar[4].paramList,
			}
		}
	case 26:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:314
		{ // METHOD($1) ... BlockStmt($8)
			SDLVAL.methodDef = &MethodDecl{
				NodeInfo:   NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].typeDecl.End()),
				Name:       SDLDollar[2].ident,
				Parameters: SDLDollar[4].paramList,
				ReturnType: SDLDollar[6].typeDecl,
			}
		}
	case 27:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:325
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{}
		}
	case 28:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:326
		{
			SDLVAL.compBodyItemList = SDLDollar[1].compBodyItemList
		}
	case 29:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:330
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{SDLDollar[1].compBodyItem}
		}
	case 30:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:331
		{
			SDLVAL.compBodyItemList = append(SDLDollar[1].compBodyItemList, SDLDollar[2].compBodyItem)
		}
	case 31:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:335
		{
			SDLVAL.compBodyItem = SDLDollar[1].paramDecl
		}
	case 32:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:336
		{
			SDLVAL.compBodyItem = SDLDollar[1].usesDecl
		}
	case 33:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:337
		{
			SDLVAL.compBodyItem = SDLDollar[1].methodDef
		}
	case 34:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:338
		{
			SDLVAL.compBodyItem = SDLDollar[1].componentDecl
		}
	case 35:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:342
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].typeDecl.End()),
				Name:     SDLDollar[2].ident,
				TypeDecl: SDLDollar[3].typeDecl, // TypeDecl also needs to have NodeInfo
			}
		}
	case 36:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:349
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo:     NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].expr.End()),
				Name:         SDLDollar[2].ident,
				DefaultValue: SDLDollar[4].expr,
			}
		}
	case 37:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:356
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo:     NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].expr.End()),
				Name:         SDLDollar[2].ident,
				TypeDecl:     SDLDollar[3].typeDecl,
				DefaultValue: SDLDollar[5].expr,
			}
		}
	case 38:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:368
		{
			identNode := SDLDollar[1].ident
			SDLVAL.typeDecl = &TypeDecl{
				NodeInfo: identNode.NodeInfo,
				Name:     identNode.Value,
			}
		}
	case 39:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:375
		{
			identNode := SDLDollar[1].ident
			SDLVAL.typeDecl = &TypeDecl{
				NodeInfo: identNode.NodeInfo,
				Name:     identNode.Value,
				Args:     SDLDollar[3].typeDeclList,
			}
		}
	case 40:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:391
		{
			SDLVAL.typeDeclList = []*TypeDecl{SDLDollar[1].typeDecl}
		}
	case 41:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:392
		{
			SDLVAL.typeDeclList = append(SDLDollar[1].typeDeclList, SDLDollar[3].typeDecl)
		}
	case 42:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:396
		{ // USES($1) ...
			SDLVAL.usesDecl = &UsesDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].ident.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
			}
		}
	case 43:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:404
		{
			SDLVAL.usesDecl = &UsesDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     SDLDollar[5].assignList,
			}
		}
	case 44:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:415
		{ // METHOD($1) ... BlockStmt($6)
			SDLDollar[1].methodDef.Body = SDLDollar[2].blockStmt
			SDLDollar[1].methodDef.NodeInfo.StopPos = SDLDollar[2].blockStmt.End()
			SDLVAL.methodDef = SDLDollar[1].methodDef
		}
	case 45:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:423
		{
			SDLVAL.paramList = []*ParamDecl{}
		}
	case 46:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:424
		{
			SDLVAL.paramList = SDLDollar[1].paramList
		}
	case 47:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:428
		{
			SDLVAL.paramList = []*ParamDecl{SDLDollar[1].paramDecl}
		}
	case 48:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:429
		{
			SDLVAL.paramList = append(SDLDollar[1].paramList, SDLDollar[3].paramDecl)
		}
	case 49:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:433
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[2].typeDecl.End()),
				Name:     SDLDollar[1].ident,
				TypeDecl: SDLDollar[2].typeDecl, // TypeDecl also needs to have NodeInfo
			}
		}
	case 50:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:440
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo:     NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[4].expr.End()),
				Name:         SDLDollar[1].ident,
				TypeDecl:     SDLDollar[2].typeDecl,
				DefaultValue: SDLDollar[4].expr,
			}
		}
	case 51:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:452
		{ // SYSTEM($1) ... RBRACE($5)
			SDLVAL.systemDecl = &SystemDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Name:     SDLDollar[2].ident,
				Body:     SDLDollar[4].sysBodyItemList,
			}
		}
	case 52:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:462
		{
			SDLVAL.sysBodyItemList = []SystemDeclBodyItem{}
		}
	case 53:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:463
		{
			SDLVAL.sysBodyItemList = append(SDLDollar[1].sysBodyItemList, SDLDollar[2].node.(SystemDeclBodyItem))
		}
	case 54:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:467
		{
			SDLVAL.node = SDLDollar[1].instanceDecl
		}
	case 55:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:469
		{
			SDLVAL.node = SDLDollar[1].optionsDecl
		}
	case 56:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:470
		{
			SDLVAL.node = SDLDollar[1].stmt
		}
	case 57:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:474
		{ // IDENTIFIER($1) ...
			SDLVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].ident.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     []*AssignmentStmt{},
			}
		}
	case 58:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:482
		{ // IDENTIFIER($1) ...
			SDLVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     SDLDollar[5].assignList,
			}
		}
	case 59:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:493
		{
			SDLVAL.assignList = []*AssignmentStmt{}
		}
	case 60:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:494
		{
			SDLVAL.assignList = SDLDollar[1].assignList
		}
	case 61:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:498
		{
			SDLVAL.assignList = []*AssignmentStmt{SDLDollar[1].assignStmt}
		}
	case 62:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:499
		{
			SDLVAL.assignList = append(SDLDollar[1].assignList, SDLDollar[3].assignStmt)
		}
	case 63:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:503
		{ // IDENTIFIER($1) ...
			SDLVAL.assignStmt = &AssignmentStmt{
				NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[3].expr.End()),
				Var:      SDLDollar[1].ident,
				Value:    SDLDollar[3].expr,
			}
		}
	case 64:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:578
		{
			SDLVAL.stmtList = []Stmt{}
		}
	case 65:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:579
		{
			SDLVAL.stmtList = SDLDollar[1].stmtList
			if SDLDollar[2].stmt != nil {
				SDLVAL.stmtList = append(SDLVAL.stmtList, SDLDollar[2].stmt)
			}
		}
	case 66:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:587
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 67:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:588
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 68:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:589
		{
			SDLVAL.stmt = SDLDollar[1].forStmt
		}
	case 69:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:590
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 70:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:591
		{
			SDLVAL.stmt = SDLDollar[1].ifStmt
		}
	case 71:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:592
		{
			SDLVAL.stmt = SDLDollar[1].waitStmt
		}
	case 72:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:593
		{
			SDLVAL.stmt = SDLDollar[1].delayStmt
		}
	case 73:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:594
		{
			SDLVAL.stmt = SDLDollar[1].switchStmt
		}
	case 74:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:596
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 75:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:597
		{
			SDLVAL.stmt = SDLDollar[1].blockStmt
		}
	case 76:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:598
		{
			SDLVAL.stmt = nil
		}
	case 77:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:603
		{
			SDLVAL.blockStmt = &BlockStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].node.(Node).End()), Statements: SDLDollar[2].stmtList}
		}
	case 78:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:608
		{
			SDLVAL.forStmt = &ForStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].stmt.End()), Condition: SDLDollar[2].expr, Body: SDLDollar[3].stmt}
		}
	case 79:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:614
		{ // LET($1) ...
			SDLVAL.stmt = &LetStmt{
				NodeInfo:  NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].expr.End()),
				Variables: SDLDollar[2].identList,
				Value:     SDLDollar[4].expr,
			}
		}
	case 80:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:639
		{
			SDLVAL.stmt = &ExprStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[1].expr.(Node).End()), Expression: SDLDollar[1].expr}
		}
	case 81:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:643
		{
			SDLVAL.stmt = &ReturnStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End()), ReturnValue: SDLDollar[2].expr}
		}
	case 82:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:644
		{
			SDLVAL.stmt = &ReturnStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].node.(Node).End()), ReturnValue: nil}
		}
	case 83:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:648
		{
			SDLVAL.delayStmt = &DelayStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.End()), Duration: SDLDollar[2].expr}
		}
	case 84:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:652
		{ // WAIT($1) IDENTIFIER($2) ...
			idents := SDLDollar[2].identList
			endNode := idents[len(idents)-1] // End at the last identifier in the list
			SDLVAL.waitStmt = &WaitStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.Pos(), endNode.End()), Idents: idents}
		}
	case 85:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:660
		{ // LOG($1) Expression($2) ...
			SDLVAL.stmt = &LogStmt{Args: SDLDollar[2].exprList}
		}
	case 86:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:667
		{
			SDLVAL.exprList = []Expr{}
		}
	case 87:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:668
		{
			SDLVAL.exprList = SDLDollar[1].exprList
		}
	case 88:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:672
		{
			SDLVAL.exprList = []Expr{SDLDollar[1].expr}
		}
	case 89:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:673
		{
			SDLVAL.exprList = append(SDLDollar[1].exprList, SDLDollar[3].expr)
		}
	case 90:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:678
		{ // IF($1) ...
			endNode := Stmt(SDLDollar[3].blockStmt)
			if SDLDollar[4].stmt != nil {
				endNode = SDLDollar[4].stmt
			} // End of Else block/IfStmt
			SDLVAL.ifStmt = &IfStmt{
				NodeInfo:  NewNodeInfo(SDLDollar[1].node.(Node).Pos(), endNode.End()),
				Condition: SDLDollar[2].expr,
				Then:      SDLDollar[3].blockStmt,
				Else:      SDLDollar[4].stmt,
			}
		}
	case 91:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:691
		{
			SDLVAL.stmt = nil
		}
	case 92:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:692
		{
			SDLVAL.stmt = SDLDollar[2].ifStmt
		}
	case 93:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:693
		{
			SDLVAL.stmt = SDLDollar[2].blockStmt
		}
	case 94:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:697
		{ // DISTRIBUTE($1) ... RBRACE($6)
			SDLVAL.sampleExpr = &SampleExpr{FromExpr: SDLDollar[2].expr}
			SDLVAL.sampleExpr.NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 95:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:703
		{
			SDLVAL.expr = nil
		}
	case 96:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:703
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 97:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:705
		{
			SDLVAL.tupleExpr = &TupleExpr{Children: append(SDLDollar[2].exprList, SDLDollar[4].expr)}
		}
	case 98:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:710
		{ // GO($1) ... BlockStmt($4)
			SDLVAL.goStmt = &GoStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].stmt.End()), VarName: SDLDollar[2].ident, Stmt: SDLDollar[4].stmt}
		}
	case 99:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:713
		{ // GO($1) BlockStmt($2)
			SDLVAL.goStmt = &GoStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].blockStmt.End()), VarName: nil, Stmt: SDLDollar[2].blockStmt}
		}
	case 100:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:716
		{
			yyerror(SDLlex, fmt.Sprintf("`go` currently only supports assigning blocks, not expressions, at pos %d", SDLDollar[1].node.(Node).Pos()))
			SDLVAL.goStmt = &GoStmt{}
		}
	case 101:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:725
		{
			SDLDollar[1].chainedExpr.Unchain(nil)
			SDLVAL.expr = SDLDollar[1].chainedExpr.UnchainedExpr
		}
	case 102:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:754
		{
			SDLVAL.chainedExpr = &ChainedExpr{Children: []Expr{SDLDollar[1].expr}}
		}
	case 103:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:757
		{
			SDLDollar[1].chainedExpr.Children = append(SDLDollar[1].chainedExpr.Children, SDLDollar[3].expr)
			SDLDollar[1].chainedExpr.Operators = append(SDLDollar[1].chainedExpr.Operators, SDLDollar[2].node.String())
			SDLVAL.chainedExpr = SDLDollar[1].chainedExpr
		}
	case 104:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:762
		{
			SDLDollar[1].chainedExpr.Children = append(SDLDollar[1].chainedExpr.Children, SDLDollar[3].expr)
			SDLDollar[1].chainedExpr.Operators = append(SDLDollar[1].chainedExpr.Operators, SDLDollar[2].node.String())
			SDLVAL.chainedExpr = SDLDollar[1].chainedExpr
		}
	case 105:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:769
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 106:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:771
		{
			SDLVAL.expr = &UnaryExpr{Operator: SDLDollar[1].node.String(), Right: SDLDollar[2].expr}
			SDLVAL.expr.(*UnaryExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 107:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:776
		{
			SDLVAL.expr = &UnaryExpr{Operator: SDLDollar[1].node.String(), Right: SDLDollar[2].expr}
			SDLVAL.expr.(*UnaryExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 108:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:819
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 109:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:820
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 110:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:824
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 111:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:825
		{
			SDLVAL.expr = SDLDollar[1].ident
		}
	case 112:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:826
		{
			SDLVAL.expr = SDLDollar[1].distributeExpr
		}
	case 113:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:827
		{
			SDLVAL.expr = SDLDollar[1].sampleExpr
		}
	case 114:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:828
		{
			SDLVAL.expr = SDLDollar[1].tupleExpr
		}
	case 115:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:829
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 116:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:830
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 117:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:833
		{
			SDLVAL.expr = SDLDollar[2].expr
		}
	case 118:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:836
		{
			// SDLlex.(*Lexer).lval)
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 119:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:840
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 120:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:841
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 121:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:842
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 122:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:843
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 123:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:847
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			SDLVAL.expr = &MemberAccessExpr{
				Receiver: SDLDollar[1].ident,
				Member:   SDLDollar[3].ident,
			}
			SDLVAL.expr.(*MemberAccessExpr).NodeInfo = NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[3].ident.End())
		}
	case 124:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:854
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			SDLVAL.expr = &MemberAccessExpr{
				Receiver: SDLDollar[1].expr,
				Member:   SDLDollar[3].ident,
			}
			SDLVAL.expr.(*MemberAccessExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), SDLDollar[3].ident.End())
		}
	case 125:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:864
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := SDLDollar[4].node.(Node) // End at RPAREN
			if len(SDLDollar[3].exprList) > 0 {
				exprList := SDLDollar[3].exprList
				endNode = exprList[len(exprList)-1].(Node) // End at last arg
			}
			SDLVAL.expr = &CallExpr{
				Function: SDLDollar[1].ident,
				Args:     SDLDollar[3].exprList,
			}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].ident.Pos(), endNode.End())
		}
	case 126:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:876
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := SDLDollar[4].node.(Node) // End at RPAREN
			if len(SDLDollar[3].exprList) > 0 {
				exprList := SDLDollar[3].exprList
				endNode = exprList[len(exprList)-1].(Node) // End at last arg
			}
			SDLVAL.expr = &CallExpr{
				Function: SDLDollar[1].expr,
				Args:     SDLDollar[3].exprList,
			}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), endNode.End())
		}
	case 127:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:891
		{
			SDLVAL.distributeExpr = &DistributeExpr{TotalProb: SDLDollar[2].expr, Cases: SDLDollar[4].caseExprList, Default: SDLDollar[5].expr} /* TODO: Pos */
		}
	case 128:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:897
		{
			SDLVAL.caseExprList = []*CaseExpr{}
		}
	case 129:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:898
		{
			SDLVAL.caseExprList = SDLDollar[1].caseExprList
		}
	case 130:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:902
		{
			SDLVAL.caseExprList = []*CaseExpr{SDLDollar[1].caseExpr}
		}
	case 131:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:903
		{
			SDLVAL.caseExprList = append(SDLDollar[1].caseExprList, SDLDollar[2].caseExpr)
		}
	case 132:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:907
		{
			SDLVAL.caseExpr = &CaseExpr{Condition: SDLDollar[1].expr, Body: SDLDollar[3].expr}
		}
	case 133:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:910
		{ // allow optional comma
			SDLVAL.caseExpr = &CaseExpr{Condition: SDLDollar[1].expr, Body: SDLDollar[3].expr}
		}
	case 134:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:916
		{
			SDLVAL.expr = nil
		}
	case 135:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:917
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 136:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:921
		{
			SDLVAL.expr = SDLDollar[3].expr
		}
	case 137:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:922
		{
			SDLVAL.expr = SDLDollar[3].expr
		}
	case 138:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:926
		{
			SDLVAL.switchStmt = &SwitchStmt{Expr: SDLDollar[2].expr, Cases: SDLDollar[4].caseStmtList, Default: SDLDollar[5].stmt} /* TODO: Pos */
		}
	case 139:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:932
		{
			SDLVAL.caseStmtList = []*CaseStmt{}
		}
	case 140:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:933
		{
			SDLVAL.caseStmtList = SDLDollar[1].caseStmtList
		}
	case 141:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:937
		{
			SDLVAL.caseStmtList = []*CaseStmt{SDLDollar[1].caseStmt}
		}
	case 142:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:938
		{
			SDLVAL.caseStmtList = append(SDLDollar[1].caseStmtList, SDLDollar[2].caseStmt)
		}
	case 143:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:942
		{
			SDLVAL.caseStmt = &CaseStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[3].stmt.End()), Condition: SDLDollar[1].expr, Body: SDLDollar[3].stmt}
		}
	case 144:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:946
		{
			SDLVAL.stmt = nil
		}
	case 145:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:947
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 146:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:951
		{
			SDLVAL.stmt = SDLDollar[3].stmt
		}
	}
	goto SDLstack /* stack new state and value */
}
