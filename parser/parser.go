// Code generated by goyacc -o parser.go -p yy grammar.y. DO NOT EDIT.

//line grammar.y:2
package parser

import __yyfmt__ "fmt"

//line grammar.y:2

import (
	// "reflect"
	"fmt"
	"io"
	"log"
)

// Function to be called by yyParse on error.
// Needs access to the lexer passed via %parse-param.
func yyerror(yyl yyLexer, msg string) {
	lexer := yyl.(LexerInterface)
	line, col := lexer.Position()
	// log.Println("YYERROR MSG = ", msg)
	errMsg := fmt.Sprintf("Error at Line %d, Col %d, Near ('%s'): %s",
		line, col /* tokenString(lexer.LastToken()),*/, lexer.Text(), msg) // Added tokenString helper call
	lexer.Error(errMsg)
}

func yyerrok(lexer yyLexer) {
	log.Println("Error here... not sure how to recover")
	///ErrFlag = 0
}

//line grammar.y:31
type yySymType struct {
	yys int
	// Basic types from lexer
	sval string // Holds raw string values like identifiers, literal content

	// AST Nodes (using pointers) - these should have NodeInfo
	file               *File
	componentDecl      *ComponentDecl
	systemDecl         *SystemDecl
	node               Node      // Generic interface for lists and for accessing NodeInfo
	tokenNode          TokenNode // Generic interface for lists and for accessing NodeInfo
	expr               Expr
	stmt               Stmt
	typeName           *TypeName
	paramDecl          *ParamDecl
	usesDecl           *UsesDecl
	methodDef          *MethodDecl
	instanceDecl       *InstanceDecl
	analyzeDecl        *AnalyzeDecl
	expectBlock        *ExpectationsDecl
	expectStmt         *ExpectStmt
	blockStmt          *BlockStmt
	ifStmt             *IfStmt
	distributeStmt     *DistributeStmt
	distributeCase     *DistributeCase
	distributeExpr     *DistributeExpr
	distributeExprCase *DistributeExprCase
	defaultCase        *DefaultCase
	goStmt             *GoStmt
	assignStmt         *AssignmentStmt
	optionsDecl        *OptionsDecl
	enumDecl           *EnumDecl
	importDecl         *ImportDecl
	waitStmt           *WaitStmt
	delayStmt          *DelayStmt

	// Slices for lists
	nodeList               []Node
	compBodyItemList       []ComponentDeclBodyItem
	sysBodyItemList        []SystemDeclBodyItem
	paramList              []*ParamDecl
	assignList             []*AssignmentStmt
	exprList               []Expr
	stmtList               []Stmt
	identList              []*IdentifierExpr
	distributeCaseList     []*DistributeCase
	distributeExprCaseList []*DistributeExprCase
	expectStmtList         []*ExpectStmt

	// Add field to store position for simple tokens if needed
	// posInfo     NodeInfo
}

const SYSTEM = 57346
const USES = 57347
const METHOD = 57348
const INSTANCE = 57349
const ANALYZE = 57350
const EXPECT = 57351
const LET = 57352
const IF = 57353
const ELSE = 57354
const DISTRIBUTE = 57355
const DEFAULT = 57356
const RETURN = 57357
const DELAY = 57358
const WAIT = 57359
const GO = 57360
const LOG = 57361
const SWITCH = 57362
const CASE = 57363
const TRUE = 57364
const FALSE = 57365
const FOR = 57366
const LBRACE = 57367
const RBRACE = 57368
const OPTIONS = 57369
const ENUM = 57370
const COMPONENT = 57371
const PARAM = 57372
const IMPORT = 57373
const ASSIGN = 57374
const COLON = 57375
const LPAREN = 57376
const RPAREN = 57377
const COMMA = 57378
const DOT = 57379
const ARROW = 57380
const PLUS_ASSIGN = 57381
const MINUS_ASSIGN = 57382
const MUL_ASSIGN = 57383
const DIV_ASSIGN = 57384
const LET_ASSIGN = 57385
const SEMICOLON = 57386
const INT = 57387
const FLOAT = 57388
const BOOL = 57389
const STRING = 57390
const DURATION = 57391
const NOT = 57392
const MINUS = 57393
const IDENTIFIER = 57394
const INT_LITERAL = 57395
const FLOAT_LITERAL = 57396
const STRING_LITERAL = 57397
const BOOL_LITERAL = 57398
const DURATION_LITERAL = 57399
const OR = 57400
const AND = 57401
const EQ = 57402
const NEQ = 57403
const LT = 57404
const LTE = 57405
const GT = 57406
const GTE = 57407
const PLUS = 57408
const MUL = 57409
const DIV = 57410
const MOD = 57411
const UMINUS = 57412

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SYSTEM",
	"USES",
	"METHOD",
	"INSTANCE",
	"ANALYZE",
	"EXPECT",
	"LET",
	"IF",
	"ELSE",
	"DISTRIBUTE",
	"DEFAULT",
	"RETURN",
	"DELAY",
	"WAIT",
	"GO",
	"LOG",
	"SWITCH",
	"CASE",
	"TRUE",
	"FALSE",
	"FOR",
	"LBRACE",
	"RBRACE",
	"OPTIONS",
	"ENUM",
	"COMPONENT",
	"PARAM",
	"IMPORT",
	"ASSIGN",
	"COLON",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"DOT",
	"ARROW",
	"PLUS_ASSIGN",
	"MINUS_ASSIGN",
	"MUL_ASSIGN",
	"DIV_ASSIGN",
	"LET_ASSIGN",
	"SEMICOLON",
	"INT",
	"FLOAT",
	"BOOL",
	"STRING",
	"DURATION",
	"NOT",
	"MINUS",
	"IDENTIFIER",
	"INT_LITERAL",
	"FLOAT_LITERAL",
	"STRING_LITERAL",
	"BOOL_LITERAL",
	"DURATION_LITERAL",
	"OR",
	"AND",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"PLUS",
	"MUL",
	"DIV",
	"MOD",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar.y:786
// --- Go Code Section ---

// Interface for the lexer required by the parser.
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
	Pos() int                  // Start byte position of the last token read
	End() int                  // End byte position of the last token read
	Text() string              // Text of the last token read
	Position() (line, col int) // Added: Get line/col of last token start
	LastToken() int            // Added: Get the token code that was just lexed
}

// Parse takes an input stream and attempts to parse it according to the SDL grammar. 22222
// It returns the root of the Abstract Syntax Tree (*File) if successful, or an error.
func Parse(input io.Reader) (*Lexer, *File, error) {
	// Reset global result before parsing
	lexer := NewLexer(input)
	// Set yyDebug = 3 for verbose parser debugging output
	// yyDebug = 3
	resultCode := yyParse(lexer) // Call the LALR parser generated by goyacc

	if resultCode != 0 {
		// A syntax error occurred. The lexer's Error method should have been called
		// and stored the error message.
		if lexer.lastError != nil {
			return lexer, nil, lexer.lastError
		}
		// Fallback error message if lexer didn't store one
		return lexer, nil, fmt.Errorf("syntax error near byte %d", lexer.Pos())
	}

	// Parsing succeeded
	if lexer.parseResult == nil {
		// This indicates a potential issue with the grammar's top rule action
		return lexer, nil, fmt.Errorf("parsing finished successfully, but no AST result was produced")
	}

	return lexer, lexer.parseResult, nil
}

// The parser expects the lexer variable to be named yyLex.
// We can satisfy this by creating a global or passing it via yyParseWithLexer.
// Using yyParseWithLexer is cleaner.

// Example main function (optional, for standalone testing)
/*
func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: parser <input_file>")
		return
	}
	filePath := os.Args[1]
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Printf("Error opening file %s: %v\n", filePath, err)
		return
	}
	defer file.Close()

	astRoot, err := Parse(file)
	if err != nil {
		fmt.Printf("Parsing failed: %v\n", err)
		// Error message should ideally include line/column from lexer
	} else {
		fmt.Println("Parsing successful!")
		// Print the AST (implement String() methods for AST nodes for nice output)
		fmt.Println(astRoot.String())
	}
}
*/

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 22,
	26, 67,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 282

var yyAct = [...]uint8{
	41, 209, 170, 32, 53, 55, 181, 130, 37, 110,
	102, 52, 54, 51, 111, 112, 113, 101, 18, 39,
	210, 182, 48, 178, 109, 158, 154, 40, 43, 147,
	70, 125, 42, 45, 44, 46, 47, 49, 124, 123,
	72, 89, 48, 91, 93, 17, 95, 110, 98, 96,
	100, 64, 15, 14, 70, 97, 103, 104, 105, 106,
	107, 108, 109, 116, 117, 118, 48, 57, 58, 60,
	65, 66, 67, 68, 69, 64, 173, 174, 176, 175,
	177, 186, 21, 172, 40, 201, 90, 88, 71, 200,
	196, 57, 58, 60, 65, 66, 67, 68, 69, 131,
	82, 11, 128, 70, 193, 166, 167, 122, 136, 137,
	138, 139, 140, 141, 135, 134, 150, 144, 145, 146,
	195, 153, 142, 143, 64, 121, 87, 169, 159, 151,
	163, 99, 164, 94, 115, 122, 70, 114, 162, 10,
	57, 58, 60, 65, 66, 67, 68, 69, 157, 120,
	70, 48, 197, 156, 155, 126, 217, 64, 148, 204,
	80, 81, 11, 12, 9, 184, 13, 215, 188, 192,
	185, 64, 187, 57, 58, 60, 65, 66, 67, 68,
	69, 92, 214, 194, 9, 79, 183, 57, 58, 60,
	65, 66, 67, 68, 69, 202, 70, 129, 127, 29,
	206, 211, 212, 205, 203, 6, 199, 213, 165, 43,
	216, 132, 73, 27, 48, 219, 4, 64, 220, 198,
	152, 133, 218, 48, 23, 20, 86, 19, 16, 161,
	35, 190, 85, 57, 58, 60, 65, 66, 67, 68,
	69, 189, 78, 168, 63, 119, 207, 208, 84, 77,
	76, 171, 179, 180, 75, 149, 191, 61, 62, 59,
	56, 50, 22, 34, 33, 38, 36, 31, 30, 160,
	28, 8, 7, 26, 25, 24, 5, 3, 83, 74,
	2, 1,
}

var yyPact = [...]int16{
	-1000, -1000, 135, -1000, -1000, -1000, -1000, -1000, -1000, 1,
	0, 203, -7, -37, 202, 200, -1000, 199, -1000, -1000,
	-1000, 187, 17, -12, 186, 155, 74, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43,
	-11, 42, 137, 183, -12, 183, -3, 183, -1000, 183,
	-41, -49, -1000, -4, -53, -1000, 100, 183, 183, -1000,
	-1000, -1000, -1000, -1000, 183, -1000, -1000, -1000, -1000, -1000,
	115, 99, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -13,
	-14, -21, -1000, -1000, -1000, -1000, -1000, 122, -1000, 166,
	-1000, -1000, -1000, 189, 71, -1000, 165, -1000, 63, 185,
	196, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, -23, 123, -1000, -1000, 94, 195,
	183, -1000, -26, 121, 120, 114, -27, 183, 217, 41,
	-1000, 183, -1000, 182, -49, -1000, -42, -42, -42, -42,
	-42, -42, -53, -53, -1000, -1000, -1000, -1000, -1000, 70,
	-1000, -1000, -1000, 92, -1000, 31, -29, -31, 154, -1000,
	-1000, 198, -1000, 37, 63, -1000, -1000, 183, 90, -1000,
	151, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 85,
	54, -1000, 119, 194, -1000, -1000, -1000, -1000, -1000, 180,
	-1000, -1000, 51, 47, 183, 126, -31, 31, -32, -1000,
	183, 183, -1000, -1000, 31, -1000, 150, 141, -32, -1000,
	124, -1000, -1000, 189, 183, -1000, -1000, 183, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 281, 280, 279, 278, 277, 216, 276, 275, 274,
	273, 205, 272, 88, 272, 271, 270, 269, 199, 268,
	267, 266, 265, 264, 263, 263, 8, 82, 262, 0,
	261, 13, 11, 4, 12, 5, 260, 259, 258, 257,
	257, 257, 256, 255, 255, 7, 254, 6, 253, 252,
	2, 251, 250, 249, 248, 1, 247, 246, 246, 246,
	246, 246, 246, 246, 3, 246, 245, 245, 245, 245,
	245, 244, 243, 241, 231, 230,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 5, 5, 5, 5, 5, 11,
	12, 13, 13, 15, 6, 8, 9, 9, 3, 3,
	3, 3, 46, 46, 50, 50, 51, 51, 51, 51,
	51, 52, 53, 53, 49, 49, 48, 48, 47, 47,
	7, 4, 4, 4, 10, 10, 54, 54, 57, 57,
	56, 56, 55, 58, 60, 60, 59, 63, 63, 62,
	62, 61, 61, 61, 61, 61, 61, 27, 28, 28,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 26, 18, 25, 19, 20, 20, 24, 23, 14,
	14, 21, 45, 45, 64, 17, 17, 17, 65, 66,
	66, 68, 68, 67, 70, 70, 69, 75, 75, 75,
	22, 29, 30, 30, 31, 31, 32, 32, 32, 32,
	32, 32, 32, 33, 33, 33, 34, 34, 34, 34,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 37,
	37, 37, 37, 37, 39, 38, 38, 44, 44, 43,
	43, 71, 72, 72, 74, 73, 73, 42, 40, 41,
}

var yyR2 = [...]int8{
	0, 1, 0, 2, 1, 1, 1, 1, 1, 4,
	5, 1, 3, 2, 5, 1, 0, 2, 1, 1,
	1, 1, 4, 6, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 8, 0, 1, 1, 3, 3, 5,
	5, 1, 1, 1, 0, 2, 3, 7, 0, 1,
	1, 2, 3, 5, 0, 1, 4, 0, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 4, 3, 2, 2, 2, 2, 2, 0,
	3, 3, 0, 3, 4, 0, 2, 2, 6, 0,
	3, 0, 2, 3, 0, 1, 3, 4, 2, 5,
	4, 1, 1, 3, 1, 3, 1, 3, 3, 3,
	3, 3, 3, 1, 3, 3, 1, 3, 3, 3,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 4, 0, 1, 1,
	3, 6, 0, 2, 3, 0, 1, 3, 4, 4,
}

var yyChk = [...]int16{
	-1000, -1, -2, -5, -6, -7, -11, -12, -15, 29,
	4, 27, 28, 31, 52, 52, 25, 52, 55, 25,
	25, -27, -28, 25, -8, -9, -10, 26, -16, -18,
	-19, -20, -64, -23, -24, -75, -21, -26, -22, 2,
	10, -29, 15, 11, 17, 16, 18, 19, 25, 20,
	-30, -31, -32, -33, -34, -35, -36, 50, 51, -37,
	52, -39, -38, -71, 34, 53, 54, 55, 56, 57,
	13, -13, 52, 26, -3, -46, -52, -53, -6, 30,
	5, 6, 26, -4, -54, -11, -18, 52, 44, 52,
	44, -29, 44, -29, -13, -29, 52, -26, -29, -27,
	-29, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	51, 67, 68, 69, 37, 34, -35, -35, -29, -66,
	34, 26, 36, 52, 52, 52, 33, 32, -26, 32,
	-45, 36, 26, 25, -31, -32, -33, -33, -33, -33,
	-33, -33, -34, -34, -35, -35, -35, 52, 35, -43,
	-29, 35, 25, -29, 52, 33, 33, 34, 52, -29,
	-17, 12, -26, -29, -29, 26, 35, 36, -72, 35,
	-50, -51, 52, 45, 46, 48, 47, 49, 52, -49,
	-48, -47, 52, 32, -64, -26, 44, -45, -29, -73,
	-74, -42, -29, 14, 32, 35, 36, 33, 25, 26,
	38, 38, -29, -26, 33, -47, -50, -57, -56, -55,
	52, -29, -29, -50, 32, 26, -55, 32, -26, -29,
	-29,
}

var yyDef = [...]int16{
	2, -2, 1, 3, 4, 5, 6, 7, 8, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 13, 16,
	44, 0, -2, 0, 0, 15, 0, 9, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	111, 112, 114, 116, 123, 126, 130, 0, 0, 133,
	134, 135, 136, 137, 0, 139, 140, 141, 142, 143,
	99, 0, 11, 14, 17, 18, 19, 20, 21, 0,
	0, 0, 40, 45, 41, 42, 43, 0, 80, 0,
	84, 85, 86, 0, 88, 87, 0, 108, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 132, 0, 0,
	0, 10, 0, 0, 0, 0, 0, 0, 95, 0,
	91, 0, 81, 0, 113, 115, 117, 118, 119, 120,
	121, 122, 124, 125, 127, 128, 129, 144, 145, 0,
	149, 138, 152, 0, 12, 0, 0, 34, 46, 82,
	94, 0, 107, 0, 92, 110, 146, 0, 155, 100,
	22, 24, 25, 26, 27, 28, 29, 30, 31, 0,
	35, 36, 0, 0, 96, 97, 109, 93, 150, 0,
	153, 156, 0, 0, 0, 0, 0, 0, 48, 151,
	0, 0, 23, 32, 0, 37, 38, 0, 49, 50,
	0, 154, 157, 0, 0, 47, 51, 0, 33, 39,
	52,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:157
		{
			ni := NodeInfo{}
			if len(yyDollar[1].nodeList) > 0 {
				ni.StartPos = yyDollar[1].nodeList[0].Pos()
				ni.StopPos = yyDollar[1].nodeList[len(yyDollar[1].nodeList)-1].End()
			}
			yylex.(*Lexer).parseResult = &File{NodeInfo: ni, Declarations: yyDollar[1].nodeList}
			// $$ = &File{NodeInfo: ni, Declarations: $1}
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:169
		{
			yyVAL.nodeList = []Node{}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:170
		{
			yyVAL.nodeList = append(yyDollar[1].nodeList, yyDollar[2].node)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:174
		{
			yyVAL.node = yyDollar[1].componentDecl
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:175
		{
			yyVAL.node = yyDollar[1].systemDecl
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:176
		{
			yyVAL.node = yyDollar[1].optionsDecl
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:177
		{
			yyVAL.node = yyDollar[1].enumDecl
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:178
		{
			yyVAL.node = yyDollar[1].importDecl
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:182
		{ // OPTIONS ($1) LBRACE ($2) StmtList ($3) RBRACE ($4)
			// Assume OPTIONS token itself doesn't carry complex NodeInfo from lexer for this example.
			// Span from LBRACE to RBRACE for body. If StmtList is empty, Body.NodeInfo might be tricky.
			/*
			   bodyStart := $2.(Node).Pos() // Position of LBRACE (assuming lexer returns it as Node)
			   bodyEnd := $4.(Node).Pos()   // Position of RBRACE (actually its start, use .End() for full span)
			   if len($3) > 0 { // If StmtList is not empty
			       bodyStart = $3[0].Pos()
			       bodyEnd = $3[len($3)-1].End()
			   }
			*/
			yyVAL.optionsDecl = &OptionsDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].node.(Node).End()), // Pos of OPTIONS, End of RBRACE
				Body: &BlockStmt{
					NodeInfo:   newNodeInfo(yyDollar[2].node.(Node).Pos(), yyDollar[4].node.(Node).End()),
					Statements: yyDollar[3].stmtList,
				},
			}
		}
	case 10:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:204
		{ // ENUM($1) IDENTIFIER($2) ... RBRACE($5)
			yyVAL.enumDecl = &EnumDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].node.(Node).End()),
				NameNode:   yyDollar[2].expr.(*IdentifierExpr), // $2 is an IdentifierExpr from lexer, has Pos/End
				ValuesNode: yyDollar[4].identList,
			}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:214
		{
			yyVAL.identList = []*IdentifierExpr{yyDollar[1].expr.(*IdentifierExpr)}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:215
		{
			yyVAL.identList = append(yyDollar[1].identList, yyDollar[3].expr.(*IdentifierExpr))
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:219
		{ // IMPORT($1) STRING_LITERAL($2)
			yyVAL.importDecl = &ImportDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].expr.End()),
				Path:     yyDollar[2].expr.(*LiteralExpr), // $2 is a LiteralExpr from lexer
			}
		}
	case 14:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:228
		{ // COMPONENT($1) ... RBRACE($5)
			yyVAL.componentDecl = &ComponentDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].node.(Node).End()),
				NameNode: yyDollar[2].expr.(*IdentifierExpr),
				Body:     yyDollar[4].compBodyItemList,
			}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:237
		{
			yyVAL.compBodyItemList = yyDollar[1].compBodyItemList
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:240
		{
			yyVAL.compBodyItemList = []ComponentDeclBodyItem{}
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:241
		{
			yyVAL.compBodyItemList = append(yyDollar[1].compBodyItemList, yyDollar[2].node.(ComponentDeclBodyItem))
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:244
		{
			yyVAL.node = yyDollar[1].paramDecl
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:245
		{
			yyVAL.node = yyDollar[1].usesDecl
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:246
		{
			yyVAL.node = yyDollar[1].methodDef
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:247
		{
			yyVAL.node = yyDollar[1].componentDecl
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:251
		{ // PARAM($1) ...
			yyVAL.paramDecl = &ParamDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].typeName.End()),
				Name:     yyDollar[2].expr.(*IdentifierExpr),
				Type:     yyDollar[4].typeName, // TypeName also needs to have NodeInfo
			}
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:258
		{ // PARAM($1) ...
			yyVAL.paramDecl = &ParamDecl{
				NodeInfo:     newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[6].expr.End()),
				Name:         yyDollar[2].expr.(*IdentifierExpr),
				Type:         yyDollar[4].typeName,
				DefaultValue: yyDollar[6].expr,
			}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:269
		{
			yyVAL.typeName = yyDollar[1].typeName
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:270
		{
			identNode := yyDollar[1].expr.(Node) // $1 is IDENTIFIER token (IdentifierExpr)
			yyVAL.typeName = &TypeName{
				NodeInfo:     identNode.(*IdentifierExpr).NodeInfo,
				EnumTypeName: identNode.(*IdentifierExpr).Name,
			}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:282
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].tokenNode.NodeInfo, PrimitiveTypeName: "int"}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:283
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].tokenNode.NodeInfo, PrimitiveTypeName: "float"}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:284
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].tokenNode.NodeInfo, PrimitiveTypeName: "string"}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:285
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].tokenNode.NodeInfo, PrimitiveTypeName: "bool"}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:286
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].tokenNode.NodeInfo, PrimitiveTypeName: "duration"}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:294
		{ // USES($1) ...
			yyVAL.usesDecl = &UsesDecl{
				NodeInfo:      newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].expr.End()),
				NameNode:      yyDollar[2].expr.(*IdentifierExpr),
				ComponentNode: yyDollar[4].expr.(*IdentifierExpr),
			}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:306
		{ // METHOD($1) ... BlockStmt($6)
			yyVAL.methodDef = &MethodDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[6].blockStmt.End()),
				NameNode:   yyDollar[2].expr.(*IdentifierExpr),
				Parameters: yyDollar[4].paramList,
				Body:       yyDollar[6].blockStmt,
			}
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line grammar.y:314
		{ // METHOD($1) ... BlockStmt($8)
			yyVAL.methodDef = &MethodDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[8].blockStmt.End()),
				NameNode:   yyDollar[2].expr.(*IdentifierExpr),
				Parameters: yyDollar[4].paramList,
				ReturnType: yyDollar[7].typeName,
				Body:       yyDollar[8].blockStmt,
			}
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:326
		{
			yyVAL.paramList = []*ParamDecl{}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:327
		{
			yyVAL.paramList = yyDollar[1].paramList
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:331
		{
			yyVAL.paramList = []*ParamDecl{yyDollar[1].paramDecl}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:332
		{
			yyVAL.paramList = append(yyDollar[1].paramList, yyDollar[3].paramDecl)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:336
		{ // PARAM($1) ...
			yyVAL.paramDecl = &ParamDecl{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].typeName.End()),
				Name:     yyDollar[1].expr.(*IdentifierExpr),
				Type:     yyDollar[3].typeName, // TypeName also needs to have NodeInfo
			}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:343
		{ // PARAM($1) ...
			yyVAL.paramDecl = &ParamDecl{
				NodeInfo:     newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[5].expr.End()),
				Name:         yyDollar[1].expr.(*IdentifierExpr),
				Type:         yyDollar[3].typeName,
				DefaultValue: yyDollar[5].expr,
			}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:355
		{ // SYSTEM($1) ... RBRACE($5)
			yyVAL.systemDecl = &SystemDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].node.(Node).End()),
				NameNode: yyDollar[2].expr.(*IdentifierExpr),
				Body:     yyDollar[4].sysBodyItemList,
			}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:366
		{
			yyVAL.node = yyDollar[1].instanceDecl
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:368
		{
			yyVAL.node = yyDollar[1].optionsDecl
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:369
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:373
		{
			yyVAL.sysBodyItemList = []SystemDeclBodyItem{}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:374
		{
			yyVAL.sysBodyItemList = append(yyDollar[1].sysBodyItemList, yyDollar[2].node.(SystemDeclBodyItem))
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:378
		{ // IDENTIFIER($1) ...
			yyVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()),
				NameNode:      yyDollar[1].expr.(*IdentifierExpr),
				ComponentType: yyDollar[3].expr.(*IdentifierExpr),
				Overrides:     []*AssignmentStmt{},
			}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:386
		{ // IDENTIFIER($1) ...
			yyVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[7].node.End()),
				NameNode:      yyDollar[1].expr.(*IdentifierExpr),
				ComponentType: yyDollar[3].expr.(*IdentifierExpr),
				Overrides:     yyDollar[6].assignList,
			}
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:397
		{
			yyVAL.assignList = []*AssignmentStmt{}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:398
		{
			yyVAL.assignList = yyDollar[1].assignList
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:402
		{
			yyVAL.assignList = []*AssignmentStmt{yyDollar[1].assignStmt}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:403
		{
			yyVAL.assignList = append(yyDollar[1].assignList, yyDollar[2].assignStmt)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:407
		{ // IDENTIFIER($1) ...
			yyVAL.assignStmt = &AssignmentStmt{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()),
				Var:      yyDollar[1].expr.(*IdentifierExpr),
				Value:    yyDollar[3].expr,
			}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:417
		{ // ANALYZE($1) ...
			callExpr, ok := yyDollar[4].expr.(*CallExpr)
			if !ok {
				yyerror(yylex, fmt.Sprintf("analyze target must be a method call, found %T at pos %d", yyDollar[4].expr, yyDollar[4].expr.(Node).Pos()))
			}
			endPos := 0
			if yyDollar[5].expectBlock != nil {
				endPos = yyDollar[5].expectBlock.End()
			} else {
				endPos = yyDollar[4].expr.End()
			}
			yyVAL.analyzeDecl = &AnalyzeDecl{
				NodeInfo:     newNodeInfo(yyDollar[1].node.(Node).Pos(), endPos),
				Name:         yyDollar[2].expr.(*IdentifierExpr),
				Target:       callExpr,
				Expectations: yyDollar[5].expectBlock,
			}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:437
		{
			yyVAL.expectBlock = nil
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:437
		{
			yyVAL.expectBlock = yyDollar[1].expectBlock
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:440
		{ // EXPECT($1) ... RBRACE($4)
			log.Println("Did Expect Block Hit?")
			yyVAL.expectBlock = &ExpectationsDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].node.(Node).End()),
				Expects:  yyDollar[3].expectStmtList,
			}
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:450
		{
			yyVAL.expectStmtList = []*ExpectStmt{}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:451
		{
			yyVAL.expectStmtList = yyDollar[1].expectStmtList
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:455
		{
			log.Println("Did we come here????")
			yyVAL.expectStmtList = []*ExpectStmt{yyDollar[1].expectStmt}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:459
		{
			log.Println("Why not here Did we come here????")
			cmpExp := yyDollar[3].expr.(*BinaryExpr)
			expct := &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expectStmtList[0].Pos(), yyDollar[3].expr.End()), Target: cmpExp.Left.(*MemberAccessExpr), Operator: cmpExp.Operator, Threshold: cmpExp.Right}
			yyVAL.expectStmtList = append(yyDollar[1].expectStmtList, expct)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:468
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: "==", Threshold: yyDollar[3].expr}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:469
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: "!=", Threshold: yyDollar[3].expr}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:470
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: "<", Threshold: yyDollar[3].expr}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:471
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: "<=", Threshold: yyDollar[3].expr}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:472
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: ">", Threshold: yyDollar[3].expr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:473
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: ">=", Threshold: yyDollar[3].expr}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:477
		{
			yyVAL.stmtList = yyDollar[1].stmtList
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:478
		{
			yyVAL.stmtList = []Stmt{}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:478
		{
			yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[2].stmt)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:481
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:482
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:483
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:484
		{
			yyVAL.stmt = yyDollar[1].ifStmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:485
		{
			yyVAL.stmt = yyDollar[1].waitStmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:486
		{
			yyVAL.stmt = yyDollar[1].delayStmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:487
		{
			yyVAL.stmt = yyDollar[1].goStmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:488
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:489
		{
			yyVAL.stmt = yyDollar[1].blockStmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:491
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:493
		{
			yyerrok(yylex) /* Recover on semicolon */
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:498
		{
			yyVAL.blockStmt = &BlockStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[3].node.(Node).End()), Statements: yyDollar[2].stmtList}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:504
		{ // LET($1) ...
			yyVAL.stmt = &LetStmt{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].expr.End()),
				Variable: yyDollar[2].expr.(*IdentifierExpr),
				Value:    yyDollar[4].expr,
			}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:514
		{
			// This might conflict with InstanceDecl's Assignment rule if not careful.
			// Let's prefer LetStmt for variables. This rule might be removed.
			// For now, map it to AssignmentStmt AST node used by InstanceDecl.
			yyVAL.assignStmt = &AssignmentStmt{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.Pos()),
				Var:      yyDollar[1].expr.(*IdentifierExpr),
				Value:    yyDollar[3].expr,
			}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:527
		{
			yyVAL.stmt = &ExprStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[2].node.(Node).End()), Expression: yyDollar[1].expr}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:531
		{
			yyVAL.stmt = &ReturnStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].expr.(Node).End()), ReturnValue: yyDollar[2].expr}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:532
		{
			yyVAL.stmt = &ReturnStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].node.(Node).End()), ReturnValue: nil}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:536
		{
			yyVAL.delayStmt = &DelayStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].expr.End()), Duration: yyDollar[2].expr}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:540
		{ // WAIT($1) IDENTIFIER($2) ...
			idents := yyDollar[2].identList
			endNode := idents[len(idents)-1] // End at the last identifier in the list
			yyVAL.waitStmt = &WaitStmt{NodeInfo: newNodeInfo(yyDollar[1].node.Pos(), endNode.End()), Idents: idents}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:548
		{
			yyVAL.identList = nil
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:549
		{
			yyVAL.identList = []*IdentifierExpr{yyDollar[2].expr.(*IdentifierExpr)}
			if yyDollar[3].identList != nil {
				yyVAL.identList = append(yyVAL.identList, yyDollar[3].identList...)
			}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:556
		{ // LOG($1) Expression($2) ...
			args := []Expr{yyDollar[2].expr}
			endPos := 0
			exprList := yyDollar[3].exprList
			if exprList != nil {
				endPos = exprList[len(exprList)-1].End()
			} else {
				endPos = yyDollar[2].expr.End()
			}
			if len(exprList) > 0 { // $3 is CommaExpressionListOpt -> []Expr
				args = append(args, yyDollar[3].exprList...)
			}
			yyVAL.stmt = &LogStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), endPos), Args: args}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:573
		{
			yyVAL.exprList = nil
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:574
		{
			yyVAL.exprList = []Expr{yyDollar[2].expr}
			if yyDollar[3].exprList != nil {
				yyVAL.exprList = append(yyVAL.exprList, yyDollar[3].exprList...)
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:583
		{ // IF($1) ...
			endNode := Stmt(yyDollar[3].blockStmt)
			if yyDollar[4].stmt != nil {
				endNode = yyDollar[4].stmt
			} // End of Else block/IfStmt
			yyVAL.ifStmt = &IfStmt{
				NodeInfo:  newNodeInfo(yyDollar[1].node.(Node).Pos(), endNode.End()),
				Condition: yyDollar[2].expr,
				Then:      yyDollar[3].blockStmt,
				Else:      yyDollar[4].stmt,
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:596
		{
			yyVAL.stmt = nil
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:597
		{
			yyVAL.stmt = yyDollar[2].ifStmt
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:598
		{
			yyVAL.stmt = yyDollar[2].blockStmt
		}
	case 98:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:602
		{ // DISTRIBUTE($1) ... RBRACE($6)
			yyVAL.distributeStmt = &DistributeStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[6].node.(Node).End()), Total: yyDollar[2].expr, Cases: yyDollar[4].distributeCaseList, DefaultCase: yyDollar[5].defaultCase}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:607
		{
			yyVAL.expr = nil
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:607
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:610
		{
			yyVAL.distributeCaseList = []*DistributeCase{}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:611
		{
			yyVAL.distributeCaseList = append(yyDollar[1].distributeCaseList, yyDollar[2].distributeCase)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:615
		{
			yyVAL.distributeCase = &DistributeCase{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].blockStmt.End()), Probability: yyDollar[1].expr, Body: yyDollar[3].blockStmt}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:619
		{
			yyVAL.defaultCase = nil
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:620
		{
			yyVAL.defaultCase = yyDollar[1].defaultCase
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:624
		{
			yyVAL.defaultCase = &DefaultCase{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[3].blockStmt.End()), Body: yyDollar[3].blockStmt}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:628
		{ // GO($1) ... BlockStmt($4)
			yyVAL.goStmt = &GoStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].blockStmt.End()), VarName: yyDollar[2].expr.(*IdentifierExpr), Stmt: yyDollar[4].blockStmt}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:631
		{ // GO($1) BlockStmt($2)
			yyVAL.goStmt = &GoStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].blockStmt.End()), VarName: nil, Stmt: yyDollar[2].blockStmt}
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:634
		{
			yyerror(yylex, fmt.Sprintf("`go` currently only supports assigning blocks, not expressions, at pos %d", yyDollar[1].node.(Node).Pos()))
			yyVAL.goStmt = &GoStmt{}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:641
		{
			yyerror(yylex, "Switch statement not defined")
			yyVAL.stmt = nil
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:644
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:645
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:646
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:650
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:651
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:654
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:655
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:656
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:657
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:658
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:659
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:660
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:664
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:665
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:666
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:669
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:670
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:671
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:672
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:675
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:677
		{
			yyVAL.expr = &UnaryExpr{NodeInfo: newNodeInfo(yyDollar[1].tokenNode.Pos(), yyDollar[2].expr.(Node).End()), Operator: yyDollar[1].tokenNode.String(), Right: yyDollar[2].expr}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:678
		{
			yyVAL.expr = &UnaryExpr{NodeInfo: newNodeInfo(yyDollar[1].tokenNode.Pos(), yyDollar[2].expr.(Node).End()), Operator: yyDollar[1].tokenNode.String(), Right: yyDollar[2].expr}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:682
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:683
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:684
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:685
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:686
		{
			yyVAL.expr = yyDollar[1].distributeExpr
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:688
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:692
		{
			// yylex.(*Lexer).lval)
			yyVAL.expr = yyDollar[1].expr
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:696
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:697
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:698
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:699
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:703
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			yyVAL.expr = &MemberAccessExpr{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()),
				Receiver: yyDollar[1].expr,
				Member:   yyDollar[3].expr.(*IdentifierExpr),
			}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:713
		{ // PrimaryExpr($1) LPAREN($2) RPAREN($3)
			yyVAL.expr = &CallExpr{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].node.(Node).End()),
				Function: yyDollar[1].expr,
				Args:     []Expr{},
			}
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:720
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := yyDollar[4].node.(Node) // End at RPAREN
			if len(yyDollar[3].exprList) > 0 {
				exprList := yyDollar[3].exprList
				endNode = exprList[len(exprList)-1].(Node) // End at last arg
			}
			yyVAL.expr = &CallExpr{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), endNode.End()),
				Function: yyDollar[1].expr,
				Args:     yyDollar[3].exprList,
			}
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:735
		{
			yyVAL.exprList = []Expr{}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:736
		{
			yyVAL.exprList = yyDollar[1].exprList
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:740
		{
			yyVAL.exprList = []Expr{yyDollar[1].expr}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:741
		{
			yyVAL.exprList = append(yyDollar[1].exprList, yyDollar[3].expr)
		}
	case 151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:746
		{
			yyVAL.distributeExpr = &DistributeExpr{TotalProb: yyDollar[2].expr, Cases: yyDollar[4].distributeExprCaseList, Default: yyDollar[5].expr} /* TODO: Pos */
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:752
		{
			yyVAL.distributeExprCaseList = []*DistributeExprCase{}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:753
		{
			yyVAL.distributeExprCaseList = append(yyDollar[1].distributeExprCaseList, yyDollar[2].distributeExprCase)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:757
		{
			// Need to wrap in DistributeExprCase AST node
			yyVAL.distributeExprCase = &DistributeExprCase{Probability: yyDollar[1].expr, Body: yyDollar[3].expr} /* TODO: Pos */
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:764
		{
			yyVAL.expr = nil
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:765
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:769
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:774
		{
			yyerror(yylex, "Switch expression not fully defined yet")
			yyVAL.expr = nil
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:781
		{
			yyerror(yylex, "Case expression not fully defined yet")
			yyVAL.expr = nil
		}
	}
	goto yystack /* stack new state and value */
}
