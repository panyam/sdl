// Code generated by goyacc -o parser.go -p yy grammar.y. DO NOT EDIT.

//line grammar.y:2
package parser

import __yyfmt__ "fmt"

//line grammar.y:2

import (
	// "reflect"
	"fmt"
	gfn "github.com/panyam/goutils/fn"
	"io"
	"log"
)

// Function to be called by yyParse on error.
// Needs access to the lexer passed via %parse-param.
func yyerror(yyl yyLexer, msg string) {
	lexer := yyl.(LexerInterface)
	// line, col := lexer.Position()
	// log.Println("YYERROR MSG = ", msg)
	// errMsg := fmt.Sprintf("Error at Line %d, Col %d, Near ('%s'): %s", line, col, /* tokenString(lexer.LastToken()),*/ lexer.Text(), msg) // Added tokenString helper call
	lexer.Error(msg)
}

func yyerrok(lexer yyLexer) {
	log.Println("Error here... not sure how to recover")
	///ErrFlag = 0
}

//line grammar.y:31
type yySymType struct {
	yys int
	// Basic types from lexer
	sval string // Holds raw string values like identifiers, literal content

	// AST Nodes (using pointers) - these should have NodeInfo
	file               *File
	componentDecl      *ComponentDecl
	systemDecl         *SystemDecl
	node               Node      // Generic interface for lists and for accessing NodeInfo
	tokenNode          TokenNode // Generic interface for lists and for accessing NodeInfo
	expr               Expr
	stmt               Stmt
	typeName           *TypeName
	paramDecl          *ParamDecl
	usesDecl           *UsesDecl
	methodDef          *MethodDecl
	instanceDecl       *InstanceDecl
	analyzeDecl        *AnalyzeDecl
	expectBlock        *ExpectationsDecl
	expectStmt         *ExpectStmt
	blockStmt          *BlockStmt
	ifStmt             *IfStmt
	distributeStmt     *DistributeStmt
	distributeCase     *DistributeCase
	distributeExpr     *DistributeExpr
	distributeExprCase *DistributeExprCase
	defaultCase        *DefaultCase
	goStmt             *GoStmt
	assignStmt         *AssignmentStmt
	optionsDecl        *OptionsDecl
	enumDecl           *EnumDecl
	importDecl         *ImportDecl
	waitStmt           *WaitStmt
	delayStmt          *DelayStmt

	// Slices for lists
	nodeList               []Node
	compBodyItem           ComponentDeclBodyItem
	compBodyItemList       []ComponentDeclBodyItem
	sysBodyItemList        []SystemDeclBodyItem
	paramList              []*ParamDecl
	assignList             []*AssignmentStmt
	exprList               []Expr
	stmtList               []Stmt
	identList              []*IdentifierExpr
	distributeCaseList     []*DistributeCase
	distributeExprCaseList []*DistributeExprCase
	expectStmtList         []*ExpectStmt
	methodSigItemList      []*MethodDecl

	// Add field to store position for simple tokens if needed
	// posInfo     NodeInfo
}

const SYSTEM = 57346
const USES = 57347
const METHOD = 57348
const INSTANCE = 57349
const ANALYZE = 57350
const EXPECT = 57351
const LET = 57352
const IF = 57353
const ELSE = 57354
const DISTRIBUTE = 57355
const DEFAULT = 57356
const RETURN = 57357
const DELAY = 57358
const WAIT = 57359
const GO = 57360
const LOG = 57361
const SWITCH = 57362
const CASE = 57363
const TRUE = 57364
const FALSE = 57365
const FOR = 57366
const USE = 57367
const NATIVE = 57368
const LBRACE = 57369
const RBRACE = 57370
const OPTIONS = 57371
const ENUM = 57372
const COMPONENT = 57373
const PARAM = 57374
const IMPORT = 57375
const ASSIGN = 57376
const COLON = 57377
const LPAREN = 57378
const RPAREN = 57379
const COMMA = 57380
const DOT = 57381
const ARROW = 57382
const PLUS_ASSIGN = 57383
const MINUS_ASSIGN = 57384
const MUL_ASSIGN = 57385
const DIV_ASSIGN = 57386
const LET_ASSIGN = 57387
const SEMICOLON = 57388
const INT = 57389
const FLOAT = 57390
const BOOL = 57391
const STRING = 57392
const DURATION = 57393
const NOT = 57394
const MINUS = 57395
const IDENTIFIER = 57396
const INT_LITERAL = 57397
const FLOAT_LITERAL = 57398
const STRING_LITERAL = 57399
const BOOL_LITERAL = 57400
const DURATION_LITERAL = 57401
const OR = 57402
const AND = 57403
const EQ = 57404
const NEQ = 57405
const LT = 57406
const LTE = 57407
const GT = 57408
const GTE = 57409
const PLUS = 57410
const MUL = 57411
const DIV = 57412
const MOD = 57413
const UMINUS = 57414

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SYSTEM",
	"USES",
	"METHOD",
	"INSTANCE",
	"ANALYZE",
	"EXPECT",
	"LET",
	"IF",
	"ELSE",
	"DISTRIBUTE",
	"DEFAULT",
	"RETURN",
	"DELAY",
	"WAIT",
	"GO",
	"LOG",
	"SWITCH",
	"CASE",
	"TRUE",
	"FALSE",
	"FOR",
	"USE",
	"NATIVE",
	"LBRACE",
	"RBRACE",
	"OPTIONS",
	"ENUM",
	"COMPONENT",
	"PARAM",
	"IMPORT",
	"ASSIGN",
	"COLON",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"DOT",
	"ARROW",
	"PLUS_ASSIGN",
	"MINUS_ASSIGN",
	"MUL_ASSIGN",
	"DIV_ASSIGN",
	"LET_ASSIGN",
	"SEMICOLON",
	"INT",
	"FLOAT",
	"BOOL",
	"STRING",
	"DURATION",
	"NOT",
	"MINUS",
	"IDENTIFIER",
	"INT_LITERAL",
	"FLOAT_LITERAL",
	"STRING_LITERAL",
	"BOOL_LITERAL",
	"DURATION_LITERAL",
	"OR",
	"AND",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"PLUS",
	"MUL",
	"DIV",
	"MOD",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar.y:829
// --- Go Code Section ---

// Interface for the lexer required by the parser.
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
	Pos() int                  // Start byte position of the last token read
	End() int                  // End byte position of the last token read
	Text() string              // Text of the last token read
	Position() (line, col int) // Added: Get line/col of last token start
	LastToken() int            // Added: Get the token code that was just lexed
}

// Parse takes an input stream and attempts to parse it according to the SDL grammar. 22222
// It returns the root of the Abstract Syntax Tree (*File) if successful, or an error.
func Parse(input io.Reader) (*Lexer, *File, error) {
	// Reset global result before parsing
	lexer := NewLexer(input)
	// Set yyDebug = 3 for verbose parser debugging output
	// yyDebug = 3
	resultCode := yyParse(lexer) // Call the LALR parser generated by goyacc

	if resultCode != 0 {
		// A syntax error occurred. The lexer's Error method should have been called
		// and stored the error message.
		if lexer.lastError != nil {
			return lexer, nil, lexer.lastError
		}
		// Fallback error message if lexer didn't store one
		return lexer, nil, fmt.Errorf("syntax error near byte %d", lexer.Pos())
	}

	// Parsing succeeded
	if lexer.parseResult == nil {
		// This indicates a potential issue with the grammar's top rule action
		return lexer, nil, fmt.Errorf("parsing finished successfully, but no AST result was produced")
	}

	return lexer, lexer.parseResult, nil
}

// The parser expects the lexer variable to be named yyLex.
// We can satisfy this by creating a global or passing it via yyParseWithLexer.
// Using yyParseWithLexer is cleaner.

// Example main function (optional, for standalone testing)
/*
func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: parser <input_file>")
		return
	}
	filePath := os.Args[1]
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Printf("Error opening file %s: %v\n", filePath, err)
		return
	}
	defer file.Close()

	astRoot, err := Parse(file)
	if err != nil {
		fmt.Printf("Parsing failed: %v\n", err)
		// Error message should ideally include line/column from lexer
	} else {
		fmt.Println("Parsing successful!")
		// Print the AST (implement String() methods for AST nodes for nice output)
		fmt.Println(astRoot.String())
	}
}
*/

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	28, 75,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 301

var yyAct = [...]uint8{
	53, 225, 138, 44, 49, 181, 152, 66, 179, 64,
	67, 63, 87, 114, 51, 123, 124, 125, 122, 113,
	20, 65, 52, 55, 226, 82, 60, 54, 57, 56,
	58, 59, 61, 121, 141, 142, 144, 143, 145, 60,
	24, 140, 182, 83, 183, 176, 169, 148, 76, 146,
	137, 82, 210, 108, 84, 103, 105, 101, 107, 93,
	110, 92, 112, 109, 69, 70, 72, 77, 78, 79,
	80, 81, 91, 122, 76, 82, 21, 130, 19, 17,
	128, 129, 115, 116, 117, 118, 119, 120, 121, 60,
	69, 70, 72, 77, 78, 79, 80, 81, 76, 136,
	106, 111, 16, 203, 102, 100, 219, 218, 127, 41,
	150, 126, 191, 192, 69, 70, 72, 77, 78, 79,
	80, 81, 82, 153, 157, 156, 198, 134, 172, 164,
	165, 6, 82, 175, 166, 167, 168, 158, 159, 160,
	161, 162, 163, 133, 211, 76, 170, 197, 98, 194,
	184, 173, 188, 134, 189, 76, 187, 177, 147, 132,
	60, 69, 70, 72, 77, 78, 79, 80, 81, 231,
	97, 69, 70, 72, 77, 78, 79, 80, 81, 196,
	141, 142, 144, 143, 145, 199, 195, 140, 215, 200,
	201, 202, 178, 205, 209, 151, 204, 149, 82, 15,
	213, 229, 212, 217, 214, 30, 55, 36, 37, 190,
	154, 135, 89, 60, 220, 39, 222, 216, 221, 227,
	228, 76, 60, 11, 174, 155, 230, 27, 9, 186,
	26, 104, 232, 10, 35, 90, 52, 69, 70, 72,
	77, 78, 79, 80, 81, 9, 88, 23, 12, 13,
	10, 99, 14, 47, 94, 12, 22, 18, 34, 207,
	206, 4, 193, 75, 131, 85, 86, 223, 224, 96,
	33, 32, 139, 180, 31, 171, 208, 73, 74, 71,
	68, 62, 25, 46, 45, 50, 48, 43, 42, 185,
	40, 8, 7, 38, 28, 29, 5, 3, 95, 2,
	1,
}

var yyPact = [...]int16{
	-1000, -1000, 219, -1000, -1000, -1000, -1000, -1000, -1000, 168,
	48, 25, 230, 24, -37, 22, 229, 220, -1000, 203,
	-1000, 200, 202, -1000, 187, 12, 0, 240, 184, 202,
	-1000, -1000, -1000, -1000, -1000, 18, 7, 5, 226, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 59, 3, 58, 185, 119, 0, 119, -1, 119,
	-1000, 119, -41, -48, -1000, 20, -54, -1000, 72, 119,
	119, -1000, -1000, -1000, -1000, -1000, 119, -1000, -1000, -1000,
	-1000, -1000, 123, 115, -1000, 183, 240, -1000, -4, -1000,
	-1000, -13, -5, 122, -1000, -1000, -1000, -1000, -1000, -7,
	-1000, 163, -1000, -1000, -1000, 186, 89, -1000, 161, -1000,
	85, 182, 198, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, -8, 109, -1000, -1000,
	114, 197, 119, -1000, -9, -1000, -1000, 121, 158, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -12, -10, 119,
	217, 62, -1000, 119, -1000, 181, -48, -1000, -35, -35,
	-35, -35, -35, -35, -54, -54, -1000, -1000, -1000, -1000,
	-1000, 75, -1000, -1000, -1000, 112, -1000, -12, 119, 110,
	88, -1000, -13, 155, -1000, -1000, 195, -1000, 57, 85,
	-1000, -1000, 119, 38, -1000, 107, -1000, 133, -12, 154,
	190, -1000, -1000, -1000, -1000, -1000, 175, -1000, -1000, 67,
	66, -13, -1000, 186, -1000, 119, -30, -1000, 119, 119,
	-1000, -1000, -1000, 173, -30, -1000, 135, -1000, -1000, -1000,
	-1000, 119, -1000,
}

var yyPgo = [...]int16{
	0, 300, 299, 298, 297, 258, 296, 205, 295, 294,
	293, 131, 292, 43, 292, 291, 290, 289, 109, 288,
	287, 286, 285, 284, 283, 283, 4, 40, 282, 0,
	281, 11, 9, 21, 7, 10, 280, 279, 278, 277,
	277, 277, 276, 275, 275, 6, 274, 5, 273, 8,
	2, 272, 271, 270, 12, 269, 1, 268, 267, 267,
	267, 267, 267, 267, 267, 266, 265, 3, 265, 264,
	264, 264, 264, 264, 263, 262, 260, 259, 253,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 4, 4, 4, 4, 4, 11,
	12, 13, 13, 15, 5, 5, 66, 66, 65, 65,
	54, 54, 9, 9, 8, 8, 7, 7, 7, 7,
	46, 46, 50, 50, 51, 51, 51, 51, 51, 52,
	53, 53, 49, 49, 48, 48, 47, 47, 6, 3,
	3, 3, 10, 10, 55, 55, 58, 58, 57, 57,
	56, 59, 61, 61, 60, 64, 64, 63, 63, 62,
	62, 62, 62, 62, 62, 27, 28, 28, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 26,
	18, 25, 19, 20, 20, 24, 23, 14, 14, 21,
	45, 45, 67, 17, 17, 17, 68, 69, 69, 71,
	71, 70, 73, 73, 72, 78, 78, 78, 22, 29,
	30, 30, 31, 31, 32, 32, 32, 32, 32, 32,
	32, 33, 33, 33, 34, 34, 34, 34, 35, 35,
	35, 36, 36, 36, 36, 36, 36, 37, 37, 37,
	37, 37, 39, 38, 38, 44, 44, 43, 43, 74,
	75, 75, 77, 76, 76, 42, 40, 41,
}

var yyR2 = [...]int8{
	0, 1, 0, 2, 1, 1, 1, 1, 1, 4,
	5, 1, 3, 2, 6, 5, 0, 1, 1, 2,
	5, 6, 0, 1, 1, 2, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 3,
	6, 7, 0, 1, 1, 3, 2, 4, 5, 1,
	1, 1, 0, 2, 3, 7, 0, 1, 1, 2,
	3, 5, 0, 1, 4, 0, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 3, 2, 2, 2, 2, 2, 0, 3, 3,
	0, 3, 4, 0, 2, 2, 6, 0, 3, 0,
	2, 3, 0, 1, 3, 4, 2, 5, 4, 1,
	1, 3, 1, 3, 1, 3, 3, 3, 3, 3,
	3, 1, 3, 3, 1, 3, 3, 3, 1, 2,
	2, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 4, 0, 1, 1, 3, 6,
	0, 2, 3, 0, 1, 3, 4, 4,
}

var yyChk = [...]int16{
	-1000, -1, -2, -4, -5, -6, -11, -12, -15, 26,
	31, 4, 29, 30, 33, 31, 54, 54, 27, 54,
	57, 54, 27, 27, -27, -28, 27, 27, -9, -8,
	-7, -46, -52, -53, -5, 32, 5, 6, -10, 28,
	-16, -18, -19, -20, -67, -23, -24, -78, -21, -26,
	-22, 2, 10, -29, 15, 11, 17, 16, 18, 19,
	27, 20, -30, -31, -32, -33, -34, -35, -36, 52,
	53, -37, 54, -39, -38, -74, 36, 55, 56, 57,
	58, 59, 13, -13, 54, -66, -65, -54, 6, 28,
	-7, 54, 54, 54, 28, -3, -55, -11, -18, 25,
	46, 54, 46, -29, 46, -29, -13, -29, 54, -26,
	-29, -27, -29, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 53, 69, 70, 71, 39, 36, -35, -35,
	-29, -69, 36, 28, 38, 28, -54, 54, -50, -51,
	54, 47, 48, 50, 49, 51, 54, 36, 54, 34,
	-26, 34, -45, 38, 28, 27, -31, -32, -33, -33,
	-33, -33, -33, -33, -34, -34, -35, -35, -35, 54,
	37, -43, -29, 37, 27, -29, 54, 36, 34, -49,
	-48, -47, 54, 54, -29, -17, 12, -26, -29, -29,
	28, 37, 38, -75, 37, -49, -29, 37, 38, -50,
	34, -67, -26, 46, -45, -29, -76, -77, -42, -29,
	14, 37, -26, -50, -47, 34, 27, 28, 40, 40,
	-50, -26, -29, -58, -57, -56, 54, -29, -29, 28,
	-56, 34, -29,
}

var yyDef = [...]int16{
	2, -2, 1, 3, 4, 5, 6, 7, 8, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	13, 0, 22, 52, 0, -2, 0, 16, 0, 23,
	24, 26, 27, 28, 29, 0, 0, 0, 0, 9,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 119, 120, 122, 124, 131, 134, 138, 0,
	0, 141, 142, 143, 144, 145, 0, 147, 148, 149,
	150, 151, 107, 0, 11, 0, 17, 18, 0, 15,
	25, 0, 0, 0, 48, 53, 49, 50, 51, 0,
	88, 0, 92, 93, 94, 0, 96, 95, 0, 116,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 140,
	0, 0, 0, 10, 0, 14, 19, 0, 30, 32,
	33, 34, 35, 36, 37, 38, 39, 42, 0, 0,
	103, 0, 99, 0, 89, 0, 121, 123, 125, 126,
	127, 128, 129, 130, 132, 133, 135, 136, 137, 152,
	153, 0, 157, 146, 160, 0, 12, 42, 0, 0,
	43, 44, 0, 54, 90, 102, 0, 115, 0, 100,
	118, 154, 0, 163, 108, 0, 31, 0, 0, 46,
	0, 104, 105, 117, 101, 158, 0, 161, 164, 0,
	0, 20, 40, 0, 45, 0, 56, 159, 0, 0,
	21, 41, 47, 0, 57, 58, 0, 162, 165, 55,
	59, 0, 60,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:162
		{
			ni := NodeInfo{}
			if len(yyDollar[1].nodeList) > 0 {
				ni.StartPos = yyDollar[1].nodeList[0].Pos()
				ni.StopPos = yyDollar[1].nodeList[len(yyDollar[1].nodeList)-1].End()
			}
			yylex.(*Lexer).parseResult = &File{NodeInfo: ni, Declarations: yyDollar[1].nodeList}
			// $$ = &File{NodeInfo: ni, Declarations: $1}
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:174
		{
			yyVAL.nodeList = []Node{}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:175
		{
			yyVAL.nodeList = append(yyDollar[1].nodeList, yyDollar[2].node)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:179
		{
			yyVAL.node = yyDollar[1].componentDecl
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:180
		{
			yyVAL.node = yyDollar[1].systemDecl
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:181
		{
			yyVAL.node = yyDollar[1].optionsDecl
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:182
		{
			yyVAL.node = yyDollar[1].enumDecl
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:183
		{
			yyVAL.node = yyDollar[1].importDecl
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:187
		{ // OPTIONS ($1) LBRACE ($2) StmtList ($3) RBRACE ($4)
			// Assume OPTIONS token itself doesn't carry complex NodeInfo from lexer for this example.
			// Span from LBRACE to RBRACE for body. If StmtList is empty, Body.NodeInfo might be tricky.
			/*
			   bodyStart := $2.(Node).Pos() // Position of LBRACE (assuming lexer returns it as Node)
			   bodyEnd := $4.(Node).Pos()   // Position of RBRACE (actually its start, use .End() for full span)
			   if len($3) > 0 { // If StmtList is not empty
			       bodyStart = $3[0].Pos()
			       bodyEnd = $3[len($3)-1].End()
			   }
			*/
			yyVAL.optionsDecl = &OptionsDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].node.(Node).End()), // Pos of OPTIONS, End of RBRACE
				Body: &BlockStmt{
					NodeInfo:   newNodeInfo(yyDollar[2].node.(Node).Pos(), yyDollar[4].node.(Node).End()),
					Statements: yyDollar[3].stmtList,
				},
			}
		}
	case 10:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:209
		{ // ENUM($1) IDENTIFIER($2) ... RBRACE($5)
			yyVAL.enumDecl = &EnumDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].node.(Node).End()),
				NameNode:   yyDollar[2].expr.(*IdentifierExpr), // $2 is an IdentifierExpr from lexer, has Pos/End
				ValuesNode: yyDollar[4].identList,
			}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:219
		{
			yyVAL.identList = []*IdentifierExpr{yyDollar[1].expr.(*IdentifierExpr)}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:220
		{
			yyVAL.identList = append(yyDollar[1].identList, yyDollar[3].expr.(*IdentifierExpr))
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:224
		{ // IMPORT($1) STRING_LITERAL($2)
			yyVAL.importDecl = &ImportDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].expr.End()),
				Path:     yyDollar[2].expr.(*LiteralExpr), // $2 is a LiteralExpr from lexer
			}
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:233
		{ // COMPONENT($1) ... RBRACE($5)
			yyVAL.componentDecl = &ComponentDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[6].node.(Node).End()),
				NameNode: yyDollar[3].expr.(*IdentifierExpr),
				Body:     gfn.Map(yyDollar[5].methodSigItemList, func(m *MethodDecl) ComponentDeclBodyItem { return m }),
			}
		}
	case 15:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:240
		{ // COMPONENT($1) ... RBRACE($5)
			yyVAL.componentDecl = &ComponentDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].node.(Node).End()),
				NameNode: yyDollar[2].expr.(*IdentifierExpr),
				Body:     yyDollar[4].compBodyItemList,
			}
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:250
		{
			yyVAL.methodSigItemList = []*MethodDecl{}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:251
		{
			yyVAL.methodSigItemList = yyDollar[1].methodSigItemList
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:255
		{
			yyVAL.methodSigItemList = []*MethodDecl{yyDollar[1].methodDef}
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:256
		{
			yyVAL.methodSigItemList = append(yyDollar[1].methodSigItemList, yyDollar[2].methodDef)
		}
	case 20:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:259
		{ // METHOD($1) ... BlockStmt($6)
			yyVAL.methodDef = &MethodDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].node.End()),
				NameNode:   yyDollar[2].expr.(*IdentifierExpr),
				Parameters: yyDollar[4].paramList,
			}
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:266
		{ // METHOD($1) ... BlockStmt($8)
			yyVAL.methodDef = &MethodDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[6].typeName.End()),
				NameNode:   yyDollar[2].expr.(*IdentifierExpr),
				Parameters: yyDollar[4].paramList,
				ReturnType: yyDollar[6].typeName,
			}
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:277
		{
			yyVAL.compBodyItemList = []ComponentDeclBodyItem{}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:278
		{
			yyVAL.compBodyItemList = yyDollar[1].compBodyItemList
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:282
		{
			yyVAL.compBodyItemList = []ComponentDeclBodyItem{yyDollar[1].compBodyItem}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:283
		{
			yyVAL.compBodyItemList = append(yyDollar[1].compBodyItemList, yyDollar[2].compBodyItem)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:287
		{
			yyVAL.compBodyItem = yyDollar[1].paramDecl
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:288
		{
			yyVAL.compBodyItem = yyDollar[1].usesDecl
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:289
		{
			yyVAL.compBodyItem = yyDollar[1].methodDef
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:290
		{
			yyVAL.compBodyItem = yyDollar[1].componentDecl
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:294
		{ // PARAM($1) ...
			yyVAL.paramDecl = &ParamDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[3].typeName.End()),
				Name:     yyDollar[2].expr.(*IdentifierExpr),
				Type:     yyDollar[3].typeName, // TypeName also needs to have NodeInfo
			}
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:301
		{ // PARAM($1) ...
			yyVAL.paramDecl = &ParamDecl{
				NodeInfo:     newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].expr.End()),
				Name:         yyDollar[2].expr.(*IdentifierExpr),
				Type:         yyDollar[3].typeName,
				DefaultValue: yyDollar[5].expr,
			}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:312
		{
			yyVAL.typeName = yyDollar[1].typeName
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:313
		{
			identNode := yyDollar[1].expr.(Node) // $1 is IDENTIFIER token (IdentifierExpr)
			yyVAL.typeName = &TypeName{
				NodeInfo:     identNode.(*IdentifierExpr).NodeInfo,
				EnumTypeName: identNode.(*IdentifierExpr).Name,
			}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:325
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].tokenNode.NodeInfo, PrimitiveTypeName: "int"}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:326
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].tokenNode.NodeInfo, PrimitiveTypeName: "float"}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:327
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].tokenNode.NodeInfo, PrimitiveTypeName: "string"}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:328
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].tokenNode.NodeInfo, PrimitiveTypeName: "bool"}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:329
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].tokenNode.NodeInfo, PrimitiveTypeName: "duration"}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:337
		{ // USES($1) ...
			yyVAL.usesDecl = &UsesDecl{
				NodeInfo:      newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[3].expr.End()),
				NameNode:      yyDollar[2].expr.(*IdentifierExpr),
				ComponentNode: yyDollar[3].expr.(*IdentifierExpr),
			}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:349
		{ // METHOD($1) ... BlockStmt($6)
			yyVAL.methodDef = &MethodDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[6].blockStmt.End()),
				NameNode:   yyDollar[2].expr.(*IdentifierExpr),
				Parameters: yyDollar[4].paramList,
				Body:       yyDollar[6].blockStmt,
			}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:357
		{ // METHOD($1) ... BlockStmt($8)
			yyVAL.methodDef = &MethodDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[7].blockStmt.End()),
				NameNode:   yyDollar[2].expr.(*IdentifierExpr),
				Parameters: yyDollar[4].paramList,
				ReturnType: yyDollar[6].typeName,
				Body:       yyDollar[7].blockStmt,
			}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:369
		{
			yyVAL.paramList = []*ParamDecl{}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:370
		{
			yyVAL.paramList = yyDollar[1].paramList
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:374
		{
			yyVAL.paramList = []*ParamDecl{yyDollar[1].paramDecl}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:375
		{
			yyVAL.paramList = append(yyDollar[1].paramList, yyDollar[3].paramDecl)
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:379
		{ // PARAM($1) ...
			yyVAL.paramDecl = &ParamDecl{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[2].typeName.End()),
				Name:     yyDollar[1].expr.(*IdentifierExpr),
				Type:     yyDollar[2].typeName, // TypeName also needs to have NodeInfo
			}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:386
		{ // PARAM($1) ...
			yyVAL.paramDecl = &ParamDecl{
				NodeInfo:     newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[4].expr.End()),
				Name:         yyDollar[1].expr.(*IdentifierExpr),
				Type:         yyDollar[2].typeName,
				DefaultValue: yyDollar[4].expr,
			}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:398
		{ // SYSTEM($1) ... RBRACE($5)
			yyVAL.systemDecl = &SystemDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].node.(Node).End()),
				NameNode: yyDollar[2].expr.(*IdentifierExpr),
				Body:     yyDollar[4].sysBodyItemList,
			}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:409
		{
			yyVAL.node = yyDollar[1].instanceDecl
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:411
		{
			yyVAL.node = yyDollar[1].optionsDecl
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:412
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:416
		{
			yyVAL.sysBodyItemList = []SystemDeclBodyItem{}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:417
		{
			yyVAL.sysBodyItemList = append(yyDollar[1].sysBodyItemList, yyDollar[2].node.(SystemDeclBodyItem))
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:421
		{ // IDENTIFIER($1) ...
			yyVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[3].expr.End()),
				NameNode:      yyDollar[2].expr.(*IdentifierExpr),
				ComponentType: yyDollar[3].expr.(*IdentifierExpr),
				Overrides:     []*AssignmentStmt{},
			}
		}
	case 55:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:429
		{ // IDENTIFIER($1) ...
			yyVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[7].node.End()),
				NameNode:      yyDollar[2].expr.(*IdentifierExpr),
				ComponentType: yyDollar[3].expr.(*IdentifierExpr),
				Overrides:     yyDollar[6].assignList,
			}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:440
		{
			yyVAL.assignList = []*AssignmentStmt{}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:441
		{
			yyVAL.assignList = yyDollar[1].assignList
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:445
		{
			yyVAL.assignList = []*AssignmentStmt{yyDollar[1].assignStmt}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:446
		{
			yyVAL.assignList = append(yyDollar[1].assignList, yyDollar[2].assignStmt)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:450
		{ // IDENTIFIER($1) ...
			yyVAL.assignStmt = &AssignmentStmt{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()),
				Var:      yyDollar[1].expr.(*IdentifierExpr),
				Value:    yyDollar[3].expr,
			}
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:460
		{ // ANALYZE($1) ...
			callExpr, ok := yyDollar[4].expr.(*CallExpr)
			if !ok {
				yyerror(yylex, fmt.Sprintf("analyze target must be a method call, found %T at pos %d", yyDollar[4].expr, yyDollar[4].expr.(Node).Pos()))
			}
			endPos := 0
			if yyDollar[5].expectBlock != nil {
				endPos = yyDollar[5].expectBlock.End()
			} else {
				endPos = yyDollar[4].expr.End()
			}
			yyVAL.analyzeDecl = &AnalyzeDecl{
				NodeInfo:     newNodeInfo(yyDollar[1].node.(Node).Pos(), endPos),
				Name:         yyDollar[2].expr.(*IdentifierExpr),
				Target:       callExpr,
				Expectations: yyDollar[5].expectBlock,
			}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:480
		{
			yyVAL.expectBlock = nil
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:480
		{
			yyVAL.expectBlock = yyDollar[1].expectBlock
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:483
		{ // EXPECT($1) ... RBRACE($4)
			log.Println("Did Expect Block Hit?")
			yyVAL.expectBlock = &ExpectationsDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].node.(Node).End()),
				Expects:  yyDollar[3].expectStmtList,
			}
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:493
		{
			yyVAL.expectStmtList = []*ExpectStmt{}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:494
		{
			yyVAL.expectStmtList = yyDollar[1].expectStmtList
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:498
		{
			log.Println("Did we come here????")
			yyVAL.expectStmtList = []*ExpectStmt{yyDollar[1].expectStmt}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:502
		{
			log.Println("Why not here Did we come here????")
			cmpExp := yyDollar[3].expr.(*BinaryExpr)
			expct := &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expectStmtList[0].Pos(), yyDollar[3].expr.End()), Target: cmpExp.Left.(*MemberAccessExpr), Operator: cmpExp.Operator, Threshold: cmpExp.Right}
			yyVAL.expectStmtList = append(yyDollar[1].expectStmtList, expct)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:511
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: "==", Threshold: yyDollar[3].expr}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:512
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: "!=", Threshold: yyDollar[3].expr}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:513
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: "<", Threshold: yyDollar[3].expr}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:514
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: "<=", Threshold: yyDollar[3].expr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:515
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: ">", Threshold: yyDollar[3].expr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:516
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: ">=", Threshold: yyDollar[3].expr}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:520
		{
			yyVAL.stmtList = yyDollar[1].stmtList
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:521
		{
			yyVAL.stmtList = []Stmt{}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:521
		{
			yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[2].stmt)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:524
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:525
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:526
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:527
		{
			yyVAL.stmt = yyDollar[1].ifStmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:528
		{
			yyVAL.stmt = yyDollar[1].waitStmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:529
		{
			yyVAL.stmt = yyDollar[1].delayStmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:530
		{
			yyVAL.stmt = yyDollar[1].goStmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:531
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:532
		{
			yyVAL.stmt = yyDollar[1].blockStmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:534
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:536
		{
			yyerrok(yylex) /* Recover on semicolon */
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:541
		{
			yyVAL.blockStmt = &BlockStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[3].node.(Node).End()), Statements: yyDollar[2].stmtList}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:547
		{ // LET($1) ...
			yyVAL.stmt = &LetStmt{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].expr.End()),
				Variable: yyDollar[2].expr.(*IdentifierExpr),
				Value:    yyDollar[4].expr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:557
		{
			// This might conflict with InstanceDecl's Assignment rule if not careful.
			// Let's prefer LetStmt for variables. This rule might be removed.
			// For now, map it to AssignmentStmt AST node used by InstanceDecl.
			yyVAL.assignStmt = &AssignmentStmt{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.Pos()),
				Var:      yyDollar[1].expr.(*IdentifierExpr),
				Value:    yyDollar[3].expr,
			}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:570
		{
			yyVAL.stmt = &ExprStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[2].node.(Node).End()), Expression: yyDollar[1].expr}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:574
		{
			yyVAL.stmt = &ReturnStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].expr.(Node).End()), ReturnValue: yyDollar[2].expr}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:575
		{
			yyVAL.stmt = &ReturnStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].node.(Node).End()), ReturnValue: nil}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:579
		{
			yyVAL.delayStmt = &DelayStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].expr.End()), Duration: yyDollar[2].expr}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:583
		{ // WAIT($1) IDENTIFIER($2) ...
			idents := yyDollar[2].identList
			endNode := idents[len(idents)-1] // End at the last identifier in the list
			yyVAL.waitStmt = &WaitStmt{NodeInfo: newNodeInfo(yyDollar[1].node.Pos(), endNode.End()), Idents: idents}
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:591
		{
			yyVAL.identList = nil
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:592
		{
			yyVAL.identList = []*IdentifierExpr{yyDollar[2].expr.(*IdentifierExpr)}
			if yyDollar[3].identList != nil {
				yyVAL.identList = append(yyVAL.identList, yyDollar[3].identList...)
			}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:599
		{ // LOG($1) Expression($2) ...
			args := []Expr{yyDollar[2].expr}
			endPos := 0
			exprList := yyDollar[3].exprList
			if exprList != nil {
				endPos = exprList[len(exprList)-1].End()
			} else {
				endPos = yyDollar[2].expr.End()
			}
			if len(exprList) > 0 { // $3 is CommaExpressionListOpt -> []Expr
				args = append(args, yyDollar[3].exprList...)
			}
			yyVAL.stmt = &LogStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), endPos), Args: args}
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:616
		{
			yyVAL.exprList = nil
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:617
		{
			yyVAL.exprList = []Expr{yyDollar[2].expr}
			if yyDollar[3].exprList != nil {
				yyVAL.exprList = append(yyVAL.exprList, yyDollar[3].exprList...)
			}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:626
		{ // IF($1) ...
			endNode := Stmt(yyDollar[3].blockStmt)
			if yyDollar[4].stmt != nil {
				endNode = yyDollar[4].stmt
			} // End of Else block/IfStmt
			yyVAL.ifStmt = &IfStmt{
				NodeInfo:  newNodeInfo(yyDollar[1].node.(Node).Pos(), endNode.End()),
				Condition: yyDollar[2].expr,
				Then:      yyDollar[3].blockStmt,
				Else:      yyDollar[4].stmt,
			}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:639
		{
			yyVAL.stmt = nil
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:640
		{
			yyVAL.stmt = yyDollar[2].ifStmt
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:641
		{
			yyVAL.stmt = yyDollar[2].blockStmt
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:645
		{ // DISTRIBUTE($1) ... RBRACE($6)
			yyVAL.distributeStmt = &DistributeStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[6].node.(Node).End()), Total: yyDollar[2].expr, Cases: yyDollar[4].distributeCaseList, DefaultCase: yyDollar[5].defaultCase}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:650
		{
			yyVAL.expr = nil
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:650
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:653
		{
			yyVAL.distributeCaseList = []*DistributeCase{}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:654
		{
			yyVAL.distributeCaseList = append(yyDollar[1].distributeCaseList, yyDollar[2].distributeCase)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:658
		{
			yyVAL.distributeCase = &DistributeCase{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].blockStmt.End()), Probability: yyDollar[1].expr, Body: yyDollar[3].blockStmt}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:662
		{
			yyVAL.defaultCase = nil
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:663
		{
			yyVAL.defaultCase = yyDollar[1].defaultCase
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:667
		{
			yyVAL.defaultCase = &DefaultCase{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[3].blockStmt.End()), Body: yyDollar[3].blockStmt}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:671
		{ // GO($1) ... BlockStmt($4)
			yyVAL.goStmt = &GoStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].blockStmt.End()), VarName: yyDollar[2].expr.(*IdentifierExpr), Stmt: yyDollar[4].blockStmt}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:674
		{ // GO($1) BlockStmt($2)
			yyVAL.goStmt = &GoStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].blockStmt.End()), VarName: nil, Stmt: yyDollar[2].blockStmt}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:677
		{
			yyerror(yylex, fmt.Sprintf("`go` currently only supports assigning blocks, not expressions, at pos %d", yyDollar[1].node.(Node).Pos()))
			yyVAL.goStmt = &GoStmt{}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:684
		{
			yyerror(yylex, "Switch statement not defined")
			yyVAL.stmt = nil
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:687
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:688
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:689
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:693
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:694
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:697
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:698
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:699
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:700
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:701
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:702
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:703
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:707
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:708
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:709
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:712
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:713
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:714
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:715
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].tokenNode.String(), Right: yyDollar[3].expr}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:718
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:720
		{
			yyVAL.expr = &UnaryExpr{NodeInfo: newNodeInfo(yyDollar[1].tokenNode.Pos(), yyDollar[2].expr.(Node).End()), Operator: yyDollar[1].tokenNode.String(), Right: yyDollar[2].expr}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:721
		{
			yyVAL.expr = &UnaryExpr{NodeInfo: newNodeInfo(yyDollar[1].tokenNode.Pos(), yyDollar[2].expr.(Node).End()), Operator: yyDollar[1].tokenNode.String(), Right: yyDollar[2].expr}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:725
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:726
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:727
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:728
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:729
		{
			yyVAL.expr = yyDollar[1].distributeExpr
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:731
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:735
		{
			// yylex.(*Lexer).lval)
			yyVAL.expr = yyDollar[1].expr
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:739
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:740
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:741
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:742
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:746
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			yyVAL.expr = &MemberAccessExpr{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()),
				Receiver: yyDollar[1].expr,
				Member:   yyDollar[3].expr.(*IdentifierExpr),
			}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:756
		{ // PrimaryExpr($1) LPAREN($2) RPAREN($3)
			yyVAL.expr = &CallExpr{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].node.(Node).End()),
				Function: yyDollar[1].expr,
				Args:     []Expr{},
			}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:763
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := yyDollar[4].node.(Node) // End at RPAREN
			if len(yyDollar[3].exprList) > 0 {
				exprList := yyDollar[3].exprList
				endNode = exprList[len(exprList)-1].(Node) // End at last arg
			}
			yyVAL.expr = &CallExpr{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), endNode.End()),
				Function: yyDollar[1].expr,
				Args:     yyDollar[3].exprList,
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:778
		{
			yyVAL.exprList = []Expr{}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:779
		{
			yyVAL.exprList = yyDollar[1].exprList
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:783
		{
			yyVAL.exprList = []Expr{yyDollar[1].expr}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:784
		{
			yyVAL.exprList = append(yyDollar[1].exprList, yyDollar[3].expr)
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:789
		{
			yyVAL.distributeExpr = &DistributeExpr{TotalProb: yyDollar[2].expr, Cases: yyDollar[4].distributeExprCaseList, Default: yyDollar[5].expr} /* TODO: Pos */
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:795
		{
			yyVAL.distributeExprCaseList = []*DistributeExprCase{}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:796
		{
			yyVAL.distributeExprCaseList = append(yyDollar[1].distributeExprCaseList, yyDollar[2].distributeExprCase)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:800
		{
			// Need to wrap in DistributeExprCase AST node
			yyVAL.distributeExprCase = &DistributeExprCase{Probability: yyDollar[1].expr, Body: yyDollar[3].expr} /* TODO: Pos */
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:807
		{
			yyVAL.expr = nil
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:808
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:812
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:817
		{
			yyerror(yylex, "Switch expression not fully defined yet")
			yyVAL.expr = nil
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:824
		{
			yyerror(yylex, "Case expression not fully defined yet")
			yyVAL.expr = nil
		}
	}
	goto yystack /* stack new state and value */
}
