// Code generated by goyacc -o parser.go -p SDL grammar.y. DO NOT EDIT.

//line grammar.y:2
package parser

import __yyfmt__ "fmt"

//line grammar.y:2

import (
	// "reflect"
	"fmt"
	"io"
	"log"
)

// Function to be called by SDLParse on error.
// Needs access to the lexer passed via %parse-param.
func yyerror(yyl SDLLexer, msg string) {
	lexer := yyl.(LexerInterface)
	// line, col := lexer.Position()
	// log.Println("YYERROR MSG = ", msg)
	// errMsg := fmt.Sprintf("Error at Line %d, Col %d, Near ('%s'): %s", line, col, /* TokenString(lexer.LastToken()),*/ lexer.Text(), msg) // Added TokenString helper call
	lexer.Error(msg)
}

func yyerrok(lexer SDLLexer) {
	log.Println("Error here... not sure how to recover")
	///ErrFlag = 0
}

//line grammar.y:30
type SDLSymType struct {
	yys int
	// Basic types from lexer
	sval string // Holds raw string values like identifiers, literal content

	// AST Nodes (using pointers) - these should have NodeInfo
	file           *FileDecl
	componentDecl  *ComponentDecl
	systemDecl     *SystemDecl
	aggregatorDecl *AggregatorDecl
	node           Node // Generic interface for lists and for accessing NodeInfo
	// tokenNode   TokenNode // Generic interface for lists and for accessing NodeInfo
	expr             Expr
	memberAccessExpr *MemberAccessExpr
	chainedExpr      *ChainedExpr
	stmt             Stmt
	typeDecl         *TypeDecl
	annotationDecl   *AnnotationDecl
	paramDecl        *ParamDecl
	usesDecl         *UsesDecl
	methodDef        *MethodDecl
	instanceDecl     *InstanceDecl
	analyzeDecl      *AnalyzeDecl
	expectBlock      *ExpectationsDecl
	expectStmt       *ExpectStmt
	blockStmt        *BlockStmt
	ifStmt           *IfStmt

	distributeExpr *DistributeExpr
	caseExpr       *CaseExpr

	switchStmt *SwitchStmt
	caseStmt   *CaseStmt

	tupleExpr   *TupleExpr
	goExpr      *GoExpr
	forStmt     *ForStmt
	assignStmt  *AssignmentStmt
	optionsDecl *OptionsDecl
	enumDecl    *EnumDecl
	importDecl  *ImportDecl
	waitExpr    *WaitExpr
	// delayStmt *DelayStmt
	sampleExpr *SampleExpr

	// Slices for lists
	fqn                    string
	nodeList               []Node
	caseExprList           []*CaseExpr
	typeDeclList           []*TypeDecl
	caseStmtList           []*CaseStmt
	importDeclList         []*ImportDecl
	compBodyItem           ComponentDeclBodyItem
	compBodyItemList       []ComponentDeclBodyItem
	sysBodyItemList        []SystemDeclBodyItem
	annotationList         []*AnnotationDecl
	paramList              []*ParamDecl
	assignList             []*AssignmentStmt
	exprList               []Expr
	exprMap                map[string]Expr
	stmtList               []Stmt
	ident                  *IdentifierExpr
	identList              []*IdentifierExpr
	distributeExprCaseList []*CaseExpr
	expectStmtList         []*ExpectStmt
	methodSigItemList      []*MethodDecl

	// Add field to store position for simple tokens if needed
	// posInfo     NodeInfo
}

const SYSTEM = 57346
const USES = 57347
const AGGREGATOR = 57348
const METHOD = 57349
const ANALYZE = 57350
const EXPECT = 57351
const LET = 57352
const IF = 57353
const ELSE = 57354
const SAMPLE = 57355
const DISTRIBUTE = 57356
const DEFAULT = 57357
const RETURN = 57358
const DELAY = 57359
const WAIT = 57360
const GO = 57361
const GOBATCH = 57362
const USING = 57363
const SWITCH = 57364
const AT = 57365
const FOR = 57366
const CASE = 57367
const USE = 57368
const NATIVE = 57369
const LSQUARE = 57370
const RSQUARE = 57371
const LBRACE = 57372
const RBRACE = 57373
const OPTIONS = 57374
const ENUM = 57375
const COMPONENT = 57376
const PARAM = 57377
const IMPORT = 57378
const FROM = 57379
const AS = 57380
const ASSIGN = 57381
const COLON = 57382
const LPAREN = 57383
const RPAREN = 57384
const COMMA = 57385
const DOT = 57386
const ARROW = 57387
const LET_ASSIGN = 57388
const SEMICOLON = 57389
const INT = 57390
const FLOAT = 57391
const BOOL = 57392
const STRING = 57393
const DURATION = 57394
const INT_LITERAL = 57395
const FLOAT_LITERAL = 57396
const STRING_LITERAL = 57397
const BOOL_LITERAL = 57398
const DURATION_LITERAL = 57399
const IDENTIFIER = 57400
const OR = 57401
const AND = 57402
const EQ = 57403
const NEQ = 57404
const LT = 57405
const LTE = 57406
const GT = 57407
const GTE = 57408
const PLUS = 57409
const MUL = 57410
const DIV = 57411
const MOD = 57412
const DUAL_OP = 57413
const BINARY_NC_OP = 57414
const BINARY_OP = 57415
const UNARY_OP = 57416
const MINUS = 57417
const UMINUS = 57418

var SDLToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SYSTEM",
	"USES",
	"AGGREGATOR",
	"METHOD",
	"ANALYZE",
	"EXPECT",
	"LET",
	"IF",
	"ELSE",
	"SAMPLE",
	"DISTRIBUTE",
	"DEFAULT",
	"RETURN",
	"DELAY",
	"WAIT",
	"GO",
	"GOBATCH",
	"USING",
	"SWITCH",
	"AT",
	"FOR",
	"CASE",
	"USE",
	"NATIVE",
	"LSQUARE",
	"RSQUARE",
	"LBRACE",
	"RBRACE",
	"OPTIONS",
	"ENUM",
	"COMPONENT",
	"PARAM",
	"IMPORT",
	"FROM",
	"AS",
	"ASSIGN",
	"COLON",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"DOT",
	"ARROW",
	"LET_ASSIGN",
	"SEMICOLON",
	"INT",
	"FLOAT",
	"BOOL",
	"STRING",
	"DURATION",
	"INT_LITERAL",
	"FLOAT_LITERAL",
	"STRING_LITERAL",
	"BOOL_LITERAL",
	"DURATION_LITERAL",
	"IDENTIFIER",
	"OR",
	"AND",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"PLUS",
	"MUL",
	"DIV",
	"MOD",
	"DUAL_OP",
	"BINARY_NC_OP",
	"BINARY_OP",
	"UNARY_OP",
	"MINUS",
	"UMINUS",
}

var SDLStatenames = [...]string{}

const SDLEofCode = 1
const SDLErrCode = 2
const SDLInitialStackSize = 16

//line grammar.y:967
// --- Go Code Section ---

// Interface for the lexer required by the parser.
type LexerInterface interface {
	Lex(lval *SDLSymType) int
	Error(s string)
	Pos() int                  // Start byte position of the last token read
	End() int                  // End byte position of the last token read
	Text() string              // Text of the last token read
	Position() (line, col int) // Added: Get line/col of last token start
	LastToken() int            // Added: Get the token code that was just lexed
}

// Parse takes an input stream and attempts to parse it according to the SDL grammar. 22222
// It returns the root of the Abstract Syntax Tree (*FileDecl) if successful, or an error.
func Parse(input io.Reader) (*Lexer, *FileDecl, error) {
	// Reset global result before parsing
	lexer := NewLexer(input)
	// Set yyDebug = 3 for verbose parser debugging output
	// yyDebug = 3
	resultCode := SDLParse(lexer) // Call the LALR parser generated by goyacc

	if resultCode != 0 {
		// A syntax error occurred. The lexer's Error method should have been called
		// and stored the error message.
		if lexer.lastError != nil {
			return lexer, nil, lexer.lastError
		}
		// Fallback error message if lexer didn't store one
		return lexer, nil, fmt.Errorf("syntax error near byte %d (Line %d, Col %d)", lexer.location.Pos, lexer.location.Line, lexer.location.Col)
	}

	// Parsing succeeded
	if lexer.parseResult == nil {
		// This indicates a potential issue with the grammar's top rule action
		return lexer, nil, fmt.Errorf("parsing finished successfully, but no AST result was produced")
	}

	return lexer, lexer.parseResult, nil
}

// The parser expects the lexer variable to be named yyLex.
// We can satisfy this by creating a global or passing it via SDLParseWithLexer.
// Using SDLParseWithLexer is cleaner.

// Example main function (optional, for standalone testing)
/*
func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: parser <input_file>")
		return
	}
	filePath := os.Args[1]
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Printf("Error opening file %s: %v\n", filePath, err)
		return
	}
	defer file.Close()

	astRoot, err := Parse(file)
	if err != nil {
		fmt.Printf("Parsing failed: %v\n", err)
		// Error message should ideally include line/column from lexer
	} else {
		fmt.Println("Parsing successful!")
		// Print the AST (implement String() methods for AST nodes for nice output)
		fmt.Println(astRoot.String())
	}
}
*/

//line yacctab:1
var SDLExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 80,
	41, 123,
	-2, 164,
}

const SDLPrivate = 57344

const SDLLast = 489

var SDLAct = [...]int16{
	224, 70, 143, 243, 136, 241, 209, 140, 232, 75,
	223, 208, 137, 114, 60, 109, 157, 108, 106, 118,
	77, 38, 47, 179, 71, 180, 11, 168, 59, 104,
	103, 244, 213, 110, 88, 138, 139, 104, 103, 173,
	115, 168, 202, 201, 167, 197, 86, 196, 176, 41,
	80, 174, 81, 39, 107, 87, 124, 105, 167, 51,
	123, 111, 56, 30, 40, 105, 36, 34, 119, 98,
	99, 100, 101, 102, 91, 32, 31, 98, 99, 100,
	101, 102, 91, 133, 144, 146, 147, 122, 125, 54,
	141, 142, 271, 130, 268, 129, 258, 252, 132, 49,
	261, 194, 50, 163, 155, 156, 158, 150, 152, 148,
	238, 239, 227, 162, 239, 226, 225, 177, 161, 162,
	279, 160, 166, 160, 29, 153, 152, 42, 278, 264,
	172, 159, 119, 43, 199, 178, 80, 170, 81, 182,
	183, 87, 171, 160, 165, 275, 175, 263, 259, 200,
	192, 80, 195, 81, 184, 185, 87, 164, 16, 181,
	245, 212, 149, 52, 203, 191, 190, 186, 55, 265,
	235, 204, 210, 206, 211, 163, 44, 19, 214, 205,
	120, 10, 37, 65, 218, 66, 17, 18, 14, 26,
	13, 16, 215, 216, 27, 25, 270, 228, 267, 233,
	234, 3, 87, 169, 217, 67, 84, 236, 64, 26,
	19, 240, 14, 64, 22, 121, 198, 256, 229, 237,
	18, 14, 26, 79, 187, 86, 253, 86, 53, 48,
	246, 46, 233, 251, 45, 33, 260, 207, 151, 131,
	257, 247, 250, 220, 126, 17, 262, 135, 248, 104,
	103, 266, 249, 63, 269, 80, 6, 81, 221, 272,
	87, 20, 222, 76, 254, 255, 274, 92, 273, 230,
	276, 80, 277, 81, 104, 103, 87, 105, 15, 88,
	138, 139, 231, 154, 242, 73, 24, 12, 8, 98,
	99, 100, 101, 102, 91, 23, 21, 128, 62, 104,
	103, 61, 105, 189, 88, 138, 139, 112, 113, 7,
	141, 142, 134, 96, 98, 99, 100, 101, 102, 193,
	95, 89, 97, 104, 103, 90, 94, 105, 88, 138,
	139, 93, 74, 145, 72, 141, 142, 219, 28, 98,
	99, 100, 101, 102, 91, 5, 35, 68, 116, 117,
	57, 105, 58, 9, 4, 127, 2, 1, 0, 0,
	141, 142, 0, 98, 99, 100, 101, 102, 91, 79,
	84, 0, 104, 103, 0, 83, 0, 88, 0, 0,
	0, 85, 0, 82, 141, 142, 0, 0, 0, 86,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 98, 99, 100, 101, 102, 91, 79, 84,
	0, 104, 103, 0, 83, 0, 88, 0, 0, 0,
	85, 0, 82, 0, 0, 0, 0, 0, 86, 69,
	79, 84, 0, 104, 103, 0, 83, 0, 88, 105,
	0, 0, 85, 0, 82, 78, 0, 0, 0, 0,
	86, 98, 99, 100, 101, 102, 91, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 98, 99, 100, 101, 102, 91,
}

var SDLPact = [...]int16{
	-1000, -1000, 154, -1000, -1000, -1000, -1000, 187, -1000, -1000,
	188, -1000, -1000, 5, 18, -1000, 17, 205, 9, 8,
	-1000, -1000, 175, -1000, -1000, -5, 6, -5, 90, -1000,
	138, 204, 201, -1000, 199, 58, -1000, -5, -1000, 122,
	198, -1000, 34, 5, 4, 178, -1000, 408, -4, -25,
	3, -1000, -18, 173, -1000, -1000, -1000, 184, 178, -1000,
	-1000, -1000, -1000, -1000, 2, -2, -5, 155, 213, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -4,
	-1000, -1000, 310, 286, 310, 310, -1000, 121, -4, 210,
	-1000, 82, -1000, -1000, -1000, -1000, 81, -1000, -1000, -1000,
	-1000, -1000, -1000, 310, 310, 310, 100, -1000, -1000, 76,
	136, -1000, 115, 101, -1000, -14, 172, 173, -1000, -1000,
	-5, -1000, -1000, 0, -7, 197, -1000, -1000, -1000, -1000,
	-1000, -10, 78, 430, -50, -1000, -1000, -1000, 16, 310,
	121, 236, 236, -1000, -1000, -1000, 197, 194, 359, 261,
	80, 310, -11, -13, 186, -1000, -1000, 91, 107, -1000,
	-15, -1000, -16, 310, -14, -18, 134, 209, -14, -1000,
	-1000, -1000, 133, 310, 120, -1000, -26, 310, -1000, 236,
	236, -1000, -1000, 16, -1000, -1000, 231, 310, -1000, -1000,
	73, 70, -1000, 64, 24, 189, -1000, -1000, 310, 310,
	-1000, -1000, 131, -1000, -1000, -1000, 310, -14, 68, -1000,
	310, -1000, -27, 119, -1000, -1000, -1000, -1000, -1000, -1000,
	195, 227, 310, -1000, 52, 310, -1000, -1000, -1000, -1000,
	202, 310, -1000, 51, 106, 310, -1000, 71, -1000, -14,
	-1000, 105, 86, -1000, 130, -27, -1000, -1000, 167, -1000,
	49, -1000, 430, -1000, 165, -1000, 47, -1000, 310, -1000,
	-1000, -1000, -1000, -1000, -27, 310, 103, -1000, 430, -1000,
	-1000, 310, 85, -1000, -1000, -1000, -1000, 77, -1000, -1000,
}

var SDLPgo = [...]int16{
	0, 357, 356, 355, 354, 253, 288, 353, 28, 352,
	350, 19, 349, 348, 347, 26, 287, 18, 124, 346,
	345, 338, 1, 337, 24, 334, 332, 331, 20, 22,
	326, 0, 12, 7, 325, 2, 322, 321, 320, 4,
	313, 312, 278, 309, 14, 13, 308, 307, 6, 11,
	301, 298, 21, 297, 285, 3, 284, 5, 9, 16,
	15, 283, 8, 282, 269, 267, 265, 264, 263, 10,
	262, 258, 252, 248, 247,
}

var SDLR1 = [...]int8{
	0, 1, 2, 2, 2, 2, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 15, 43, 43, 42,
	42, 19, 19, 5, 5, 16, 17, 17, 20, 21,
	21, 18, 18, 52, 52, 13, 13, 12, 12, 11,
	11, 10, 10, 9, 9, 8, 8, 8, 8, 44,
	44, 44, 48, 48, 48, 49, 49, 50, 50, 51,
	47, 47, 46, 46, 45, 45, 6, 7, 14, 14,
	3, 3, 3, 53, 53, 57, 57, 56, 56, 55,
	29, 29, 22, 22, 22, 22, 22, 22, 22, 22,
	28, 54, 24, 26, 26, 39, 39, 60, 60, 59,
	59, 58, 23, 23, 23, 27, 61, 61, 30, 74,
	74, 74, 74, 31, 31, 31, 41, 41, 41, 32,
	32, 32, 33, 33, 37, 37, 37, 37, 37, 37,
	37, 37, 38, 34, 34, 34, 34, 34, 36, 40,
	40, 35, 35, 35, 65, 64, 64, 63, 63, 62,
	62, 67, 67, 66, 66, 68, 71, 71, 70, 70,
	69, 73, 73, 72, 25, 25,
}

var SDLR2 = [...]int8{
	0, 1, 0, 2, 2, 2, 1, 2, 1, 2,
	1, 3, 4, 1, 1, 2, 4, 1, 2, 4,
	5, 1, 3, 6, 5, 5, 1, 3, 4, 1,
	3, 1, 3, 4, 5, 0, 1, 1, 2, 1,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	4, 5, 1, 3, 4, 1, 3, 3, 6, 3,
	0, 1, 1, 3, 2, 4, 5, 3, 0, 2,
	1, 1, 1, 3, 6, 0, 1, 1, 3, 3,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 4, 2, 2, 2, 4, 3, 5, 1,
	3, 4, 0, 2, 2, 2, 0, 1, 5, 2,
	2, 3, 3, 1, 1, 1, 1, 3, 3, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 4, 3,
	3, 3, 4, 4, 6, 0, 1, 1, 2, 3,
	4, 0, 1, 3, 4, 6, 0, 1, 1, 2,
	3, 0, 1, 3, 1, 1,
}

var SDLChk = [...]int16{
	-1000, -1, -2, 47, -4, -20, -5, -43, -6, -7,
	27, -15, -16, 36, 34, -42, 4, 32, 33, 23,
	-5, -6, 27, -16, -42, 7, 34, 6, -21, -18,
	58, 58, 58, 30, 58, -19, 58, 7, -52, 58,
	58, -52, 37, 43, 38, 30, 30, -29, 30, 41,
	44, -52, 41, 30, 55, -18, 58, -10, -9, -8,
	-44, -50, -51, -5, 35, 5, 7, 27, -14, 31,
	-22, -24, -25, -54, -26, -58, -68, -28, 47, 10,
	-35, -39, 24, 16, 11, 22, 30, -33, 18, -37,
	-34, 58, -65, -27, -30, -38, -40, -36, 53, 54,
	55, 56, 57, 14, 13, 41, -17, 58, 42, -60,
	58, 58, -47, -46, -45, 58, -13, -12, -11, -44,
	7, 31, -8, 58, 58, -52, 31, -3, -53, -15,
	-24, 26, -17, -31, -41, -74, -39, -32, 19, 20,
	-33, 74, 75, -35, -31, 47, -31, -31, -29, 41,
	-17, 28, 44, 44, -61, -31, -31, -59, -31, 31,
	43, 42, 43, 39, 42, 43, -48, 58, 41, 31,
	-11, -52, -48, 39, 58, -28, 58, 39, -22, 73,
	75, -28, -31, -31, -32, -32, -28, 30, 31, 42,
	-59, -60, -31, 58, 21, -31, 58, 58, 30, 43,
	42, 58, 58, -31, -48, -45, 39, 28, -49, -48,
	39, -31, 41, 58, -31, -32, -32, -28, -31, -23,
	12, -71, -70, -69, -31, 43, 42, 42, -35, 29,
	-64, -63, -62, -31, -31, 39, -31, -49, 42, 43,
	-31, -57, -56, -55, 58, 41, -58, -28, -73, -72,
	15, -69, 45, -31, -67, -66, 15, -62, 45, 42,
	-31, 29, -48, 42, 43, 39, -57, 31, 45, -22,
	31, 45, -31, -55, -31, 42, -22, -31, 43, 43,
}

var SDLDef = [...]int16{
	2, -2, 1, 3, 4, 5, 6, 0, 8, 10,
	0, 13, 14, 0, 0, 17, 0, 0, 0, 0,
	7, 9, 0, 15, 18, 0, 0, 0, 0, 29,
	31, 0, 0, 80, 0, 0, 21, 0, 11, 0,
	0, 67, 0, 0, 0, 41, 68, 0, 0, 0,
	0, 12, 60, 35, 28, 30, 32, 0, 42, 43,
	45, 46, 47, 48, 0, 0, 0, 0, 0, 16,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 0,
	-2, 165, 0, 0, 0, 0, 80, 0, 0, 122,
	124, 125, 126, 127, 128, 129, 130, 131, 133, 134,
	135, 136, 137, 106, 0, 0, 0, 26, 19, 0,
	0, 22, 0, 61, 62, 0, 0, 36, 37, 39,
	0, 24, 44, 0, 0, 0, 66, 69, 70, 71,
	72, 0, 0, 0, 113, 114, 115, 116, 0, 0,
	119, 0, 0, 123, 93, 94, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 107, 105, 0, 99, 25,
	0, 20, 0, 0, 33, 0, 64, 52, 0, 23,
	38, 40, 49, 0, 57, 59, 0, 0, 91, 0,
	0, 109, 110, 0, 120, 121, 102, 156, 90, 141,
	0, 0, 99, 125, 0, 0, 139, 140, 145, 0,
	132, 27, 0, 97, 34, 63, 0, 0, 0, 55,
	0, 50, 75, 73, 92, 117, 118, 111, 112, 101,
	0, 161, 157, 158, 0, 0, 142, 143, 96, 138,
	151, 146, 147, 0, 100, 0, 65, 0, 53, 0,
	51, 0, 76, 77, 0, 75, 103, 104, 0, 162,
	0, 159, 0, 100, 0, 152, 0, 148, 0, 108,
	98, 54, 56, 58, 0, 0, 0, 155, 0, 160,
	144, 0, 149, 78, 79, 74, 163, 153, 150, 154,
}

var SDLTok1 = [...]int8{
	1,
}

var SDLTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76,
}

var SDLTok3 = [...]int8{
	0,
}

var SDLErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	SDLDebug        = 0
	SDLErrorVerbose = false
)

type SDLLexer interface {
	Lex(lval *SDLSymType) int
	Error(s string)
}

type SDLParser interface {
	Parse(SDLLexer) int
	Lookahead() int
}

type SDLParserImpl struct {
	lval  SDLSymType
	stack [SDLInitialStackSize]SDLSymType
	char  int
}

func (p *SDLParserImpl) Lookahead() int {
	return p.char
}

func SDLNewParser() SDLParser {
	return &SDLParserImpl{}
}

const SDLFlag = -1000

func SDLTokname(c int) string {
	if c >= 1 && c-1 < len(SDLToknames) {
		if SDLToknames[c-1] != "" {
			return SDLToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func SDLStatname(s int) string {
	if s >= 0 && s < len(SDLStatenames) {
		if SDLStatenames[s] != "" {
			return SDLStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func SDLErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !SDLErrorVerbose {
		return "syntax error"
	}

	for _, e := range SDLErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + SDLTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(SDLPact[state])
	for tok := TOKSTART; tok-1 < len(SDLToknames); tok++ {
		if n := base + tok; n >= 0 && n < SDLLast && int(SDLChk[int(SDLAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if SDLDef[state] == -2 {
		i := 0
		for SDLExca[i] != -1 || int(SDLExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; SDLExca[i] >= 0; i += 2 {
			tok := int(SDLExca[i])
			if tok < TOKSTART || SDLExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if SDLExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += SDLTokname(tok)
	}
	return res
}

func SDLlex1(lex SDLLexer, lval *SDLSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(SDLTok1[0])
		goto out
	}
	if char < len(SDLTok1) {
		token = int(SDLTok1[char])
		goto out
	}
	if char >= SDLPrivate {
		if char < SDLPrivate+len(SDLTok2) {
			token = int(SDLTok2[char-SDLPrivate])
			goto out
		}
	}
	for i := 0; i < len(SDLTok3); i += 2 {
		token = int(SDLTok3[i+0])
		if token == char {
			token = int(SDLTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(SDLTok2[1]) /* unknown char */
	}
	if SDLDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", SDLTokname(token), uint(char))
	}
	return char, token
}

func SDLParse(SDLlex SDLLexer) int {
	return SDLNewParser().Parse(SDLlex)
}

func (SDLrcvr *SDLParserImpl) Parse(SDLlex SDLLexer) int {
	var SDLn int
	var SDLVAL SDLSymType
	var SDLDollar []SDLSymType
	_ = SDLDollar // silence set and not used
	SDLS := SDLrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	SDLstate := 0
	SDLrcvr.char = -1
	SDLtoken := -1 // SDLrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		SDLstate = -1
		SDLrcvr.char = -1
		SDLtoken = -1
	}()
	SDLp := -1
	goto SDLstack

ret0:
	return 0

ret1:
	return 1

SDLstack:
	/* put a state and value onto the stack */
	if SDLDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", SDLTokname(SDLtoken), SDLStatname(SDLstate))
	}

	SDLp++
	if SDLp >= len(SDLS) {
		nyys := make([]SDLSymType, len(SDLS)*2)
		copy(nyys, SDLS)
		SDLS = nyys
	}
	SDLS[SDLp] = SDLVAL
	SDLS[SDLp].yys = SDLstate

SDLnewstate:
	SDLn = int(SDLPact[SDLstate])
	if SDLn <= SDLFlag {
		goto SDLdefault /* simple state */
	}
	if SDLrcvr.char < 0 {
		SDLrcvr.char, SDLtoken = SDLlex1(SDLlex, &SDLrcvr.lval)
	}
	SDLn += SDLtoken
	if SDLn < 0 || SDLn >= SDLLast {
		goto SDLdefault
	}
	SDLn = int(SDLAct[SDLn])
	if int(SDLChk[SDLn]) == SDLtoken { /* valid shift */
		SDLrcvr.char = -1
		SDLtoken = -1
		SDLVAL = SDLrcvr.lval
		SDLstate = SDLn
		if Errflag > 0 {
			Errflag--
		}
		goto SDLstack
	}

SDLdefault:
	/* default state action */
	SDLn = int(SDLDef[SDLstate])
	if SDLn == -2 {
		if SDLrcvr.char < 0 {
			SDLrcvr.char, SDLtoken = SDLlex1(SDLlex, &SDLrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if SDLExca[xi+0] == -1 && int(SDLExca[xi+1]) == SDLstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			SDLn = int(SDLExca[xi+0])
			if SDLn < 0 || SDLn == SDLtoken {
				break
			}
		}
		SDLn = int(SDLExca[xi+1])
		if SDLn < 0 {
			goto ret0
		}
	}
	if SDLn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			SDLlex.Error(SDLErrorMessage(SDLstate, SDLtoken))
			Nerrs++
			if SDLDebug >= 1 {
				__yyfmt__.Printf("%s", SDLStatname(SDLstate))
				__yyfmt__.Printf(" saw %s\n", SDLTokname(SDLtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for SDLp >= 0 {
				SDLn = int(SDLPact[SDLS[SDLp].yys]) + SDLErrCode
				if SDLn >= 0 && SDLn < SDLLast {
					SDLstate = int(SDLAct[SDLn]) /* simulate a shift of "error" */
					if int(SDLChk[SDLstate]) == SDLErrCode {
						goto SDLstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if SDLDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", SDLS[SDLp].yys)
				}
				SDLp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if SDLDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", SDLTokname(SDLtoken))
			}
			if SDLtoken == SDLEofCode {
				goto ret1
			}
			SDLrcvr.char = -1
			SDLtoken = -1
			goto SDLnewstate /* try again in the same state */
		}
	}

	/* reduction by production SDLn */
	if SDLDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", SDLn, SDLStatname(SDLstate))
	}

	SDLnt := SDLn
	SDLpt := SDLp
	_ = SDLpt // guard against "declared and not used"

	SDLp -= int(SDLR2[SDLn])
	// SDLp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if SDLp+1 >= len(SDLS) {
		nyys := make([]SDLSymType, len(SDLS)*2)
		copy(nyys, SDLS)
		SDLS = nyys
	}
	SDLVAL = SDLS[SDLp+1]

	/* consult goto table to find next state */
	SDLn = int(SDLR1[SDLn])
	SDLg := int(SDLPgo[SDLn])
	SDLj := SDLg + SDLS[SDLp].yys + 1

	if SDLj >= SDLLast {
		SDLstate = int(SDLAct[SDLg])
	} else {
		SDLstate = int(SDLAct[SDLj])
		if int(SDLChk[SDLstate]) != -SDLn {
			SDLstate = int(SDLAct[SDLg])
		}
	}
	// dummy call; replaced with literal code
	switch SDLnt {

	case 1:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:191
		{
			ni := NodeInfo{}
			if len(SDLDollar[1].nodeList) > 0 {
				ni.StartPos = SDLDollar[1].nodeList[0].Pos()
				ni.StopPos = SDLDollar[1].nodeList[len(SDLDollar[1].nodeList)-1].End()
			}
			SDLlex.(*Lexer).parseResult = &FileDecl{NodeInfo: ni, Declarations: SDLDollar[1].nodeList}
			// $$ = &File{NodeInfo: ni, Declarations: $1}
		}
	case 2:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:203
		{
			SDLVAL.nodeList = []Node{}
		}
	case 3:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:204
		{
			SDLVAL.nodeList = SDLDollar[1].nodeList
		}
	case 4:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:205
		{
			SDLVAL.nodeList = append(SDLDollar[1].nodeList, SDLDollar[2].node)
		}
	case 5:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:208
		{
			for _, imp := range SDLDollar[2].importDeclList {
				SDLDollar[1].nodeList = append(SDLDollar[1].nodeList, imp)
			}
			SDLVAL.nodeList = SDLDollar[1].nodeList
		}
	case 6:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:217
		{
			SDLVAL.node = SDLDollar[1].componentDecl
		}
	case 7:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:218
		{
			SDLVAL.node = SDLDollar[2].componentDecl
			SDLDollar[2].componentDecl.Annotations = SDLDollar[1].annotationList
		}
	case 8:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:222
		{
			SDLVAL.node = SDLDollar[1].systemDecl
		}
	case 9:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:223
		{
			SDLVAL.node = SDLDollar[2].systemDecl
			SDLDollar[2].systemDecl.Annotations = SDLDollar[1].annotationList
		}
	case 10:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:227
		{
			SDLVAL.node = SDLDollar[1].aggregatorDecl
		}
	case 11:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:228
		{
			SDLDollar[3].methodDef.IsNative = true
			SDLVAL.node = SDLDollar[3].methodDef
		}
	case 12:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:232
		{
			SDLDollar[4].methodDef.IsNative = true
			SDLVAL.node = SDLDollar[4].methodDef
			SDLDollar[4].methodDef.Annotations = SDLDollar[1].annotationList
		}
	case 13:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:237
		{
			SDLVAL.node = SDLDollar[1].optionsDecl
		}
	case 14:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:238
		{
			SDLVAL.node = SDLDollar[1].enumDecl
		}
	case 15:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:239
		{
			SDLVAL.node = SDLDollar[2].enumDecl
			SDLDollar[2].enumDecl.Annotations = SDLDollar[1].annotationList
		}
	case 16:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:246
		{ // OPTIONS ($1) LBRACE ($2) StmtList ($3) RBRACE ($4)
			// Assume OPTIONS token itself doesn't carry complex NodeInfo from lexer for this example.
			// Span from LBRACE to RBRACE for body. If StmtList is empty, Body.NodeInfo might be tricky.
			/*
			   bodyStart := $2.(Node).Pos() // Position of LBRACE (assuming lexer returns it as Node)
			   bodyEnd := $4.(Node).Pos()   // Position of RBRACE (actually its start, use .End() for full span)
			   if len($3) > 0 { // If StmtList is not empty
			       bodyStart = $3[0].Pos()
			       bodyEnd = $3[len($3)-1].End()
			   }
			*/
			SDLVAL.optionsDecl = &OptionsDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].node.(Node).End()), // Pos of OPTIONS, End of RBRACE
				Body: &BlockStmt{
					NodeInfo:   NewNodeInfo(SDLDollar[2].node.(Node).Pos(), SDLDollar[4].node.(Node).End()),
					Statements: SDLDollar[3].stmtList,
				},
			}
		}
	case 17:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:268
		{
			SDLVAL.annotationList = []*AnnotationDecl{SDLDollar[1].annotationDecl}
		}
	case 18:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:269
		{
			SDLVAL.annotationList = append(SDLDollar[1].annotationList, SDLDollar[2].annotationDecl)
		}
	case 19:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:273
		{
			SDLVAL.annotationDecl = &AnnotationDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].node.(Node).End()),
				Fqn:      SDLDollar[2].fqn,
			}
		}
	case 20:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:279
		{
			SDLVAL.annotationDecl = &AnnotationDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Fqn:      SDLDollar[2].fqn,
				ArgMap:   SDLDollar[4].exprMap,
			}
		}
	case 21:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:287
		{
			SDLVAL.fqn = SDLDollar[1].ident.Value
		}
	case 22:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:288
		{
			SDLVAL.fqn = SDLDollar[1].fqn + "." + SDLDollar[3].ident.Value
		}
	case 23:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:292
		{ // COMPONENT($1) ... RBRACE($5)
			SDLVAL.componentDecl = &ComponentDecl{
				Annotatable: Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.(Node).End())},
				Name:        SDLDollar[3].ident,
				Body:        SDLDollar[5].compBodyItemList,
				IsNative:    true,
			}
		}
	case 24:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:300
		{ // COMPONENT($1) ... RBRACE($5)
			SDLVAL.componentDecl = &ComponentDecl{
				Annotatable: Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End())},
				Name:        SDLDollar[2].ident,
				Body:        SDLDollar[4].compBodyItemList,
			}
		}
	case 25:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:310
		{ // ENUM($1) IDENTIFIER($2) ... RBRACE($5)
			SDLVAL.enumDecl = &EnumDecl{
				Annotatable: Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End())},
				Name:        SDLDollar[2].ident, // $2 is an IdentifierExpr from lexer, has Pos/End
				Values:      SDLDollar[4].identList,
			}
		}
	case 26:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:320
		{
			SDLVAL.identList = []*IdentifierExpr{SDLDollar[1].ident}
		}
	case 27:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:321
		{
			SDLVAL.identList = append(SDLDollar[1].identList, SDLDollar[3].ident)
		}
	case 28:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:325
		{ // IMPORT($1) STRING_LITERAL($2)
			path := SDLDollar[4].expr.(*LiteralExpr)
			for _, imp := range SDLDollar[2].importDeclList {
				imp.Path = path
			}
			SDLVAL.importDeclList = SDLDollar[2].importDeclList
		}
	case 29:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:334
		{
			SDLVAL.importDeclList = []*ImportDecl{SDLDollar[1].importDecl}
		}
	case 30:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:335
		{
			SDLVAL.importDeclList = append(SDLVAL.importDeclList, SDLDollar[3].importDecl)
		}
	case 31:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:338
		{
			SDLVAL.importDecl = &ImportDecl{ImportedItem: SDLDollar[1].ident, Alias: SDLDollar[1].ident}
		}
	case 32:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:339
		{
			SDLVAL.importDecl = &ImportDecl{ImportedItem: SDLDollar[1].ident, Alias: SDLDollar[3].ident}
		}
	case 33:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:343
		{ // METHOD($1) ... BlockStmt($6)
			SDLVAL.methodDef = &MethodDecl{
				Annotatable: Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[4].node.End())},
				Name:        SDLDollar[1].ident,
				Parameters:  SDLDollar[3].paramList,
			}
		}
	case 34:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:350
		{ // METHOD($1) ... BlockStmt($8)
			SDLVAL.methodDef = &MethodDecl{
				Annotatable: Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[5].typeDecl.End())},
				Name:        SDLDollar[1].ident,
				Parameters:  SDLDollar[3].paramList,
				ReturnType:  SDLDollar[5].typeDecl,
			}
		}
	case 35:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:361
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{}
		}
	case 36:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:362
		{
			SDLVAL.compBodyItemList = SDLDollar[1].compBodyItemList
		}
	case 37:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:366
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{SDLDollar[1].compBodyItem}
		}
	case 38:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:367
		{
			SDLVAL.compBodyItemList = append(SDLDollar[1].compBodyItemList, SDLDollar[2].compBodyItem)
		}
	case 39:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:371
		{
			SDLVAL.compBodyItem = SDLDollar[1].paramDecl
		}
	case 40:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:372
		{
			SDLVAL.compBodyItem = SDLDollar[2].methodDef
		}
	case 41:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:377
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{}
		}
	case 42:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:378
		{
			SDLVAL.compBodyItemList = SDLDollar[1].compBodyItemList
		}
	case 43:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:382
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{SDLDollar[1].compBodyItem}
		}
	case 44:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:383
		{
			SDLVAL.compBodyItemList = append(SDLDollar[1].compBodyItemList, SDLDollar[2].compBodyItem)
		}
	case 45:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:387
		{
			SDLVAL.compBodyItem = SDLDollar[1].paramDecl
		}
	case 46:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:388
		{
			SDLVAL.compBodyItem = SDLDollar[1].usesDecl
		}
	case 47:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:389
		{
			SDLVAL.compBodyItem = SDLDollar[1].methodDef
		}
	case 48:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:390
		{
			SDLVAL.compBodyItem = SDLDollar[1].componentDecl
		}
	case 49:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:394
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				Annotatable: Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].typeDecl.End())},
				Name:        SDLDollar[2].ident,
				TypeDecl:    SDLDollar[3].typeDecl, // TypeDecl also needs to have NodeInfo
			}
		}
	case 50:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:401
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				Annotatable:  Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].expr.End())},
				Name:         SDLDollar[2].ident,
				DefaultValue: SDLDollar[4].expr,
			}
		}
	case 51:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:408
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				Annotatable:  Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].expr.End())},
				Name:         SDLDollar[2].ident,
				TypeDecl:     SDLDollar[3].typeDecl,
				DefaultValue: SDLDollar[5].expr,
			}
		}
	case 52:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:420
		{
			identNode := SDLDollar[1].ident
			SDLVAL.typeDecl = &TypeDecl{
				NodeInfo: identNode.NodeInfo,
				Name:     identNode.Value,
			}
		}
	case 53:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:427
		{ // Tuple type
			if len(SDLDollar[2].typeDeclList) == 1 {
				SDLVAL.typeDecl = SDLDollar[2].typeDeclList[0]
			} else {
				SDLVAL.typeDecl = &TypeDecl{
					NodeInfo: NewNodeInfo(SDLDollar[1].node.Pos(), SDLDollar[3].node.Pos()),
					Name:     "Tuple",
					Args:     SDLDollar[2].typeDeclList,
				}
			}
		}
	case 54:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:438
		{
			identNode := SDLDollar[1].ident
			SDLVAL.typeDecl = &TypeDecl{
				NodeInfo: identNode.NodeInfo,
				Name:     identNode.Value,
				Args:     SDLDollar[3].typeDeclList,
			}
		}
	case 55:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:454
		{
			SDLVAL.typeDeclList = []*TypeDecl{SDLDollar[1].typeDecl}
		}
	case 56:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:455
		{
			SDLVAL.typeDeclList = append(SDLDollar[1].typeDeclList, SDLDollar[3].typeDecl)
		}
	case 57:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:459
		{ // USES($1) ...
			SDLVAL.usesDecl = &UsesDecl{
				Annotatable:   Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].ident.End())},
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
			}
		}
	case 58:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:467
		{
			SDLVAL.usesDecl = &UsesDecl{
				Annotatable:   Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.End())},
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     SDLDollar[5].assignList,
			}
		}
	case 59:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:478
		{ // METHOD($1) ... BlockStmt($6)
			SDLDollar[2].methodDef.Body = SDLDollar[3].blockStmt
			SDLDollar[2].methodDef.NodeInfo.StopPos = SDLDollar[3].blockStmt.End()
			SDLVAL.methodDef = SDLDollar[2].methodDef
		}
	case 60:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:486
		{
			SDLVAL.paramList = []*ParamDecl{}
		}
	case 61:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:487
		{
			SDLVAL.paramList = SDLDollar[1].paramList
		}
	case 62:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:491
		{
			SDLVAL.paramList = []*ParamDecl{SDLDollar[1].paramDecl}
		}
	case 63:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:492
		{
			SDLVAL.paramList = append(SDLDollar[1].paramList, SDLDollar[3].paramDecl)
		}
	case 64:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:496
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				Annotatable: Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[2].typeDecl.End())},
				Name:        SDLDollar[1].ident,
				TypeDecl:    SDLDollar[2].typeDecl, // TypeDecl also needs to have NodeInfo
			}
		}
	case 65:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:503
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				Annotatable:  Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[4].expr.End())},
				Name:         SDLDollar[1].ident,
				TypeDecl:     SDLDollar[2].typeDecl,
				DefaultValue: SDLDollar[4].expr,
			}
		}
	case 66:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:515
		{ // SYSTEM($1) ... RBRACE($5)
			SDLVAL.systemDecl = &SystemDecl{
				Annotatable: Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End())},
				Name:        SDLDollar[2].ident,
				Body:        SDLDollar[4].sysBodyItemList,
			}
		}
	case 67:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:525
		{ // SYSTEM($1) ... RBRACE($5)
			SDLVAL.aggregatorDecl = &AggregatorDecl{
				Annotatable: Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].methodDef.End())},
				Name:        SDLDollar[3].methodDef.Name,
				Parameters:  SDLDollar[3].methodDef.Parameters,
				ReturnType:  SDLDollar[3].methodDef.ReturnType,
			}
		}
	case 68:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:536
		{
			SDLVAL.sysBodyItemList = []SystemDeclBodyItem{}
		}
	case 69:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:537
		{
			SDLVAL.sysBodyItemList = append(SDLDollar[1].sysBodyItemList, SDLDollar[2].node.(SystemDeclBodyItem))
		}
	case 70:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:541
		{
			SDLVAL.node = SDLDollar[1].instanceDecl
		}
	case 71:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:543
		{
			SDLVAL.node = SDLDollar[1].optionsDecl
		}
	case 72:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:544
		{
			SDLVAL.node = SDLDollar[1].stmt
		}
	case 73:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:548
		{ // IDENTIFIER($1) ...
			SDLVAL.instanceDecl = &InstanceDecl{
				Annotatable:   Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].ident.End())},
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     []*AssignmentStmt{},
			}
		}
	case 74:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:556
		{ // IDENTIFIER($1) ...
			SDLVAL.instanceDecl = &InstanceDecl{
				Annotatable:   Annotatable{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.End())},
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     SDLDollar[5].assignList,
			}
		}
	case 75:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:567
		{
			SDLVAL.assignList = []*AssignmentStmt{}
		}
	case 76:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:568
		{
			SDLVAL.assignList = SDLDollar[1].assignList
		}
	case 77:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:572
		{
			SDLVAL.assignList = []*AssignmentStmt{SDLDollar[1].assignStmt}
		}
	case 78:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:573
		{
			SDLVAL.assignList = append(SDLDollar[1].assignList, SDLDollar[3].assignStmt)
		}
	case 79:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:577
		{ // IDENTIFIER($1) ...
			SDLVAL.assignStmt = &AssignmentStmt{
				NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[3].expr.End()),
				Var:      SDLDollar[1].ident,
				Value:    SDLDollar[3].expr,
			}
		}
	case 80:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:588
		{
			SDLVAL.stmtList = []Stmt{}
		}
	case 81:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:589
		{
			SDLVAL.stmtList = SDLDollar[1].stmtList
			if SDLDollar[2].stmt != nil {
				SDLVAL.stmtList = append(SDLVAL.stmtList, SDLDollar[2].stmt)
			}
		}
	case 82:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:597
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 83:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:598
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 84:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:599
		{
			SDLVAL.stmt = SDLDollar[1].forStmt
		}
	case 85:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:600
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 86:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:601
		{
			SDLVAL.stmt = SDLDollar[1].ifStmt
		}
	case 87:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:602
		{
			SDLVAL.stmt = SDLDollar[1].switchStmt
		}
	case 88:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:603
		{
			SDLVAL.stmt = SDLDollar[1].blockStmt
		}
	case 89:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:604
		{
			SDLVAL.stmt = nil
		}
	case 90:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:609
		{
			SDLVAL.blockStmt = &BlockStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].node.(Node).End()), Statements: SDLDollar[2].stmtList}
		}
	case 91:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:614
		{
			SDLVAL.forStmt = &ForStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].stmt.End()), Condition: SDLDollar[2].expr, Body: SDLDollar[3].stmt}
		}
	case 92:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:620
		{ // LET($1) ...
			SDLVAL.stmt = &LetStmt{
				NodeInfo:  NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].expr.End()),
				Variables: SDLDollar[2].identList,
				Value:     SDLDollar[4].expr,
			}
		}
	case 93:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:645
		{
			SDLVAL.stmt = &ReturnStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End()), ReturnValue: SDLDollar[2].expr}
		}
	case 94:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:646
		{
			SDLVAL.stmt = &ReturnStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].node.(Node).End()), ReturnValue: nil}
		}
	case 95:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:652
		{ // WAIT($1) IDENTIFIER($2) ...
			idents := SDLDollar[2].identList
			endNode := idents[len(idents)-1] // End at the last identifier in the list
			SDLVAL.expr = &WaitExpr{FutureNames: idents}
			SDLVAL.expr.(*WaitExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.Pos(), endNode.End())
		}
	case 96:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:658
		{ // WAIT($1) IDENTIFIER($2) ...
			idents := SDLDollar[2].identList
			endNode := idents[len(idents)-1] // End at the last identifier in the list
			SDLVAL.expr = &WaitExpr{
				FutureNames:      idents,
				AggregatorName:   SDLDollar[4].expr.(*CallExpr).Function.(*IdentifierExpr),
				AggregatorParams: SDLDollar[4].expr.(*CallExpr).ArgMap,
			}
			SDLVAL.expr.(*WaitExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.Pos(), endNode.End())
		}
	case 97:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:685
		{
			SDLVAL.exprMap = map[string]Expr{SDLDollar[1].ident.Value: SDLDollar[3].expr}
		}
	case 98:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:686
		{
			name := SDLDollar[3].ident.Value
			SDLDollar[1].exprMap[name] = SDLDollar[5].expr
			SDLVAL.exprMap = SDLDollar[1].exprMap
		}
	case 99:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:694
		{
			SDLVAL.exprList = []Expr{SDLDollar[1].expr}
		}
	case 100:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:695
		{
			SDLVAL.exprList = append(SDLDollar[1].exprList, SDLDollar[3].expr)
		}
	case 101:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:700
		{ // IF($1) ...
			endNode := Stmt(SDLDollar[3].blockStmt)
			if SDLDollar[4].stmt != nil {
				endNode = SDLDollar[4].stmt
			} // End of Else block/IfStmt
			SDLVAL.ifStmt = &IfStmt{
				NodeInfo:  NewNodeInfo(SDLDollar[1].node.(Node).Pos(), endNode.End()),
				Condition: SDLDollar[2].expr,
				Then:      SDLDollar[3].blockStmt,
				Else:      SDLDollar[4].stmt,
			}
		}
	case 102:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:713
		{
			SDLVAL.stmt = nil
		}
	case 103:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:714
		{
			SDLVAL.stmt = SDLDollar[2].ifStmt
		}
	case 104:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:715
		{
			SDLVAL.stmt = SDLDollar[2].blockStmt
		}
	case 105:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:719
		{ // DISTRIBUTE($1) ... RBRACE($6)
			SDLVAL.sampleExpr = &SampleExpr{FromExpr: SDLDollar[2].expr}
			SDLVAL.sampleExpr.NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 106:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:725
		{
			SDLVAL.expr = nil
		}
	case 107:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:725
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 108:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:727
		{
			SDLVAL.tupleExpr = &TupleExpr{Children: append(SDLDollar[2].exprList, SDLDollar[4].expr)}
		}
	case 109:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:732
		{ // GO($1) ... BlockStmt($4)
			SDLVAL.expr = &GoExpr{Stmt: SDLDollar[2].blockStmt}
			SDLVAL.expr.(*GoExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].blockStmt.End())
		}
	case 110:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:736
		{
			SDLVAL.expr = &GoExpr{Expr: SDLDollar[2].expr}
			SDLVAL.expr.(*GoExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.End())
		}
	case 111:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:740
		{ // GO($1) ... BlockStmt($4)
			SDLVAL.expr = &GoExpr{LoopExpr: SDLDollar[2].expr, Stmt: SDLDollar[3].blockStmt}
			SDLVAL.expr.(*GoExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].blockStmt.End())
		}
	case 112:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:744
		{
			SDLVAL.expr = &GoExpr{LoopExpr: SDLDollar[2].expr, Expr: SDLDollar[3].expr}
			SDLVAL.expr.(*GoExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].expr.End())
		}
	case 113:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:753
		{
			SDLDollar[1].chainedExpr.Unchain(nil)
			SDLVAL.expr = SDLDollar[1].chainedExpr.UnchainedExpr
		}
	case 114:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:757
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 115:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:758
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 116:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:785
		{
			SDLVAL.chainedExpr = &ChainedExpr{Children: []Expr{SDLDollar[1].expr}}
		}
	case 117:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:788
		{
			SDLDollar[1].chainedExpr.Children = append(SDLDollar[1].chainedExpr.Children, SDLDollar[3].expr)
			SDLDollar[1].chainedExpr.Operators = append(SDLDollar[1].chainedExpr.Operators, SDLDollar[2].node.String())
			SDLVAL.chainedExpr = SDLDollar[1].chainedExpr
		}
	case 118:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:793
		{
			SDLDollar[1].chainedExpr.Children = append(SDLDollar[1].chainedExpr.Children, SDLDollar[3].expr)
			SDLDollar[1].chainedExpr.Operators = append(SDLDollar[1].chainedExpr.Operators, SDLDollar[2].node.String())
			SDLVAL.chainedExpr = SDLDollar[1].chainedExpr
		}
	case 119:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:800
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 120:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:802
		{
			SDLVAL.expr = &UnaryExpr{Operator: SDLDollar[1].node.String(), Right: SDLDollar[2].expr}
			SDLVAL.expr.(*UnaryExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 121:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:807
		{
			SDLVAL.expr = &UnaryExpr{Operator: SDLDollar[1].node.String(), Right: SDLDollar[2].expr}
			SDLVAL.expr.(*UnaryExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 122:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:815
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 123:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:816
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 124:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:820
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 125:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:821
		{
			SDLVAL.expr = SDLDollar[1].ident
		}
	case 126:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:822
		{
			SDLVAL.expr = SDLDollar[1].distributeExpr
		}
	case 127:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:823
		{
			SDLVAL.expr = SDLDollar[1].sampleExpr
		}
	case 128:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:824
		{
			SDLVAL.expr = SDLDollar[1].tupleExpr
		}
	case 129:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:825
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 130:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:826
		{
			SDLVAL.expr = SDLDollar[1].memberAccessExpr
		}
	case 131:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:827
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 132:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:830
		{
			SDLVAL.expr = SDLDollar[2].expr
		}
	case 133:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:833
		{
			// SDLlex.(*Lexer).lval)
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 134:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:837
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 135:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:838
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 136:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:839
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 137:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:840
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 138:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:844
		{ // Expression "[" Key "]"
			SDLVAL.expr = &IndexExpr{
				Receiver: SDLDollar[1].expr,
				Key:      SDLDollar[3].expr,
			}
			SDLVAL.expr.(*IndexExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), SDLDollar[4].node.End())
		}
	case 139:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:854
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			SDLVAL.memberAccessExpr = &MemberAccessExpr{
				Receiver: SDLDollar[1].ident,
				Member:   SDLDollar[3].ident,
			}
			SDLVAL.memberAccessExpr.NodeInfo = NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[3].ident.End())
		}
	case 140:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:861
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			SDLVAL.memberAccessExpr = &MemberAccessExpr{
				Receiver: SDLDollar[1].memberAccessExpr,
				Member:   SDLDollar[3].ident,
			}
			SDLVAL.memberAccessExpr.NodeInfo = NewNodeInfo(SDLDollar[1].memberAccessExpr.Pos(), SDLDollar[3].ident.End())
		}
	case 141:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:871
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			SDLVAL.expr = &CallExpr{Function: SDLDollar[1].expr}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), SDLDollar[3].node.End())
		}
	case 142:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:875
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := SDLDollar[4].node.(Node) // End at RPAREN
			if len(SDLDollar[3].exprList) > 0 {
				exprList := SDLDollar[3].exprList
				endNode = exprList[len(exprList)-1].(Node) // End at last arg
			}
			SDLVAL.expr = &CallExpr{
				Function: SDLDollar[1].expr,
				ArgList:  SDLDollar[3].exprList,
			}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), endNode.End())
		}
	case 143:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:887
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := SDLDollar[4].node.(Node) // End at RPAREN
			SDLVAL.expr = &CallExpr{
				Function: SDLDollar[1].expr,
				IsNamed:  true,
				ArgMap:   SDLDollar[3].exprMap,
			}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), endNode.End())
		}
	case 144:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:899
		{
			SDLVAL.distributeExpr = &DistributeExpr{TotalProb: SDLDollar[2].expr, Cases: SDLDollar[4].caseExprList, Default: SDLDollar[5].expr} /* TODO: Pos */
		}
	case 145:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:905
		{
			SDLVAL.caseExprList = []*CaseExpr{}
		}
	case 146:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:906
		{
			SDLVAL.caseExprList = SDLDollar[1].caseExprList
		}
	case 147:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:910
		{
			SDLVAL.caseExprList = []*CaseExpr{SDLDollar[1].caseExpr}
		}
	case 148:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:911
		{
			SDLVAL.caseExprList = append(SDLDollar[1].caseExprList, SDLDollar[2].caseExpr)
		}
	case 149:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:915
		{
			SDLVAL.caseExpr = &CaseExpr{Condition: SDLDollar[1].expr, Body: SDLDollar[3].expr}
		}
	case 150:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:918
		{ // allow optional comma
			SDLVAL.caseExpr = &CaseExpr{Condition: SDLDollar[1].expr, Body: SDLDollar[3].expr}
		}
	case 151:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:924
		{
			SDLVAL.expr = nil
		}
	case 152:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:925
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 153:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:929
		{
			SDLVAL.expr = SDLDollar[3].expr
		}
	case 154:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:930
		{
			SDLVAL.expr = SDLDollar[3].expr
		}
	case 155:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:934
		{
			SDLVAL.switchStmt = &SwitchStmt{Expr: SDLDollar[2].expr, Cases: SDLDollar[4].caseStmtList, Default: SDLDollar[5].stmt} /* TODO: Pos */
		}
	case 156:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:940
		{
			SDLVAL.caseStmtList = []*CaseStmt{}
		}
	case 157:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:941
		{
			SDLVAL.caseStmtList = SDLDollar[1].caseStmtList
		}
	case 158:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:945
		{
			SDLVAL.caseStmtList = []*CaseStmt{SDLDollar[1].caseStmt}
		}
	case 159:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:946
		{
			SDLVAL.caseStmtList = append(SDLDollar[1].caseStmtList, SDLDollar[2].caseStmt)
		}
	case 160:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:950
		{
			SDLVAL.caseStmt = &CaseStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[3].stmt.End()), Condition: SDLDollar[1].expr, Body: SDLDollar[3].stmt}
		}
	case 161:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:954
		{
			SDLVAL.stmt = nil
		}
	case 162:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:955
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 163:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:959
		{
			SDLVAL.stmt = SDLDollar[3].stmt
		}
	case 164:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:963
		{
			SDLVAL.stmt = &ExprStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[1].expr.(Node).End()), Expression: SDLDollar[1].expr}
		}
	case 165:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:964
		{
			SDLVAL.stmt = &ExprStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[1].expr.(Node).End()), Expression: SDLDollar[1].expr}
		}
	}
	goto SDLstack /* stack new state and value */
}
