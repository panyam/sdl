// Code generated by goyacc -o parser.go -p yy grammar.y. DO NOT EDIT.

//line grammar.y:2
package parser

import __yyfmt__ "fmt"

//line grammar.y:2

import (
	// "reflect"
	"fmt"
	gfn "github.com/panyam/goutils/fn"
	"io"
	"log"
)

// Function to be called by yyParse on error.
// Needs access to the lexer passed via %parse-param.
func yyerror(yyl yyLexer, msg string) {
	lexer := yyl.(LexerInterface)
	// line, col := lexer.Position()
	// log.Println("YYERROR MSG = ", msg)
	// errMsg := fmt.Sprintf("Error at Line %d, Col %d, Near ('%s'): %s", line, col, /* tokenString(lexer.LastToken()),*/ lexer.Text(), msg) // Added tokenString helper call
	lexer.Error(msg)
}

func yyerrok(lexer yyLexer) {
	log.Println("Error here... not sure how to recover")
	///ErrFlag = 0
}

//line grammar.y:31
type yySymType struct {
	yys int
	// Basic types from lexer
	sval string // Holds raw string values like identifiers, literal content

	// AST Nodes (using pointers) - these should have NodeInfo
	file          *File
	componentDecl *ComponentDecl
	systemDecl    *SystemDecl
	node          Node // Generic interface for lists and for accessing NodeInfo
	// tokenNode   TokenNode // Generic interface for lists and for accessing NodeInfo
	expr               Expr
	stmt               Stmt
	typeName           *TypeName
	paramDecl          *ParamDecl
	usesDecl           *UsesDecl
	methodDef          *MethodDecl
	instanceDecl       *InstanceDecl
	analyzeDecl        *AnalyzeDecl
	expectBlock        *ExpectationsDecl
	expectStmt         *ExpectStmt
	blockStmt          *BlockStmt
	ifStmt             *IfStmt
	distributeStmt     *DistributeStmt
	distributeCase     *DistributeCase
	distributeExpr     *DistributeExpr
	distributeExprCase *DistributeExprCase
	defaultCase        *DefaultCase
	goStmt             *GoStmt
	assignStmt         *AssignmentStmt
	optionsDecl        *OptionsDecl
	enumDecl           *EnumDecl
	importDecl         *ImportDecl
	waitStmt           *WaitStmt
	delayStmt          *DelayStmt

	// Slices for lists
	nodeList               []Node
	importDeclList         []*ImportDecl
	compBodyItem           ComponentDeclBodyItem
	compBodyItemList       []ComponentDeclBodyItem
	sysBodyItemList        []SystemDeclBodyItem
	paramList              []*ParamDecl
	assignList             []*AssignmentStmt
	exprList               []Expr
	stmtList               []Stmt
	ident                  *IdentifierExpr
	identList              []*IdentifierExpr
	distributeCaseList     []*DistributeCase
	distributeExprCaseList []*DistributeExprCase
	expectStmtList         []*ExpectStmt
	methodSigItemList      []*MethodDecl

	// Add field to store position for simple tokens if needed
	// posInfo     NodeInfo
}

const SYSTEM = 57346
const USES = 57347
const METHOD = 57348
const INSTANCE = 57349
const ANALYZE = 57350
const EXPECT = 57351
const LET = 57352
const IF = 57353
const ELSE = 57354
const DISTRIBUTE = 57355
const DEFAULT = 57356
const RETURN = 57357
const DELAY = 57358
const WAIT = 57359
const GO = 57360
const LOG = 57361
const SWITCH = 57362
const CASE = 57363
const FOR = 57364
const USE = 57365
const NATIVE = 57366
const LBRACE = 57367
const RBRACE = 57368
const OPTIONS = 57369
const ENUM = 57370
const COMPONENT = 57371
const PARAM = 57372
const IMPORT = 57373
const FROM = 57374
const AS = 57375
const ASSIGN = 57376
const COLON = 57377
const LPAREN = 57378
const RPAREN = 57379
const COMMA = 57380
const DOT = 57381
const ARROW = 57382
const PLUS_ASSIGN = 57383
const MINUS_ASSIGN = 57384
const MUL_ASSIGN = 57385
const DIV_ASSIGN = 57386
const LET_ASSIGN = 57387
const SEMICOLON = 57388
const INT = 57389
const FLOAT = 57390
const BOOL = 57391
const STRING = 57392
const DURATION = 57393
const NOT = 57394
const MINUS = 57395
const INT_LITERAL = 57396
const FLOAT_LITERAL = 57397
const STRING_LITERAL = 57398
const BOOL_LITERAL = 57399
const DURATION_LITERAL = 57400
const IDENTIFIER = 57401
const OR = 57402
const AND = 57403
const EQ = 57404
const NEQ = 57405
const LT = 57406
const LTE = 57407
const GT = 57408
const GTE = 57409
const PLUS = 57410
const MUL = 57411
const DIV = 57412
const MOD = 57413
const UMINUS = 57414

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SYSTEM",
	"USES",
	"METHOD",
	"INSTANCE",
	"ANALYZE",
	"EXPECT",
	"LET",
	"IF",
	"ELSE",
	"DISTRIBUTE",
	"DEFAULT",
	"RETURN",
	"DELAY",
	"WAIT",
	"GO",
	"LOG",
	"SWITCH",
	"CASE",
	"FOR",
	"USE",
	"NATIVE",
	"LBRACE",
	"RBRACE",
	"OPTIONS",
	"ENUM",
	"COMPONENT",
	"PARAM",
	"IMPORT",
	"FROM",
	"AS",
	"ASSIGN",
	"COLON",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"DOT",
	"ARROW",
	"PLUS_ASSIGN",
	"MINUS_ASSIGN",
	"MUL_ASSIGN",
	"DIV_ASSIGN",
	"LET_ASSIGN",
	"SEMICOLON",
	"INT",
	"FLOAT",
	"BOOL",
	"STRING",
	"DURATION",
	"NOT",
	"MINUS",
	"INT_LITERAL",
	"FLOAT_LITERAL",
	"STRING_LITERAL",
	"BOOL_LITERAL",
	"DURATION_LITERAL",
	"IDENTIFIER",
	"OR",
	"AND",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"PLUS",
	"MUL",
	"DIV",
	"MOD",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar.y:845
// --- Go Code Section ---

// Interface for the lexer required by the parser.
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
	Pos() int                  // Start byte position of the last token read
	End() int                  // End byte position of the last token read
	Text() string              // Text of the last token read
	Position() (line, col int) // Added: Get line/col of last token start
	LastToken() int            // Added: Get the token code that was just lexed
}

// Parse takes an input stream and attempts to parse it according to the SDL grammar. 22222
// It returns the root of the Abstract Syntax Tree (*File) if successful, or an error.
func Parse(input io.Reader) (*Lexer, *File, error) {
	// Reset global result before parsing
	lexer := NewLexer(input)
	// Set yyDebug = 3 for verbose parser debugging output
	// yyDebug = 3
	resultCode := yyParse(lexer) // Call the LALR parser generated by goyacc

	if resultCode != 0 {
		// A syntax error occurred. The lexer's Error method should have been called
		// and stored the error message.
		if lexer.lastError != nil {
			return lexer, nil, lexer.lastError
		}
		// Fallback error message if lexer didn't store one
		return lexer, nil, fmt.Errorf("syntax error near byte %d", lexer.Pos())
	}

	// Parsing succeeded
	if lexer.parseResult == nil {
		// This indicates a potential issue with the grammar's top rule action
		return lexer, nil, fmt.Errorf("parsing finished successfully, but no AST result was produced")
	}

	return lexer, lexer.parseResult, nil
}

// The parser expects the lexer variable to be named yyLex.
// We can satisfy this by creating a global or passing it via yyParseWithLexer.
// Using yyParseWithLexer is cleaner.

// Example main function (optional, for standalone testing)
/*
func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: parser <input_file>")
		return
	}
	filePath := os.Args[1]
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Printf("Error opening file %s: %v\n", filePath, err)
		return
	}
	defer file.Close()

	astRoot, err := Parse(file)
	if err != nil {
		fmt.Printf("Parsing failed: %v\n", err)
		// Error message should ideally include line/column from lexer
	} else {
		fmt.Println("Parsing successful!")
		// Print the AST (implement String() methods for AST nodes for nice output)
		fmt.Println(astRoot.String())
	}
}
*/

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 326

var yyAct = [...]uint8{
	53, 215, 137, 39, 171, 48, 173, 145, 43, 68,
	65, 86, 64, 124, 125, 126, 51, 115, 24, 60,
	66, 123, 114, 60, 52, 55, 67, 61, 216, 54,
	57, 56, 58, 59, 62, 138, 122, 174, 175, 60,
	147, 168, 163, 141, 139, 136, 83, 100, 92, 91,
	76, 90, 21, 138, 19, 102, 104, 107, 106, 17,
	109, 16, 112, 113, 108, 82, 70, 71, 77, 78,
	79, 80, 81, 73, 123, 20, 199, 131, 101, 110,
	129, 130, 99, 116, 117, 118, 119, 120, 121, 122,
	209, 208, 128, 132, 40, 127, 146, 135, 76, 189,
	184, 185, 133, 201, 169, 133, 188, 167, 6, 140,
	143, 221, 205, 191, 70, 71, 77, 78, 79, 80,
	81, 73, 105, 170, 144, 142, 151, 150, 15, 166,
	29, 219, 97, 207, 160, 161, 162, 152, 153, 154,
	155, 156, 157, 176, 76, 180, 96, 181, 179, 158,
	159, 183, 134, 88, 103, 11, 52, 60, 206, 89,
	70, 71, 77, 78, 79, 80, 81, 73, 149, 98,
	148, 187, 93, 12, 186, 9, 55, 190, 12, 13,
	10, 26, 14, 198, 193, 25, 200, 192, 23, 194,
	60, 203, 22, 18, 202, 178, 204, 87, 33, 46,
	195, 4, 197, 182, 210, 196, 212, 111, 49, 211,
	51, 84, 217, 218, 85, 213, 220, 214, 52, 55,
	76, 61, 222, 54, 57, 56, 58, 59, 62, 76,
	164, 95, 32, 60, 38, 31, 70, 71, 77, 78,
	79, 80, 81, 73, 76, 70, 71, 77, 78, 79,
	80, 81, 73, 172, 30, 165, 74, 75, 72, 69,
	70, 71, 77, 78, 79, 80, 81, 73, 51, 35,
	36, 63, 45, 44, 50, 47, 52, 55, 42, 61,
	41, 54, 57, 56, 58, 59, 62, 177, 9, 8,
	7, 60, 37, 10, 34, 27, 28, 5, 3, 94,
	2, 1, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 71,
	77, 78, 79, 80, 81, 73,
}

var yyPact = [...]int16{
	-1000, -1000, 151, -1000, -1000, -1000, -1000, -1000, -1000, 99,
	2, 0, 168, -5, 19, -7, 167, 163, -1000, 160,
	-1000, 156, 264, -1000, 208, -13, 191, 127, 264, -1000,
	-1000, -1000, -1000, -1000, -8, -10, -11, 146, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 36, -12, 32, 108, 184, -13, 184, -2, 184,
	-1000, 184, 184, -38, -44, -1000, 21, -56, -1000, 56,
	184, 184, -1000, -1000, -1000, -1000, 184, -1000, -1000, -1000,
	-1000, -1000, 67, -1000, 126, 191, -1000, -14, -1000, -1000,
	-24, -15, 73, -1000, -1000, -1000, -1000, -1000, -16, -1000,
	91, -1000, -1000, -1000, 132, 64, -1000, 90, -1000, 58,
	14, 145, -1000, 143, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, -17, 193, -1000,
	-1000, 70, -1000, -18, -1000, -1000, 68, 89, -1000, -1000,
	-22, -21, 184, 183, 266, -1000, 184, -1000, -1000, 125,
	-44, -1000, -32, -32, -32, -32, -32, -32, -56, -56,
	-1000, -1000, -1000, -1000, -1000, 63, -1000, -1000, -1000, -22,
	184, 69, 61, -1000, -24, 79, -1000, -1000, 165, -1000,
	32, 58, 62, -1000, -1000, 184, 66, -1000, -6, -22,
	78, 133, -1000, -1000, -1000, 107, -1000, -1000, 51, 50,
	-1000, -24, -1000, 132, -1000, 184, -31, -1000, 266, 266,
	-1000, -1000, -1000, 105, -31, -1000, 77, -1000, -1000, -1000,
	-1000, 184, -1000,
}

var yyPgo = [...]int16{
	0, 301, 300, 299, 298, 198, 297, 130, 296, 295,
	292, 108, 290, 65, 290, 289, 289, 289, 289, 3,
	287, 94, 280, 278, 275, 274, 273, 272, 272, 5,
	18, 0, 271, 12, 10, 20, 26, 9, 259, 258,
	257, 256, 256, 256, 256, 255, 255, 7, 254, 6,
	253, 4, 2, 253, 235, 232, 11, 231, 1, 217,
	215, 215, 215, 215, 215, 215, 215, 214, 211, 8,
	208, 207, 205, 203, 202, 200, 200, 200, 200, 200,
	199,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 4, 4, 4, 4, 4, 11,
	5, 5, 12, 13, 13, 15, 18, 18, 17, 17,
	16, 16, 68, 68, 67, 67, 56, 56, 9, 9,
	8, 8, 7, 7, 7, 7, 48, 48, 52, 53,
	53, 53, 53, 53, 54, 55, 55, 51, 51, 50,
	50, 49, 49, 6, 10, 10, 3, 3, 3, 57,
	57, 60, 60, 59, 59, 58, 61, 63, 63, 62,
	66, 66, 65, 65, 64, 64, 64, 64, 64, 64,
	30, 30, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 29, 21, 28, 22, 23, 23,
	27, 26, 14, 14, 24, 47, 47, 69, 20, 20,
	20, 70, 71, 71, 73, 73, 72, 75, 75, 74,
	80, 80, 80, 25, 31, 32, 32, 33, 33, 34,
	34, 34, 34, 34, 34, 34, 35, 35, 35, 36,
	36, 36, 36, 37, 37, 37, 38, 38, 38, 38,
	38, 39, 39, 39, 39, 39, 41, 40, 40, 46,
	46, 45, 45, 76, 77, 77, 79, 78, 78, 44,
	42, 43,
}

var yyR2 = [...]int8{
	0, 1, 0, 2, 1, 1, 1, 1, 1, 4,
	6, 5, 5, 1, 3, 2, 0, 1, 1, 2,
	1, 3, 0, 1, 1, 2, 5, 6, 0, 1,
	1, 2, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 3, 6, 7, 0, 1, 1,
	3, 2, 4, 5, 0, 2, 1, 1, 1, 3,
	7, 0, 1, 1, 2, 3, 5, 0, 1, 4,
	0, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 4, 3, 2, 2, 2,
	2, 2, 0, 3, 3, 0, 3, 4, 0, 2,
	2, 6, 0, 1, 0, 2, 3, 0, 1, 3,
	4, 2, 4, 4, 1, 1, 3, 1, 3, 1,
	3, 3, 3, 3, 3, 3, 1, 3, 3, 1,
	3, 3, 3, 1, 2, 2, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 4, 0,
	1, 1, 3, 6, 0, 2, 3, 0, 1, 3,
	4, 4,
}

var yyChk = [...]int16{
	-1000, -1, -2, -4, -5, -6, -11, -12, -15, 24,
	29, 4, 27, 28, 31, 29, 59, 59, 25, 59,
	56, 59, 25, 25, -30, 25, 25, -9, -8, -7,
	-48, -54, -55, -5, 30, 5, 6, -10, 26, -19,
	-21, -22, -23, -69, -26, -27, -80, -24, -29, -70,
	-25, 2, 10, -31, 15, 11, 17, 16, 18, 19,
	25, 13, 20, -32, -33, -34, -35, -36, -37, -38,
	52, 53, -39, 59, -41, -40, 36, 54, 55, 56,
	57, 58, -13, 59, -68, -67, -56, 6, 26, -7,
	59, 59, 59, 26, -3, -57, -11, -21, 23, 46,
	59, 46, -31, 46, -31, -13, -31, 59, -29, -31,
	-30, -71, -31, -31, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 53, 69, 70, 71, 39, 36, -37,
	-37, -31, 26, 38, 26, -56, 59, -52, 59, 59,
	36, 59, 34, -29, 34, -47, 38, 26, 25, 25,
	-33, -34, -35, -35, -35, -35, -35, -35, -36, -36,
	-37, -37, -37, 59, 37, -45, -31, 37, 59, 36,
	34, -51, -50, -49, 59, 59, -31, -20, 12, -19,
	-31, -31, -73, 26, 37, 38, -51, -31, 37, 38,
	-52, 34, -69, -29, -47, -75, -72, -74, -31, 14,
	-31, 37, -29, -52, -49, 34, 25, 26, 40, 40,
	-52, -29, -31, -60, -59, -58, 59, -19, -19, 26,
	-58, 34, -31,
}

var yyDef = [...]int16{
	2, -2, 1, 3, 4, 5, 6, 7, 8, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	15, 0, 28, 54, 0, 0, 22, 0, 29, 30,
	32, 33, 34, 35, 0, 0, 0, 0, 9, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 112, 0, 124, 125, 127, 129, 136, 139, 143,
	0, 0, 146, 147, 148, 149, 0, 151, 152, 153,
	154, 155, 0, 13, 0, 23, 24, 0, 11, 31,
	0, 0, 0, 53, 55, 56, 57, 58, 0, 93,
	0, 97, 98, 99, 0, 101, 100, 0, 121, 105,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	145, 0, 12, 0, 10, 25, 0, 36, 38, 44,
	47, 0, 0, 108, 0, 104, 0, 94, 114, 0,
	126, 128, 130, 131, 132, 133, 134, 135, 137, 138,
	140, 141, 142, 156, 157, 0, 161, 150, 14, 47,
	0, 0, 48, 49, 0, 59, 95, 107, 0, 120,
	122, 105, 117, 123, 158, 0, 0, 37, 0, 0,
	51, 0, 109, 110, 106, 0, 115, 118, 0, 0,
	162, 26, 45, 0, 50, 0, 61, 111, 0, 0,
	27, 46, 52, 0, 62, 63, 0, 116, 119, 60,
	64, 0, 65,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:166
		{
			ni := NodeInfo{}
			if len(yyDollar[1].nodeList) > 0 {
				ni.StartPos = yyDollar[1].nodeList[0].Pos()
				ni.StopPos = yyDollar[1].nodeList[len(yyDollar[1].nodeList)-1].End()
			}
			yylex.(*Lexer).parseResult = &File{NodeInfo: ni, Declarations: yyDollar[1].nodeList}
			// $$ = &File{NodeInfo: ni, Declarations: $1}
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:178
		{
			yyVAL.nodeList = []Node{}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:179
		{
			yyVAL.nodeList = append(yyDollar[1].nodeList, yyDollar[2].node)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:183
		{
			yyVAL.node = yyDollar[1].componentDecl
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:184
		{
			yyVAL.node = yyDollar[1].systemDecl
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:185
		{
			yyVAL.node = yyDollar[1].optionsDecl
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:186
		{
			yyVAL.node = yyDollar[1].enumDecl
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:187
		{
			yyVAL.node = yyDollar[1].importDecl
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:191
		{ // OPTIONS ($1) LBRACE ($2) StmtList ($3) RBRACE ($4)
			// Assume OPTIONS token itself doesn't carry complex NodeInfo from lexer for this example.
			// Span from LBRACE to RBRACE for body. If StmtList is empty, Body.NodeInfo might be tricky.
			/*
			   bodyStart := $2.(Node).Pos() // Position of LBRACE (assuming lexer returns it as Node)
			   bodyEnd := $4.(Node).Pos()   // Position of RBRACE (actually its start, use .End() for full span)
			   if len($3) > 0 { // If StmtList is not empty
			       bodyStart = $3[0].Pos()
			       bodyEnd = $3[len($3)-1].End()
			   }
			*/
			yyVAL.optionsDecl = &OptionsDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].node.(Node).End()), // Pos of OPTIONS, End of RBRACE
				Body: &BlockStmt{
					NodeInfo:   newNodeInfo(yyDollar[2].node.(Node).Pos(), yyDollar[4].node.(Node).End()),
					Statements: yyDollar[3].stmtList,
				},
			}
		}
	case 10:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:213
		{ // COMPONENT($1) ... RBRACE($5)
			yyVAL.componentDecl = &ComponentDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[6].node.(Node).End()),
				NameNode: yyDollar[3].ident,
				Body:     gfn.Map(yyDollar[5].methodSigItemList, func(m *MethodDecl) ComponentDeclBodyItem { return m }),
			}
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:220
		{ // COMPONENT($1) ... RBRACE($5)
			yyVAL.componentDecl = &ComponentDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].node.(Node).End()),
				NameNode: yyDollar[2].ident,
				Body:     yyDollar[4].compBodyItemList,
			}
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:230
		{ // ENUM($1) IDENTIFIER($2) ... RBRACE($5)
			yyVAL.enumDecl = &EnumDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].node.(Node).End()),
				NameNode:   yyDollar[2].ident, // $2 is an IdentifierExpr from lexer, has Pos/End
				ValuesNode: yyDollar[4].identList,
			}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:240
		{
			yyVAL.identList = []*IdentifierExpr{yyDollar[1].ident}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:241
		{
			yyVAL.identList = append(yyDollar[1].identList, yyDollar[3].ident)
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:245
		{ // IMPORT($1) STRING_LITERAL($2)
			yyVAL.importDecl = &ImportDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].expr.End()),
				Path:     yyDollar[2].expr.(*LiteralExpr), // $2 is a LiteralExpr from lexer
			}
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:253
		{
			yyVAL.importDeclList = nil
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:254
		{
			yyVAL.importDeclList = yyDollar[1].importDeclList
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:257
		{
			yyVAL.importDeclList = []*ImportDecl{yyDollar[1].importDecl}
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:258
		{
			yyVAL.importDeclList = append(yyVAL.importDeclList, yyDollar[1].importDeclList...)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:261
		{
			yyVAL.importDecl = &ImportDecl{ImportedItem: yyDollar[1].ident}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:262
		{
			yyVAL.importDecl = &ImportDecl{ImportedItem: yyDollar[1].ident, Alias: yyDollar[3].ident}
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:266
		{
			yyVAL.methodSigItemList = []*MethodDecl{}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:267
		{
			yyVAL.methodSigItemList = yyDollar[1].methodSigItemList
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:271
		{
			yyVAL.methodSigItemList = []*MethodDecl{yyDollar[1].methodDef}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:272
		{
			yyVAL.methodSigItemList = append(yyDollar[1].methodSigItemList, yyDollar[2].methodDef)
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:275
		{ // METHOD($1) ... BlockStmt($6)
			yyVAL.methodDef = &MethodDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].node.End()),
				NameNode:   yyDollar[2].ident,
				Parameters: yyDollar[4].paramList,
			}
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:282
		{ // METHOD($1) ... BlockStmt($8)
			yyVAL.methodDef = &MethodDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[6].typeName.End()),
				NameNode:   yyDollar[2].ident,
				Parameters: yyDollar[4].paramList,
				ReturnType: yyDollar[6].typeName,
			}
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:293
		{
			yyVAL.compBodyItemList = []ComponentDeclBodyItem{}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:294
		{
			yyVAL.compBodyItemList = yyDollar[1].compBodyItemList
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:298
		{
			yyVAL.compBodyItemList = []ComponentDeclBodyItem{yyDollar[1].compBodyItem}
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:299
		{
			yyVAL.compBodyItemList = append(yyDollar[1].compBodyItemList, yyDollar[2].compBodyItem)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:303
		{
			yyVAL.compBodyItem = yyDollar[1].paramDecl
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:304
		{
			yyVAL.compBodyItem = yyDollar[1].usesDecl
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:305
		{
			yyVAL.compBodyItem = yyDollar[1].methodDef
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:306
		{
			yyVAL.compBodyItem = yyDollar[1].componentDecl
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:310
		{ // PARAM($1) ...
			yyVAL.paramDecl = &ParamDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[3].typeName.End()),
				Name:     yyDollar[2].ident,
				Type:     yyDollar[3].typeName, // TypeName also needs to have NodeInfo
			}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:317
		{ // PARAM($1) ...
			yyVAL.paramDecl = &ParamDecl{
				NodeInfo:     newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].expr.End()),
				Name:         yyDollar[2].ident,
				Type:         yyDollar[3].typeName,
				DefaultValue: yyDollar[5].expr,
			}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:329
		{
			identNode := yyDollar[1].ident
			yyVAL.typeName = &TypeName{
				NodeInfo:     identNode.NodeInfo,
				EnumTypeName: identNode.Name,
			}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:341
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].node.(*TokenNode).NodeInfo, PrimitiveTypeName: "int"}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:342
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].node.(*TokenNode).NodeInfo, PrimitiveTypeName: "float"}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:343
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].node.(*TokenNode).NodeInfo, PrimitiveTypeName: "string"}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:344
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].node.(*TokenNode).NodeInfo, PrimitiveTypeName: "bool"}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:345
		{
			yyVAL.typeName = &TypeName{NodeInfo: yyDollar[1].node.(*TokenNode).NodeInfo, PrimitiveTypeName: "duration"}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:353
		{ // USES($1) ...
			yyVAL.usesDecl = &UsesDecl{
				NodeInfo:      newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[3].ident.End()),
				NameNode:      yyDollar[2].ident,
				ComponentNode: yyDollar[3].ident,
			}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:365
		{ // METHOD($1) ... BlockStmt($6)
			yyVAL.methodDef = &MethodDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[6].blockStmt.End()),
				NameNode:   yyDollar[2].ident,
				Parameters: yyDollar[4].paramList,
				Body:       yyDollar[6].blockStmt,
			}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:373
		{ // METHOD($1) ... BlockStmt($8)
			yyVAL.methodDef = &MethodDecl{
				NodeInfo:   newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[7].blockStmt.End()),
				NameNode:   yyDollar[2].ident,
				Parameters: yyDollar[4].paramList,
				ReturnType: yyDollar[6].typeName,
				Body:       yyDollar[7].blockStmt,
			}
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:385
		{
			yyVAL.paramList = []*ParamDecl{}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:386
		{
			yyVAL.paramList = yyDollar[1].paramList
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:390
		{
			yyVAL.paramList = []*ParamDecl{yyDollar[1].paramDecl}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:391
		{
			yyVAL.paramList = append(yyDollar[1].paramList, yyDollar[3].paramDecl)
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:395
		{ // PARAM($1) ...
			yyVAL.paramDecl = &ParamDecl{
				NodeInfo: newNodeInfo(yyDollar[1].ident.Pos(), yyDollar[2].typeName.End()),
				Name:     yyDollar[1].ident,
				Type:     yyDollar[2].typeName, // TypeName also needs to have NodeInfo
			}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:402
		{ // PARAM($1) ...
			yyVAL.paramDecl = &ParamDecl{
				NodeInfo:     newNodeInfo(yyDollar[1].ident.Pos(), yyDollar[4].expr.End()),
				Name:         yyDollar[1].ident,
				Type:         yyDollar[2].typeName,
				DefaultValue: yyDollar[4].expr,
			}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:414
		{ // SYSTEM($1) ... RBRACE($5)
			yyVAL.systemDecl = &SystemDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[5].node.(Node).End()),
				NameNode: yyDollar[2].ident,
				Body:     yyDollar[4].sysBodyItemList,
			}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:424
		{
			yyVAL.sysBodyItemList = []SystemDeclBodyItem{}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:425
		{
			yyVAL.sysBodyItemList = append(yyDollar[1].sysBodyItemList, yyDollar[2].node.(SystemDeclBodyItem))
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:429
		{
			yyVAL.node = yyDollar[1].instanceDecl
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:431
		{
			yyVAL.node = yyDollar[1].optionsDecl
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:432
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:436
		{ // IDENTIFIER($1) ...
			yyVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[3].ident.End()),
				NameNode:      yyDollar[2].ident,
				ComponentType: yyDollar[3].ident,
				Overrides:     []*AssignmentStmt{},
			}
		}
	case 60:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:444
		{ // IDENTIFIER($1) ...
			yyVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[7].node.End()),
				NameNode:      yyDollar[2].ident,
				ComponentType: yyDollar[3].ident,
				Overrides:     yyDollar[6].assignList,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:455
		{
			yyVAL.assignList = []*AssignmentStmt{}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:456
		{
			yyVAL.assignList = yyDollar[1].assignList
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:460
		{
			yyVAL.assignList = []*AssignmentStmt{yyDollar[1].assignStmt}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:461
		{
			yyVAL.assignList = append(yyDollar[1].assignList, yyDollar[2].assignStmt)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:465
		{ // IDENTIFIER($1) ...
			yyVAL.assignStmt = &AssignmentStmt{
				NodeInfo: newNodeInfo(yyDollar[1].ident.Pos(), yyDollar[3].expr.End()),
				Var:      yyDollar[1].ident,
				Value:    yyDollar[3].expr,
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:475
		{ // ANALYZE($1) ...
			callExpr, ok := yyDollar[4].expr.(*CallExpr)
			if !ok {
				yyerror(yylex, fmt.Sprintf("analyze target must be a method call, found %T at pos %d", yyDollar[4].expr, yyDollar[4].expr.(Node).Pos()))
			}
			endPos := 0
			if yyDollar[5].expectBlock != nil {
				endPos = yyDollar[5].expectBlock.End()
			} else {
				endPos = yyDollar[4].expr.End()
			}
			yyVAL.analyzeDecl = &AnalyzeDecl{
				NodeInfo:     newNodeInfo(yyDollar[1].node.(Node).Pos(), endPos),
				Name:         yyDollar[2].ident,
				Target:       callExpr,
				Expectations: yyDollar[5].expectBlock,
			}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:495
		{
			yyVAL.expectBlock = nil
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:495
		{
			yyVAL.expectBlock = yyDollar[1].expectBlock
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:498
		{ // EXPECT($1) ... RBRACE($4)
			log.Println("Did Expect Block Hit?")
			yyVAL.expectBlock = &ExpectationsDecl{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].node.(Node).End()),
				Expects:  yyDollar[3].expectStmtList,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:508
		{
			yyVAL.expectStmtList = []*ExpectStmt{}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:509
		{
			yyVAL.expectStmtList = yyDollar[1].expectStmtList
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:513
		{
			log.Println("Did we come here????")
			yyVAL.expectStmtList = []*ExpectStmt{yyDollar[1].expectStmt}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:517
		{
			log.Println("Why not here Did we come here????")
			cmpExp := yyDollar[3].expr.(*BinaryExpr)
			expct := &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expectStmtList[0].Pos(), yyDollar[3].expr.End()), Target: cmpExp.Left.(*MemberAccessExpr), Operator: cmpExp.Operator, Threshold: cmpExp.Right}
			yyVAL.expectStmtList = append(yyDollar[1].expectStmtList, expct)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:526
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: "==", Threshold: yyDollar[3].expr}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:527
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: "!=", Threshold: yyDollar[3].expr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:528
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: "<", Threshold: yyDollar[3].expr}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:529
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: "<=", Threshold: yyDollar[3].expr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:530
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: ">", Threshold: yyDollar[3].expr}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:531
		{
			yyVAL.expectStmt = &ExpectStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.End()), Target: yyDollar[1].expr.(*MemberAccessExpr), Operator: ">=", Threshold: yyDollar[3].expr}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:536
		{
			yyVAL.stmtList = []Stmt{}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:537
		{
			yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[2].stmt)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:540
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:541
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:542
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:543
		{
			yyVAL.stmt = yyDollar[1].ifStmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:544
		{
			yyVAL.stmt = yyDollar[1].waitStmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:545
		{
			yyVAL.stmt = yyDollar[1].delayStmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:546
		{
			yyVAL.stmt = yyDollar[1].goStmt
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:547
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:548
		{
			yyVAL.stmt = yyDollar[1].blockStmt
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:549
		{
			yyVAL.stmt = yyDollar[1].distributeStmt
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:550
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:552
		{
			yyerrok(yylex) /* Recover on semicolon */
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:557
		{
			yyVAL.blockStmt = &BlockStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[3].node.(Node).End()), Statements: yyDollar[2].stmtList}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:563
		{ // LET($1) ...
			yyVAL.stmt = &LetStmt{
				NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].expr.End()),
				Variable: yyDollar[2].ident,
				Value:    yyDollar[4].expr,
			}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:573
		{
			// This might conflict with InstanceDecl's Assignment rule if not careful.
			// Let's prefer LetStmt for variables. This rule might be removed.
			// For now, map it to AssignmentStmt AST node used by InstanceDecl.
			yyVAL.assignStmt = &AssignmentStmt{
				NodeInfo: newNodeInfo(yyDollar[1].ident.Pos(), yyDollar[3].expr.Pos()),
				Var:      yyDollar[1].ident,
				Value:    yyDollar[3].expr,
			}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:586
		{
			yyVAL.stmt = &ExprStmt{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[2].node.(Node).End()), Expression: yyDollar[1].expr}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:590
		{
			yyVAL.stmt = &ReturnStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].expr.(Node).End()), ReturnValue: yyDollar[2].expr}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:591
		{
			yyVAL.stmt = &ReturnStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].node.(Node).End()), ReturnValue: nil}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:595
		{
			yyVAL.delayStmt = &DelayStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].expr.End()), Duration: yyDollar[2].expr}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:599
		{ // WAIT($1) IDENTIFIER($2) ...
			idents := yyDollar[2].identList
			endNode := idents[len(idents)-1] // End at the last identifier in the list
			yyVAL.waitStmt = &WaitStmt{NodeInfo: newNodeInfo(yyDollar[1].node.Pos(), endNode.End()), Idents: idents}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:607
		{
			yyVAL.identList = nil
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:608
		{
			yyVAL.identList = []*IdentifierExpr{yyDollar[2].ident}
			if yyDollar[3].identList != nil {
				yyVAL.identList = append(yyVAL.identList, yyDollar[3].identList...)
			}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:615
		{ // LOG($1) Expression($2) ...
			args := []Expr{yyDollar[2].expr}
			endPos := 0
			exprList := yyDollar[3].exprList
			if exprList != nil {
				endPos = exprList[len(exprList)-1].End()
			} else {
				endPos = yyDollar[2].expr.End()
			}
			if len(exprList) > 0 { // $3 is CommaExpressionListOpt -> []Expr
				args = append(args, yyDollar[3].exprList...)
			}
			yyVAL.stmt = &LogStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), endPos), Args: args}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:632
		{
			yyVAL.exprList = nil
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:633
		{
			yyVAL.exprList = []Expr{yyDollar[2].expr}
			if yyDollar[3].exprList != nil {
				yyVAL.exprList = append(yyVAL.exprList, yyDollar[3].exprList...)
			}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:642
		{ // IF($1) ...
			endNode := Stmt(yyDollar[3].blockStmt)
			if yyDollar[4].stmt != nil {
				endNode = yyDollar[4].stmt
			} // End of Else block/IfStmt
			yyVAL.ifStmt = &IfStmt{
				NodeInfo:  newNodeInfo(yyDollar[1].node.(Node).Pos(), endNode.End()),
				Condition: yyDollar[2].expr,
				Then:      yyDollar[3].blockStmt,
				Else:      yyDollar[4].stmt,
			}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:655
		{
			yyVAL.stmt = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:656
		{
			yyVAL.stmt = yyDollar[2].ifStmt
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:657
		{
			yyVAL.stmt = yyDollar[2].blockStmt
		}
	case 111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:661
		{ // DISTRIBUTE($1) ... RBRACE($6)
			yyVAL.distributeStmt = &DistributeStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[6].node.(Node).End()), Total: yyDollar[2].expr, Cases: yyDollar[4].distributeCaseList, DefaultCase: yyDollar[5].defaultCase}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:666
		{
			yyVAL.expr = nil
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:666
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:669
		{
			yyVAL.distributeCaseList = []*DistributeCase{}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:670
		{
			yyVAL.distributeCaseList = append(yyDollar[1].distributeCaseList, yyDollar[2].distributeCase)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:674
		{
			yyVAL.distributeCase = &DistributeCase{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].stmt.End()), Probability: yyDollar[1].expr, Body: yyDollar[3].stmt}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:678
		{
			yyVAL.defaultCase = nil
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:679
		{
			yyVAL.defaultCase = yyDollar[1].defaultCase
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:683
		{
			yyVAL.defaultCase = &DefaultCase{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[3].stmt.End()), Body: yyDollar[3].stmt}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:687
		{ // GO($1) ... BlockStmt($4)
			yyVAL.goStmt = &GoStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[4].stmt.End()), VarName: yyDollar[2].ident, Stmt: yyDollar[4].stmt}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:690
		{ // GO($1) BlockStmt($2)
			yyVAL.goStmt = &GoStmt{NodeInfo: newNodeInfo(yyDollar[1].node.(Node).Pos(), yyDollar[2].blockStmt.End()), VarName: nil, Stmt: yyDollar[2].blockStmt}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:693
		{
			yyerror(yylex, fmt.Sprintf("`go` currently only supports assigning blocks, not expressions, at pos %d", yyDollar[1].node.(Node).Pos()))
			yyVAL.goStmt = &GoStmt{}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:700
		{
			yyerror(yylex, "Switch statement not defined")
			yyVAL.stmt = nil
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:703
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:704
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:705
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.String(), Right: yyDollar[3].expr}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:709
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:710
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.(Node).String(), Right: yyDollar[3].expr}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:713
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:714
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.String(), Right: yyDollar[3].expr}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:715
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.String(), Right: yyDollar[3].expr}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:716
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.String(), Right: yyDollar[3].expr}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:717
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.String(), Right: yyDollar[3].expr}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:718
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.String(), Right: yyDollar[3].expr}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:719
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.String(), Right: yyDollar[3].expr}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:723
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:724
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.String(), Right: yyDollar[3].expr}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:725
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.String(), Right: yyDollar[3].expr}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:728
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:729
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.String(), Right: yyDollar[3].expr}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:730
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.String(), Right: yyDollar[3].expr}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:731
		{
			yyVAL.expr = &BinaryExpr{NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].expr.(Node).End()), Left: yyDollar[1].expr, Operator: yyDollar[2].node.String(), Right: yyDollar[3].expr}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:734
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:736
		{
			yyVAL.expr = &UnaryExpr{NodeInfo: newNodeInfo(yyDollar[1].node.Pos(), yyDollar[2].expr.(Node).End()), Operator: yyDollar[1].node.String(), Right: yyDollar[2].expr}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:737
		{
			yyVAL.expr = &UnaryExpr{NodeInfo: newNodeInfo(yyDollar[1].node.Pos(), yyDollar[2].expr.(Node).End()), Operator: yyDollar[1].node.String(), Right: yyDollar[2].expr}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:741
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:742
		{
			yyVAL.expr = yyDollar[1].ident
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:743
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:744
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:747
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:751
		{
			// yylex.(*Lexer).lval)
			yyVAL.expr = yyDollar[1].expr
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:755
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:756
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:757
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:758
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:762
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			yyVAL.expr = &MemberAccessExpr{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].ident.End()),
				Receiver: yyDollar[1].expr,
				Member:   yyDollar[3].ident,
			}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:772
		{ // PrimaryExpr($1) LPAREN($2) RPAREN($3)
			yyVAL.expr = &CallExpr{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), yyDollar[3].node.(Node).End()),
				Function: yyDollar[1].expr,
				Args:     []Expr{},
			}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:779
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := yyDollar[4].node.(Node) // End at RPAREN
			if len(yyDollar[3].exprList) > 0 {
				exprList := yyDollar[3].exprList
				endNode = exprList[len(exprList)-1].(Node) // End at last arg
			}
			yyVAL.expr = &CallExpr{
				NodeInfo: newNodeInfo(yyDollar[1].expr.(Node).Pos(), endNode.End()),
				Function: yyDollar[1].expr,
				Args:     yyDollar[3].exprList,
			}
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:794
		{
			yyVAL.exprList = []Expr{}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:795
		{
			yyVAL.exprList = yyDollar[1].exprList
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:799
		{
			yyVAL.exprList = []Expr{yyDollar[1].expr}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:800
		{
			yyVAL.exprList = append(yyDollar[1].exprList, yyDollar[3].expr)
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:805
		{
			yyVAL.distributeExpr = &DistributeExpr{TotalProb: yyDollar[2].expr, Cases: yyDollar[4].distributeExprCaseList, Default: yyDollar[5].expr} /* TODO: Pos */
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:811
		{
			yyVAL.distributeExprCaseList = []*DistributeExprCase{}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:812
		{
			yyVAL.distributeExprCaseList = append(yyDollar[1].distributeExprCaseList, yyDollar[2].distributeExprCase)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:816
		{
			// Need to wrap in DistributeExprCase AST node
			yyVAL.distributeExprCase = &DistributeExprCase{Probability: yyDollar[1].expr, Body: yyDollar[3].expr} /* TODO: Pos */
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:823
		{
			yyVAL.expr = nil
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:824
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:828
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:833
		{
			yyerror(yylex, "Switch expression not fully defined yet")
			yyVAL.expr = nil
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:840
		{
			yyerror(yylex, "Case expression not fully defined yet")
			yyVAL.expr = nil
		}
	}
	goto yystack /* stack new state and value */
}
