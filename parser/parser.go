// Code generated by goyacc -o parser.go -p SDL grammar.y. DO NOT EDIT.

//line grammar.y:2
package parser

import __yyfmt__ "fmt"

//line grammar.y:2

import (
	// "reflect"
	"fmt"
	"io"
	"log"
)

// Function to be called by SDLParse on error.
// Needs access to the lexer passed via %parse-param.
func yyerror(yyl SDLLexer, msg string) {
	lexer := yyl.(LexerInterface)
	// line, col := lexer.Position()
	// log.Println("YYERROR MSG = ", msg)
	// errMsg := fmt.Sprintf("Error at Line %d, Col %d, Near ('%s'): %s", line, col, /* TokenString(lexer.LastToken()),*/ lexer.Text(), msg) // Added TokenString helper call
	lexer.Error(msg)
}

func yyerrok(lexer SDLLexer) {
	log.Println("Error here... not sure how to recover")
	///ErrFlag = 0
}

//line grammar.y:30
type SDLSymType struct {
	yys int
	// Basic types from lexer
	sval string // Holds raw string values like identifiers, literal content

	// AST Nodes (using pointers) - these should have NodeInfo
	file           *FileDecl
	componentDecl  *ComponentDecl
	systemDecl     *SystemDecl
	aggregatorDecl *AggregatorDecl
	node           Node // Generic interface for lists and for accessing NodeInfo
	// tokenNode   TokenNode // Generic interface for lists and for accessing NodeInfo
	expr         Expr
	chainedExpr  *ChainedExpr
	stmt         Stmt
	typeDecl     *TypeDecl
	paramDecl    *ParamDecl
	usesDecl     *UsesDecl
	methodDef    *MethodDecl
	instanceDecl *InstanceDecl
	analyzeDecl  *AnalyzeDecl
	expectBlock  *ExpectationsDecl
	expectStmt   *ExpectStmt
	blockStmt    *BlockStmt
	ifStmt       *IfStmt

	distributeExpr *DistributeExpr
	caseExpr       *CaseExpr

	switchStmt *SwitchStmt
	caseStmt   *CaseStmt

	tupleExpr   *TupleExpr
	goExpr      *GoExpr
	forStmt     *ForStmt
	assignStmt  *AssignmentStmt
	optionsDecl *OptionsDecl
	enumDecl    *EnumDecl
	importDecl  *ImportDecl
	waitExpr    *WaitExpr
	// delayStmt *DelayStmt
	sampleExpr *SampleExpr

	// Slices for lists
	nodeList               []Node
	caseExprList           []*CaseExpr
	typeDeclList           []*TypeDecl
	caseStmtList           []*CaseStmt
	importDeclList         []*ImportDecl
	compBodyItem           ComponentDeclBodyItem
	compBodyItemList       []ComponentDeclBodyItem
	sysBodyItemList        []SystemDeclBodyItem
	paramList              []*ParamDecl
	assignList             []*AssignmentStmt
	exprList               []Expr
	exprMap                map[string]Expr
	stmtList               []Stmt
	ident                  *IdentifierExpr
	identList              []*IdentifierExpr
	distributeExprCaseList []*CaseExpr
	expectStmtList         []*ExpectStmt
	methodSigItemList      []*MethodDecl

	// Add field to store position for simple tokens if needed
	// posInfo     NodeInfo
}

const SYSTEM = 57346
const USES = 57347
const AGGREGATOR = 57348
const METHOD = 57349
const ANALYZE = 57350
const EXPECT = 57351
const LET = 57352
const IF = 57353
const ELSE = 57354
const SAMPLE = 57355
const DISTRIBUTE = 57356
const DEFAULT = 57357
const RETURN = 57358
const DELAY = 57359
const WAIT = 57360
const GO = 57361
const GOBATCH = 57362
const USING = 57363
const SWITCH = 57364
const CASE = 57365
const FOR = 57366
const USE = 57367
const NATIVE = 57368
const LSQUARE = 57369
const RSQUARE = 57370
const LBRACE = 57371
const RBRACE = 57372
const OPTIONS = 57373
const ENUM = 57374
const COMPONENT = 57375
const PARAM = 57376
const IMPORT = 57377
const FROM = 57378
const AS = 57379
const ASSIGN = 57380
const COLON = 57381
const LPAREN = 57382
const RPAREN = 57383
const COMMA = 57384
const DOT = 57385
const ARROW = 57386
const LET_ASSIGN = 57387
const SEMICOLON = 57388
const INT = 57389
const FLOAT = 57390
const BOOL = 57391
const STRING = 57392
const DURATION = 57393
const INT_LITERAL = 57394
const FLOAT_LITERAL = 57395
const STRING_LITERAL = 57396
const BOOL_LITERAL = 57397
const DURATION_LITERAL = 57398
const IDENTIFIER = 57399
const OR = 57400
const AND = 57401
const EQ = 57402
const NEQ = 57403
const LT = 57404
const LTE = 57405
const GT = 57406
const GTE = 57407
const PLUS = 57408
const MUL = 57409
const DIV = 57410
const MOD = 57411
const DUAL_OP = 57412
const BINARY_NC_OP = 57413
const BINARY_OP = 57414
const UNARY_OP = 57415
const MINUS = 57416
const UMINUS = 57417

var SDLToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SYSTEM",
	"USES",
	"AGGREGATOR",
	"METHOD",
	"ANALYZE",
	"EXPECT",
	"LET",
	"IF",
	"ELSE",
	"SAMPLE",
	"DISTRIBUTE",
	"DEFAULT",
	"RETURN",
	"DELAY",
	"WAIT",
	"GO",
	"GOBATCH",
	"USING",
	"SWITCH",
	"CASE",
	"FOR",
	"USE",
	"NATIVE",
	"LSQUARE",
	"RSQUARE",
	"LBRACE",
	"RBRACE",
	"OPTIONS",
	"ENUM",
	"COMPONENT",
	"PARAM",
	"IMPORT",
	"FROM",
	"AS",
	"ASSIGN",
	"COLON",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"DOT",
	"ARROW",
	"LET_ASSIGN",
	"SEMICOLON",
	"INT",
	"FLOAT",
	"BOOL",
	"STRING",
	"DURATION",
	"INT_LITERAL",
	"FLOAT_LITERAL",
	"STRING_LITERAL",
	"BOOL_LITERAL",
	"DURATION_LITERAL",
	"IDENTIFIER",
	"OR",
	"AND",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"PLUS",
	"MUL",
	"DIV",
	"MOD",
	"DUAL_OP",
	"BINARY_NC_OP",
	"BINARY_OP",
	"UNARY_OP",
	"MINUS",
	"UMINUS",
}

var SDLStatenames = [...]string{}

const SDLEofCode = 1
const SDLErrCode = 2
const SDLInitialStackSize = 16

//line grammar.y:918
// --- Go Code Section ---

// Interface for the lexer required by the parser.
type LexerInterface interface {
	Lex(lval *SDLSymType) int
	Error(s string)
	Pos() int                  // Start byte position of the last token read
	End() int                  // End byte position of the last token read
	Text() string              // Text of the last token read
	Position() (line, col int) // Added: Get line/col of last token start
	LastToken() int            // Added: Get the token code that was just lexed
}

// Parse takes an input stream and attempts to parse it according to the SDL grammar. 22222
// It returns the root of the Abstract Syntax Tree (*FileDecl) if successful, or an error.
func Parse(input io.Reader) (*Lexer, *FileDecl, error) {
	// Reset global result before parsing
	lexer := NewLexer(input)
	// Set yyDebug = 3 for verbose parser debugging output
	// yyDebug = 3
	resultCode := SDLParse(lexer) // Call the LALR parser generated by goyacc

	if resultCode != 0 {
		// A syntax error occurred. The lexer's Error method should have been called
		// and stored the error message.
		if lexer.lastError != nil {
			return lexer, nil, lexer.lastError
		}
		// Fallback error message if lexer didn't store one
		return lexer, nil, fmt.Errorf("syntax error near byte %d (Line %d, Col %d)", lexer.location.Pos, lexer.location.Line, lexer.location.Col)
	}

	// Parsing succeeded
	if lexer.parseResult == nil {
		// This indicates a potential issue with the grammar's top rule action
		return lexer, nil, fmt.Errorf("parsing finished successfully, but no AST result was produced")
	}

	return lexer, lexer.parseResult, nil
}

// The parser expects the lexer variable to be named yyLex.
// We can satisfy this by creating a global or passing it via SDLParseWithLexer.
// Using SDLParseWithLexer is cleaner.

// Example main function (optional, for standalone testing)
/*
func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: parser <input_file>")
		return
	}
	filePath := os.Args[1]
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Printf("Error opening file %s: %v\n", filePath, err)
		return
	}
	defer file.Close()

	astRoot, err := Parse(file)
	if err != nil {
		fmt.Printf("Parsing failed: %v\n", err)
		// Error message should ideally include line/column from lexer
	} else {
		fmt.Println("Parsing successful!")
		// Print the AST (implement String() methods for AST nodes for nice output)
		fmt.Println(astRoot.String())
	}
}
*/

//line yacctab:1
var SDLExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 66,
	40, 113,
	-2, 154,
}

const SDLPrivate = 57344

const SDLLast = 466

var SDLAct = [...]int16{
	201, 56, 221, 219, 186, 211, 63, 125, 200, 122,
	118, 61, 185, 96, 139, 27, 46, 147, 92, 100,
	222, 36, 90, 89, 232, 190, 119, 74, 120, 121,
	158, 152, 159, 147, 146, 30, 97, 180, 72, 176,
	175, 155, 153, 28, 66, 93, 73, 67, 106, 91,
	146, 105, 42, 22, 29, 26, 101, 24, 23, 40,
	57, 84, 85, 86, 87, 88, 77, 45, 107, 115,
	126, 128, 129, 10, 251, 247, 238, 230, 14, 135,
	206, 240, 123, 124, 114, 134, 216, 217, 205, 204,
	137, 138, 140, 132, 130, 217, 203, 202, 260, 141,
	9, 134, 145, 173, 156, 15, 16, 13, 142, 12,
	151, 142, 104, 259, 154, 112, 101, 157, 150, 149,
	3, 161, 162, 66, 142, 73, 67, 160, 111, 243,
	31, 178, 171, 144, 174, 165, 32, 255, 66, 242,
	73, 67, 239, 179, 143, 223, 169, 189, 181, 131,
	163, 164, 38, 188, 249, 244, 187, 191, 182, 183,
	33, 18, 102, 195, 19, 17, 51, 21, 52, 194,
	250, 246, 148, 103, 70, 177, 166, 72, 212, 213,
	39, 207, 37, 73, 214, 192, 193, 53, 218, 50,
	208, 18, 72, 35, 13, 50, 34, 215, 65, 25,
	41, 184, 133, 231, 225, 236, 228, 233, 229, 224,
	197, 212, 49, 113, 117, 6, 237, 226, 108, 15,
	227, 198, 241, 199, 62, 234, 235, 245, 78, 90,
	89, 209, 248, 210, 74, 120, 121, 136, 66, 252,
	73, 67, 170, 220, 59, 254, 253, 110, 48, 256,
	257, 47, 258, 90, 89, 66, 91, 73, 67, 90,
	89, 94, 127, 95, 74, 120, 121, 116, 84, 85,
	86, 87, 88, 77, 81, 75, 83, 82, 76, 80,
	91, 79, 60, 58, 196, 20, 91, 168, 5, 123,
	124, 11, 84, 85, 86, 87, 88, 77, 84, 85,
	86, 87, 88, 172, 90, 89, 54, 98, 99, 74,
	120, 121, 43, 123, 124, 44, 8, 7, 4, 123,
	124, 109, 2, 1, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 86, 87, 88, 77, 65,
	70, 0, 90, 89, 0, 69, 0, 74, 0, 0,
	0, 71, 0, 68, 123, 124, 0, 0, 72, 167,
	65, 70, 0, 90, 89, 0, 69, 0, 74, 91,
	0, 0, 71, 0, 68, 64, 0, 0, 0, 72,
	55, 84, 85, 86, 87, 88, 77, 0, 0, 0,
	91, 90, 89, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 84, 85, 86, 87, 88, 77, 65, 70,
	0, 90, 89, 0, 69, 0, 74, 0, 91, 0,
	71, 0, 68, 0, 0, 0, 0, 72, 0, 0,
	84, 85, 86, 87, 88, 77, 0, 0, 91, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	84, 85, 86, 87, 88, 77,
}

var SDLPact = [...]int16{
	-1000, -1000, 74, -1000, -1000, -1000, -1000, -1000, -1000, 158,
	-1000, -1000, -4, 1, 0, 170, -2, -14, -3, -14,
	94, -1000, 123, 167, 164, -1000, 153, -1000, 112, 151,
	-1000, 5, -4, -5, 161, -1000, 360, -12, -21, 155,
	-1000, -1000, -1000, 143, 161, -1000, -1000, -1000, -1000, -1000,
	-6, -9, -14, 128, 188, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -12, -1000, -1000, 291, 216,
	291, 291, -1000, 109, -12, 175, -1000, 58, -1000, -1000,
	-1000, -1000, 36, -1000, -1000, -1000, -1000, -1000, -1000, 291,
	291, 291, 69, -1000, 103, 91, -1000, -23, 142, 155,
	-1000, -1000, -14, -1000, -1000, -7, -15, 148, -1000, -1000,
	-1000, -1000, -1000, -16, 66, 408, -42, -1000, -1000, -1000,
	9, 291, 109, 240, 240, -1000, -1000, -1000, 148, 147,
	339, 246, 82, 291, -17, -18, 146, -1000, -1000, 89,
	102, -1000, -20, -23, -21, 121, 174, -23, -1000, -1000,
	-1000, 118, 291, 107, -1000, -32, 291, -1000, 240, 240,
	-1000, -1000, 9, -1000, -1000, 198, 291, -1000, -1000, 55,
	47, -1000, 42, 388, 162, -1000, -1000, 291, 291, -1000,
	-1000, -1000, -1000, 291, -23, 45, -1000, 291, -1000, -37,
	105, -1000, -1000, -1000, -1000, -1000, -1000, 163, 191, 291,
	-1000, 33, 291, -1000, -33, -1000, 291, -1000, -1000, 190,
	291, -1000, 32, 101, -1000, 53, -1000, -23, -1000, 98,
	87, -1000, 117, -37, -1000, -1000, 141, -1000, 31, -1000,
	408, -1000, 116, -1000, 140, -1000, 30, -1000, 291, -1000,
	-1000, -1000, -1000, -37, 291, 96, -1000, 408, -1000, 291,
	-1000, 291, 71, -1000, -1000, -1000, -1000, -1000, 56, -1000,
	-1000,
}

var SDLPgo = [...]int16{
	0, 323, 322, 321, 318, 212, 317, 316, 67, 315,
	312, 19, 308, 307, 306, 73, 291, 18, 167, 288,
	285, 1, 284, 60, 283, 282, 281, 6, 21, 279,
	0, 26, 9, 278, 7, 277, 276, 275, 274, 10,
	267, 16, 13, 263, 261, 4, 12, 251, 248, 15,
	247, 244, 2, 243, 3, 11, 14, 242, 237, 5,
	233, 231, 228, 226, 225, 224, 8, 223, 221, 220,
	217, 214,
}

var SDLR1 = [...]int8{
	0, 1, 2, 2, 2, 2, 4, 4, 4, 4,
	4, 4, 15, 5, 5, 16, 17, 17, 19, 20,
	20, 18, 18, 49, 49, 13, 13, 12, 12, 11,
	11, 10, 10, 9, 9, 8, 8, 8, 8, 41,
	41, 41, 45, 45, 45, 46, 46, 47, 47, 48,
	44, 44, 43, 43, 42, 42, 6, 7, 14, 14,
	3, 3, 3, 50, 50, 54, 54, 53, 53, 52,
	28, 28, 21, 21, 21, 21, 21, 21, 21, 21,
	27, 51, 23, 25, 25, 39, 39, 57, 57, 56,
	56, 55, 22, 22, 22, 26, 58, 58, 29, 71,
	71, 71, 71, 30, 30, 30, 40, 40, 40, 31,
	31, 31, 32, 32, 37, 37, 37, 37, 37, 37,
	37, 37, 38, 33, 33, 33, 33, 33, 36, 35,
	35, 34, 34, 34, 62, 61, 61, 60, 60, 59,
	59, 64, 64, 63, 63, 65, 68, 68, 67, 67,
	66, 70, 70, 69, 24, 24,
}

var SDLR2 = [...]int8{
	0, 1, 0, 2, 2, 2, 1, 1, 1, 3,
	1, 1, 4, 6, 5, 5, 1, 3, 4, 1,
	3, 1, 3, 4, 5, 0, 1, 1, 2, 1,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	4, 5, 1, 3, 4, 1, 3, 3, 6, 3,
	0, 1, 1, 3, 2, 4, 5, 3, 0, 2,
	1, 1, 1, 3, 6, 0, 1, 1, 3, 3,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 4, 2, 2, 2, 4, 3, 5, 1,
	3, 4, 0, 2, 2, 2, 0, 1, 5, 2,
	2, 3, 3, 1, 1, 1, 1, 3, 3, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 4, 3,
	3, 3, 4, 4, 6, 0, 1, 1, 2, 3,
	4, 0, 1, 3, 4, 6, 0, 1, 1, 2,
	3, 0, 1, 3, 1, 1,
}

var SDLChk = [...]int16{
	-1000, -1, -2, 46, -4, -19, -5, -6, -7, 26,
	-15, -16, 35, 33, 4, 31, 32, 7, 33, 6,
	-20, -18, 57, 57, 57, 29, 57, -49, 57, 57,
	-49, 36, 42, 37, 29, 29, -28, 29, 40, 29,
	54, -18, 57, -10, -9, -8, -41, -47, -48, -5,
	34, 5, 7, 26, -14, 30, -21, -23, -24, -51,
	-25, -55, -65, -27, 46, 10, -34, -39, 24, 16,
	11, 22, 29, -32, 18, -37, -33, 57, -62, -26,
	-29, -38, -35, -36, 52, 53, 54, 55, 56, 14,
	13, 40, -17, 57, -44, -43, -42, 57, -13, -12,
	-11, -41, 7, 30, -8, 57, 57, -49, 30, -3,
	-50, -15, -23, 25, -17, -30, -40, -71, -39, -31,
	19, 20, -32, 73, 74, -34, -30, 46, -30, -30,
	-28, 40, -17, 27, 43, 43, -58, -30, -30, -56,
	-30, 30, 42, 41, 42, -45, 57, 40, 30, -11,
	-49, -45, 38, 57, -27, 57, 38, -21, 72, 74,
	-27, -30, -30, -31, -31, -27, 29, 30, 41, -56,
	-57, -30, 57, 21, -30, 57, 57, 29, 42, 41,
	57, -45, -42, 38, 27, -46, -45, 38, -30, 40,
	57, -30, -31, -31, -27, -30, -22, 12, -68, -67,
	-66, -30, 42, 41, 42, 41, 38, -34, 28, -61,
	-60, -59, -30, -30, -30, -46, 41, 42, -30, -54,
	-53, -52, 57, 40, -55, -27, -70, -69, 15, -66,
	44, -30, 57, -30, -64, -63, 15, -59, 44, 41,
	28, -45, 41, 42, 38, -54, 30, 44, -21, 38,
	30, 44, -30, -52, -30, 41, -21, -30, -30, 42,
	42,
}

var SDLDef = [...]int16{
	2, -2, 1, 3, 4, 5, 6, 7, 8, 0,
	10, 11, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 19, 21, 0, 0, 70, 0, 9, 0, 0,
	57, 0, 0, 0, 31, 58, 0, 0, 50, 25,
	18, 20, 22, 0, 32, 33, 35, 36, 37, 38,
	0, 0, 0, 0, 0, 12, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 0, -2, 155, 0, 0,
	0, 0, 70, 0, 0, 112, 114, 115, 116, 117,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 96,
	0, 0, 0, 16, 0, 51, 52, 0, 0, 26,
	27, 29, 0, 14, 34, 0, 0, 0, 56, 59,
	60, 61, 62, 0, 0, 0, 103, 104, 105, 106,
	0, 0, 109, 0, 0, 113, 83, 84, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 97, 95, 0,
	89, 15, 0, 23, 0, 54, 42, 0, 13, 28,
	30, 39, 0, 47, 49, 0, 0, 81, 0, 0,
	99, 100, 0, 110, 111, 92, 146, 80, 131, 0,
	0, 89, 115, 0, 0, 129, 130, 135, 0, 122,
	17, 24, 53, 0, 0, 0, 45, 0, 40, 65,
	63, 82, 107, 108, 101, 102, 91, 0, 151, 147,
	148, 0, 0, 132, 0, 133, 0, 86, 128, 141,
	136, 137, 0, 90, 55, 0, 43, 0, 41, 0,
	66, 67, 0, 65, 93, 94, 0, 152, 0, 149,
	0, 90, 0, 87, 0, 142, 0, 138, 0, 98,
	44, 46, 48, 0, 0, 0, 145, 0, 150, 0,
	134, 0, 139, 68, 69, 64, 153, 88, 143, 140,
	144,
}

var SDLTok1 = [...]int8{
	1,
}

var SDLTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75,
}

var SDLTok3 = [...]int8{
	0,
}

var SDLErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	SDLDebug        = 0
	SDLErrorVerbose = false
)

type SDLLexer interface {
	Lex(lval *SDLSymType) int
	Error(s string)
}

type SDLParser interface {
	Parse(SDLLexer) int
	Lookahead() int
}

type SDLParserImpl struct {
	lval  SDLSymType
	stack [SDLInitialStackSize]SDLSymType
	char  int
}

func (p *SDLParserImpl) Lookahead() int {
	return p.char
}

func SDLNewParser() SDLParser {
	return &SDLParserImpl{}
}

const SDLFlag = -1000

func SDLTokname(c int) string {
	if c >= 1 && c-1 < len(SDLToknames) {
		if SDLToknames[c-1] != "" {
			return SDLToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func SDLStatname(s int) string {
	if s >= 0 && s < len(SDLStatenames) {
		if SDLStatenames[s] != "" {
			return SDLStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func SDLErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !SDLErrorVerbose {
		return "syntax error"
	}

	for _, e := range SDLErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + SDLTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(SDLPact[state])
	for tok := TOKSTART; tok-1 < len(SDLToknames); tok++ {
		if n := base + tok; n >= 0 && n < SDLLast && int(SDLChk[int(SDLAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if SDLDef[state] == -2 {
		i := 0
		for SDLExca[i] != -1 || int(SDLExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; SDLExca[i] >= 0; i += 2 {
			tok := int(SDLExca[i])
			if tok < TOKSTART || SDLExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if SDLExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += SDLTokname(tok)
	}
	return res
}

func SDLlex1(lex SDLLexer, lval *SDLSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(SDLTok1[0])
		goto out
	}
	if char < len(SDLTok1) {
		token = int(SDLTok1[char])
		goto out
	}
	if char >= SDLPrivate {
		if char < SDLPrivate+len(SDLTok2) {
			token = int(SDLTok2[char-SDLPrivate])
			goto out
		}
	}
	for i := 0; i < len(SDLTok3); i += 2 {
		token = int(SDLTok3[i+0])
		if token == char {
			token = int(SDLTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(SDLTok2[1]) /* unknown char */
	}
	if SDLDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", SDLTokname(token), uint(char))
	}
	return char, token
}

func SDLParse(SDLlex SDLLexer) int {
	return SDLNewParser().Parse(SDLlex)
}

func (SDLrcvr *SDLParserImpl) Parse(SDLlex SDLLexer) int {
	var SDLn int
	var SDLVAL SDLSymType
	var SDLDollar []SDLSymType
	_ = SDLDollar // silence set and not used
	SDLS := SDLrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	SDLstate := 0
	SDLrcvr.char = -1
	SDLtoken := -1 // SDLrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		SDLstate = -1
		SDLrcvr.char = -1
		SDLtoken = -1
	}()
	SDLp := -1
	goto SDLstack

ret0:
	return 0

ret1:
	return 1

SDLstack:
	/* put a state and value onto the stack */
	if SDLDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", SDLTokname(SDLtoken), SDLStatname(SDLstate))
	}

	SDLp++
	if SDLp >= len(SDLS) {
		nyys := make([]SDLSymType, len(SDLS)*2)
		copy(nyys, SDLS)
		SDLS = nyys
	}
	SDLS[SDLp] = SDLVAL
	SDLS[SDLp].yys = SDLstate

SDLnewstate:
	SDLn = int(SDLPact[SDLstate])
	if SDLn <= SDLFlag {
		goto SDLdefault /* simple state */
	}
	if SDLrcvr.char < 0 {
		SDLrcvr.char, SDLtoken = SDLlex1(SDLlex, &SDLrcvr.lval)
	}
	SDLn += SDLtoken
	if SDLn < 0 || SDLn >= SDLLast {
		goto SDLdefault
	}
	SDLn = int(SDLAct[SDLn])
	if int(SDLChk[SDLn]) == SDLtoken { /* valid shift */
		SDLrcvr.char = -1
		SDLtoken = -1
		SDLVAL = SDLrcvr.lval
		SDLstate = SDLn
		if Errflag > 0 {
			Errflag--
		}
		goto SDLstack
	}

SDLdefault:
	/* default state action */
	SDLn = int(SDLDef[SDLstate])
	if SDLn == -2 {
		if SDLrcvr.char < 0 {
			SDLrcvr.char, SDLtoken = SDLlex1(SDLlex, &SDLrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if SDLExca[xi+0] == -1 && int(SDLExca[xi+1]) == SDLstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			SDLn = int(SDLExca[xi+0])
			if SDLn < 0 || SDLn == SDLtoken {
				break
			}
		}
		SDLn = int(SDLExca[xi+1])
		if SDLn < 0 {
			goto ret0
		}
	}
	if SDLn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			SDLlex.Error(SDLErrorMessage(SDLstate, SDLtoken))
			Nerrs++
			if SDLDebug >= 1 {
				__yyfmt__.Printf("%s", SDLStatname(SDLstate))
				__yyfmt__.Printf(" saw %s\n", SDLTokname(SDLtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for SDLp >= 0 {
				SDLn = int(SDLPact[SDLS[SDLp].yys]) + SDLErrCode
				if SDLn >= 0 && SDLn < SDLLast {
					SDLstate = int(SDLAct[SDLn]) /* simulate a shift of "error" */
					if int(SDLChk[SDLstate]) == SDLErrCode {
						goto SDLstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if SDLDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", SDLS[SDLp].yys)
				}
				SDLp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if SDLDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", SDLTokname(SDLtoken))
			}
			if SDLtoken == SDLEofCode {
				goto ret1
			}
			SDLrcvr.char = -1
			SDLtoken = -1
			goto SDLnewstate /* try again in the same state */
		}
	}

	/* reduction by production SDLn */
	if SDLDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", SDLn, SDLStatname(SDLstate))
	}

	SDLnt := SDLn
	SDLpt := SDLp
	_ = SDLpt // guard against "declared and not used"

	SDLp -= int(SDLR2[SDLn])
	// SDLp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if SDLp+1 >= len(SDLS) {
		nyys := make([]SDLSymType, len(SDLS)*2)
		copy(nyys, SDLS)
		SDLS = nyys
	}
	SDLVAL = SDLS[SDLp+1]

	/* consult goto table to find next state */
	SDLn = int(SDLR1[SDLn])
	SDLg := int(SDLPgo[SDLn])
	SDLj := SDLg + SDLS[SDLp].yys + 1

	if SDLj >= SDLLast {
		SDLstate = int(SDLAct[SDLg])
	} else {
		SDLstate = int(SDLAct[SDLj])
		if int(SDLChk[SDLstate]) != -SDLn {
			SDLstate = int(SDLAct[SDLg])
		}
	}
	// dummy call; replaced with literal code
	switch SDLnt {

	case 1:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:183
		{
			ni := NodeInfo{}
			if len(SDLDollar[1].nodeList) > 0 {
				ni.StartPos = SDLDollar[1].nodeList[0].Pos()
				ni.StopPos = SDLDollar[1].nodeList[len(SDLDollar[1].nodeList)-1].End()
			}
			SDLlex.(*Lexer).parseResult = &FileDecl{NodeInfo: ni, Declarations: SDLDollar[1].nodeList}
			// $$ = &File{NodeInfo: ni, Declarations: $1}
		}
	case 2:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:195
		{
			SDLVAL.nodeList = []Node{}
		}
	case 3:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:196
		{
			SDLVAL.nodeList = SDLDollar[1].nodeList
		}
	case 4:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:197
		{
			SDLVAL.nodeList = append(SDLDollar[1].nodeList, SDLDollar[2].node)
		}
	case 5:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:200
		{
			for _, imp := range SDLDollar[2].importDeclList {
				SDLDollar[1].nodeList = append(SDLDollar[1].nodeList, imp)
			}
			SDLVAL.nodeList = SDLDollar[1].nodeList
		}
	case 6:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:209
		{
			SDLVAL.node = SDLDollar[1].componentDecl
		}
	case 7:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:210
		{
			SDLVAL.node = SDLDollar[1].systemDecl
		}
	case 8:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:211
		{
			SDLVAL.node = SDLDollar[1].aggregatorDecl
		}
	case 9:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:212
		{
			SDLDollar[3].methodDef.IsNative = true
			SDLVAL.node = SDLDollar[3].methodDef
		}
	case 10:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:216
		{
			SDLVAL.node = SDLDollar[1].optionsDecl
		}
	case 11:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:217
		{
			SDLVAL.node = SDLDollar[1].enumDecl
		}
	case 12:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:221
		{ // OPTIONS ($1) LBRACE ($2) StmtList ($3) RBRACE ($4)
			// Assume OPTIONS token itself doesn't carry complex NodeInfo from lexer for this example.
			// Span from LBRACE to RBRACE for body. If StmtList is empty, Body.NodeInfo might be tricky.
			/*
			   bodyStart := $2.(Node).Pos() // Position of LBRACE (assuming lexer returns it as Node)
			   bodyEnd := $4.(Node).Pos()   // Position of RBRACE (actually its start, use .End() for full span)
			   if len($3) > 0 { // If StmtList is not empty
			       bodyStart = $3[0].Pos()
			       bodyEnd = $3[len($3)-1].End()
			   }
			*/
			SDLVAL.optionsDecl = &OptionsDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].node.(Node).End()), // Pos of OPTIONS, End of RBRACE
				Body: &BlockStmt{
					NodeInfo:   NewNodeInfo(SDLDollar[2].node.(Node).Pos(), SDLDollar[4].node.(Node).End()),
					Statements: SDLDollar[3].stmtList,
				},
			}
		}
	case 13:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:243
		{ // COMPONENT($1) ... RBRACE($5)
			SDLVAL.componentDecl = &ComponentDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.(Node).End()),
				Name:     SDLDollar[3].ident,
				Body:     SDLDollar[5].compBodyItemList,
				IsNative: true,
			}
		}
	case 14:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:251
		{ // COMPONENT($1) ... RBRACE($5)
			SDLVAL.componentDecl = &ComponentDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Name:     SDLDollar[2].ident,
				Body:     SDLDollar[4].compBodyItemList,
			}
		}
	case 15:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:261
		{ // ENUM($1) IDENTIFIER($2) ... RBRACE($5)
			SDLVAL.enumDecl = &EnumDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Name:     SDLDollar[2].ident, // $2 is an IdentifierExpr from lexer, has Pos/End
				Values:   SDLDollar[4].identList,
			}
		}
	case 16:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:271
		{
			SDLVAL.identList = []*IdentifierExpr{SDLDollar[1].ident}
		}
	case 17:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:272
		{
			SDLVAL.identList = append(SDLDollar[1].identList, SDLDollar[3].ident)
		}
	case 18:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:276
		{ // IMPORT($1) STRING_LITERAL($2)
			path := SDLDollar[4].expr.(*LiteralExpr)
			for _, imp := range SDLDollar[2].importDeclList {
				imp.Path = path
			}
			SDLVAL.importDeclList = SDLDollar[2].importDeclList
		}
	case 19:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:285
		{
			SDLVAL.importDeclList = []*ImportDecl{SDLDollar[1].importDecl}
		}
	case 20:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:286
		{
			SDLVAL.importDeclList = append(SDLVAL.importDeclList, SDLDollar[3].importDecl)
		}
	case 21:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:289
		{
			SDLVAL.importDecl = &ImportDecl{ImportedItem: SDLDollar[1].ident, Alias: SDLDollar[1].ident}
		}
	case 22:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:290
		{
			SDLVAL.importDecl = &ImportDecl{ImportedItem: SDLDollar[1].ident, Alias: SDLDollar[3].ident}
		}
	case 23:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:294
		{ // METHOD($1) ... BlockStmt($6)
			SDLVAL.methodDef = &MethodDecl{
				NodeInfo:   NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[4].node.End()),
				Name:       SDLDollar[1].ident,
				Parameters: SDLDollar[3].paramList,
			}
		}
	case 24:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:301
		{ // METHOD($1) ... BlockStmt($8)
			SDLVAL.methodDef = &MethodDecl{
				NodeInfo:   NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[5].typeDecl.End()),
				Name:       SDLDollar[1].ident,
				Parameters: SDLDollar[3].paramList,
				ReturnType: SDLDollar[5].typeDecl,
			}
		}
	case 25:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:312
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{}
		}
	case 26:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:313
		{
			SDLVAL.compBodyItemList = SDLDollar[1].compBodyItemList
		}
	case 27:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:317
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{SDLDollar[1].compBodyItem}
		}
	case 28:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:318
		{
			SDLVAL.compBodyItemList = append(SDLDollar[1].compBodyItemList, SDLDollar[2].compBodyItem)
		}
	case 29:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:322
		{
			SDLVAL.compBodyItem = SDLDollar[1].paramDecl
		}
	case 30:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:323
		{
			SDLVAL.compBodyItem = SDLDollar[2].methodDef
		}
	case 31:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:328
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{}
		}
	case 32:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:329
		{
			SDLVAL.compBodyItemList = SDLDollar[1].compBodyItemList
		}
	case 33:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:333
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{SDLDollar[1].compBodyItem}
		}
	case 34:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:334
		{
			SDLVAL.compBodyItemList = append(SDLDollar[1].compBodyItemList, SDLDollar[2].compBodyItem)
		}
	case 35:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:338
		{
			SDLVAL.compBodyItem = SDLDollar[1].paramDecl
		}
	case 36:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:339
		{
			SDLVAL.compBodyItem = SDLDollar[1].usesDecl
		}
	case 37:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:340
		{
			SDLVAL.compBodyItem = SDLDollar[1].methodDef
		}
	case 38:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:341
		{
			SDLVAL.compBodyItem = SDLDollar[1].componentDecl
		}
	case 39:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:345
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].typeDecl.End()),
				Name:     SDLDollar[2].ident,
				TypeDecl: SDLDollar[3].typeDecl, // TypeDecl also needs to have NodeInfo
			}
		}
	case 40:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:352
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo:     NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].expr.End()),
				Name:         SDLDollar[2].ident,
				DefaultValue: SDLDollar[4].expr,
			}
		}
	case 41:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:359
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo:     NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].expr.End()),
				Name:         SDLDollar[2].ident,
				TypeDecl:     SDLDollar[3].typeDecl,
				DefaultValue: SDLDollar[5].expr,
			}
		}
	case 42:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:371
		{
			identNode := SDLDollar[1].ident
			SDLVAL.typeDecl = &TypeDecl{
				NodeInfo: identNode.NodeInfo,
				Name:     identNode.Value,
			}
		}
	case 43:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:378
		{ // Tuple type
			if len(SDLDollar[2].typeDeclList) == 1 {
				SDLVAL.typeDecl = SDLDollar[2].typeDeclList[0]
			} else {
				SDLVAL.typeDecl = &TypeDecl{
					NodeInfo: NewNodeInfo(SDLDollar[1].node.Pos(), SDLDollar[3].node.Pos()),
					Name:     "Tuple",
					Args:     SDLDollar[2].typeDeclList,
				}
			}
		}
	case 44:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:389
		{
			identNode := SDLDollar[1].ident
			SDLVAL.typeDecl = &TypeDecl{
				NodeInfo: identNode.NodeInfo,
				Name:     identNode.Value,
				Args:     SDLDollar[3].typeDeclList,
			}
		}
	case 45:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:405
		{
			SDLVAL.typeDeclList = []*TypeDecl{SDLDollar[1].typeDecl}
		}
	case 46:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:406
		{
			SDLVAL.typeDeclList = append(SDLDollar[1].typeDeclList, SDLDollar[3].typeDecl)
		}
	case 47:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:410
		{ // USES($1) ...
			SDLVAL.usesDecl = &UsesDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].ident.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
			}
		}
	case 48:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:418
		{
			SDLVAL.usesDecl = &UsesDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     SDLDollar[5].assignList,
			}
		}
	case 49:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:429
		{ // METHOD($1) ... BlockStmt($6)
			SDLDollar[2].methodDef.Body = SDLDollar[3].blockStmt
			SDLDollar[2].methodDef.NodeInfo.StopPos = SDLDollar[3].blockStmt.End()
			SDLVAL.methodDef = SDLDollar[2].methodDef
		}
	case 50:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:437
		{
			SDLVAL.paramList = []*ParamDecl{}
		}
	case 51:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:438
		{
			SDLVAL.paramList = SDLDollar[1].paramList
		}
	case 52:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:442
		{
			SDLVAL.paramList = []*ParamDecl{SDLDollar[1].paramDecl}
		}
	case 53:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:443
		{
			SDLVAL.paramList = append(SDLDollar[1].paramList, SDLDollar[3].paramDecl)
		}
	case 54:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:447
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[2].typeDecl.End()),
				Name:     SDLDollar[1].ident,
				TypeDecl: SDLDollar[2].typeDecl, // TypeDecl also needs to have NodeInfo
			}
		}
	case 55:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:454
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo:     NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[4].expr.End()),
				Name:         SDLDollar[1].ident,
				TypeDecl:     SDLDollar[2].typeDecl,
				DefaultValue: SDLDollar[4].expr,
			}
		}
	case 56:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:466
		{ // SYSTEM($1) ... RBRACE($5)
			SDLVAL.systemDecl = &SystemDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Name:     SDLDollar[2].ident,
				Body:     SDLDollar[4].sysBodyItemList,
			}
		}
	case 57:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:476
		{ // SYSTEM($1) ... RBRACE($5)
			SDLVAL.aggregatorDecl = &AggregatorDecl{
				NodeInfo:   NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].methodDef.End()),
				Name:       SDLDollar[3].methodDef.Name,
				Parameters: SDLDollar[3].methodDef.Parameters,
				ReturnType: SDLDollar[3].methodDef.ReturnType,
			}
		}
	case 58:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:487
		{
			SDLVAL.sysBodyItemList = []SystemDeclBodyItem{}
		}
	case 59:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:488
		{
			SDLVAL.sysBodyItemList = append(SDLDollar[1].sysBodyItemList, SDLDollar[2].node.(SystemDeclBodyItem))
		}
	case 60:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:492
		{
			SDLVAL.node = SDLDollar[1].instanceDecl
		}
	case 61:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:494
		{
			SDLVAL.node = SDLDollar[1].optionsDecl
		}
	case 62:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:495
		{
			SDLVAL.node = SDLDollar[1].stmt
		}
	case 63:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:499
		{ // IDENTIFIER($1) ...
			SDLVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].ident.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     []*AssignmentStmt{},
			}
		}
	case 64:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:507
		{ // IDENTIFIER($1) ...
			SDLVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     SDLDollar[5].assignList,
			}
		}
	case 65:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:518
		{
			SDLVAL.assignList = []*AssignmentStmt{}
		}
	case 66:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:519
		{
			SDLVAL.assignList = SDLDollar[1].assignList
		}
	case 67:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:523
		{
			SDLVAL.assignList = []*AssignmentStmt{SDLDollar[1].assignStmt}
		}
	case 68:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:524
		{
			SDLVAL.assignList = append(SDLDollar[1].assignList, SDLDollar[3].assignStmt)
		}
	case 69:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:528
		{ // IDENTIFIER($1) ...
			SDLVAL.assignStmt = &AssignmentStmt{
				NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[3].expr.End()),
				Var:      SDLDollar[1].ident,
				Value:    SDLDollar[3].expr,
			}
		}
	case 70:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:539
		{
			SDLVAL.stmtList = []Stmt{}
		}
	case 71:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:540
		{
			SDLVAL.stmtList = SDLDollar[1].stmtList
			if SDLDollar[2].stmt != nil {
				SDLVAL.stmtList = append(SDLVAL.stmtList, SDLDollar[2].stmt)
			}
		}
	case 72:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:548
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 73:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:549
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 74:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:550
		{
			SDLVAL.stmt = SDLDollar[1].forStmt
		}
	case 75:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:551
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 76:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:552
		{
			SDLVAL.stmt = SDLDollar[1].ifStmt
		}
	case 77:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:553
		{
			SDLVAL.stmt = SDLDollar[1].switchStmt
		}
	case 78:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:554
		{
			SDLVAL.stmt = SDLDollar[1].blockStmt
		}
	case 79:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:555
		{
			SDLVAL.stmt = nil
		}
	case 80:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:560
		{
			SDLVAL.blockStmt = &BlockStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].node.(Node).End()), Statements: SDLDollar[2].stmtList}
		}
	case 81:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:565
		{
			SDLVAL.forStmt = &ForStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].stmt.End()), Condition: SDLDollar[2].expr, Body: SDLDollar[3].stmt}
		}
	case 82:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:571
		{ // LET($1) ...
			SDLVAL.stmt = &LetStmt{
				NodeInfo:  NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].expr.End()),
				Variables: SDLDollar[2].identList,
				Value:     SDLDollar[4].expr,
			}
		}
	case 83:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:596
		{
			SDLVAL.stmt = &ReturnStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End()), ReturnValue: SDLDollar[2].expr}
		}
	case 84:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:597
		{
			SDLVAL.stmt = &ReturnStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].node.(Node).End()), ReturnValue: nil}
		}
	case 85:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:603
		{ // WAIT($1) IDENTIFIER($2) ...
			idents := SDLDollar[2].identList
			endNode := idents[len(idents)-1] // End at the last identifier in the list
			SDLVAL.expr = &WaitExpr{FutureNames: idents}
			SDLVAL.expr.(*WaitExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.Pos(), endNode.End())
		}
	case 86:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:609
		{ // WAIT($1) IDENTIFIER($2) ...
			idents := SDLDollar[2].identList
			endNode := idents[len(idents)-1] // End at the last identifier in the list
			SDLVAL.expr = &WaitExpr{
				FutureNames:      idents,
				AggregatorName:   SDLDollar[4].expr.(*CallExpr).Function.(*IdentifierExpr),
				AggregatorParams: SDLDollar[4].expr.(*CallExpr).ArgMap,
			}
			SDLVAL.expr.(*WaitExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.Pos(), endNode.End())
		}
	case 87:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:636
		{
			SDLVAL.exprMap = map[string]Expr{SDLDollar[1].ident.Value: SDLDollar[3].expr}
		}
	case 88:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:637
		{
			name := SDLDollar[3].ident.Value
			SDLDollar[1].exprMap[name] = SDLDollar[5].expr
			SDLVAL.exprMap = SDLDollar[1].exprMap
		}
	case 89:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:645
		{
			SDLVAL.exprList = []Expr{SDLDollar[1].expr}
		}
	case 90:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:646
		{
			SDLVAL.exprList = append(SDLDollar[1].exprList, SDLDollar[3].expr)
		}
	case 91:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:651
		{ // IF($1) ...
			endNode := Stmt(SDLDollar[3].blockStmt)
			if SDLDollar[4].stmt != nil {
				endNode = SDLDollar[4].stmt
			} // End of Else block/IfStmt
			SDLVAL.ifStmt = &IfStmt{
				NodeInfo:  NewNodeInfo(SDLDollar[1].node.(Node).Pos(), endNode.End()),
				Condition: SDLDollar[2].expr,
				Then:      SDLDollar[3].blockStmt,
				Else:      SDLDollar[4].stmt,
			}
		}
	case 92:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:664
		{
			SDLVAL.stmt = nil
		}
	case 93:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:665
		{
			SDLVAL.stmt = SDLDollar[2].ifStmt
		}
	case 94:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:666
		{
			SDLVAL.stmt = SDLDollar[2].blockStmt
		}
	case 95:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:670
		{ // DISTRIBUTE($1) ... RBRACE($6)
			SDLVAL.sampleExpr = &SampleExpr{FromExpr: SDLDollar[2].expr}
			SDLVAL.sampleExpr.NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 96:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:676
		{
			SDLVAL.expr = nil
		}
	case 97:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:676
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 98:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:678
		{
			SDLVAL.tupleExpr = &TupleExpr{Children: append(SDLDollar[2].exprList, SDLDollar[4].expr)}
		}
	case 99:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:683
		{ // GO($1) ... BlockStmt($4)
			SDLVAL.expr = &GoExpr{Stmt: SDLDollar[2].blockStmt}
			SDLVAL.expr.(*GoExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].blockStmt.End())
		}
	case 100:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:687
		{
			SDLVAL.expr = &GoExpr{Expr: SDLDollar[2].expr}
			SDLVAL.expr.(*GoExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.End())
		}
	case 101:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:691
		{ // GO($1) ... BlockStmt($4)
			SDLVAL.expr = &GoExpr{LoopExpr: SDLDollar[2].expr, Stmt: SDLDollar[3].blockStmt}
			SDLVAL.expr.(*GoExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].blockStmt.End())
		}
	case 102:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:695
		{
			SDLVAL.expr = &GoExpr{LoopExpr: SDLDollar[2].expr, Expr: SDLDollar[3].expr}
			SDLVAL.expr.(*GoExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].expr.End())
		}
	case 103:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:704
		{
			SDLDollar[1].chainedExpr.Unchain(nil)
			SDLVAL.expr = SDLDollar[1].chainedExpr.UnchainedExpr
		}
	case 104:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:708
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 105:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:709
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 106:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:736
		{
			SDLVAL.chainedExpr = &ChainedExpr{Children: []Expr{SDLDollar[1].expr}}
		}
	case 107:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:739
		{
			SDLDollar[1].chainedExpr.Children = append(SDLDollar[1].chainedExpr.Children, SDLDollar[3].expr)
			SDLDollar[1].chainedExpr.Operators = append(SDLDollar[1].chainedExpr.Operators, SDLDollar[2].node.String())
			SDLVAL.chainedExpr = SDLDollar[1].chainedExpr
		}
	case 108:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:744
		{
			SDLDollar[1].chainedExpr.Children = append(SDLDollar[1].chainedExpr.Children, SDLDollar[3].expr)
			SDLDollar[1].chainedExpr.Operators = append(SDLDollar[1].chainedExpr.Operators, SDLDollar[2].node.String())
			SDLVAL.chainedExpr = SDLDollar[1].chainedExpr
		}
	case 109:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:751
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 110:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:753
		{
			SDLVAL.expr = &UnaryExpr{Operator: SDLDollar[1].node.String(), Right: SDLDollar[2].expr}
			SDLVAL.expr.(*UnaryExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 111:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:758
		{
			SDLVAL.expr = &UnaryExpr{Operator: SDLDollar[1].node.String(), Right: SDLDollar[2].expr}
			SDLVAL.expr.(*UnaryExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 112:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:766
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 113:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:767
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 114:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:771
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 115:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:772
		{
			SDLVAL.expr = SDLDollar[1].ident
		}
	case 116:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:773
		{
			SDLVAL.expr = SDLDollar[1].distributeExpr
		}
	case 117:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:774
		{
			SDLVAL.expr = SDLDollar[1].sampleExpr
		}
	case 118:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:775
		{
			SDLVAL.expr = SDLDollar[1].tupleExpr
		}
	case 119:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:776
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 120:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:777
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 121:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:778
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 122:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:781
		{
			SDLVAL.expr = SDLDollar[2].expr
		}
	case 123:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:784
		{
			// SDLlex.(*Lexer).lval)
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 124:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:788
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 125:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:789
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 126:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:790
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 127:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:791
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 128:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:795
		{ // Expression "[" Key "]"
			SDLVAL.expr = &IndexExpr{
				Receiver: SDLDollar[1].expr,
				Key:      SDLDollar[3].expr,
			}
			SDLVAL.expr.(*IndexExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), SDLDollar[4].node.End())
		}
	case 129:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:805
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			SDLVAL.expr = &MemberAccessExpr{
				Receiver: SDLDollar[1].ident,
				Member:   SDLDollar[3].ident,
			}
			SDLVAL.expr.(*MemberAccessExpr).NodeInfo = NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[3].ident.End())
		}
	case 130:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:812
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			SDLVAL.expr = &MemberAccessExpr{
				Receiver: SDLDollar[1].expr,
				Member:   SDLDollar[3].ident,
			}
			SDLVAL.expr.(*MemberAccessExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), SDLDollar[3].ident.End())
		}
	case 131:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:822
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			SDLVAL.expr = &CallExpr{Function: SDLDollar[1].expr}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), SDLDollar[3].node.End())
		}
	case 132:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:826
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := SDLDollar[4].node.(Node) // End at RPAREN
			if len(SDLDollar[3].exprList) > 0 {
				exprList := SDLDollar[3].exprList
				endNode = exprList[len(exprList)-1].(Node) // End at last arg
			}
			SDLVAL.expr = &CallExpr{
				Function: SDLDollar[1].expr,
				ArgList:  SDLDollar[3].exprList,
			}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), endNode.End())
		}
	case 133:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:838
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := SDLDollar[4].node.(Node) // End at RPAREN
			SDLVAL.expr = &CallExpr{
				Function: SDLDollar[1].expr,
				IsNamed:  true,
				ArgMap:   SDLDollar[3].exprMap,
			}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), endNode.End())
		}
	case 134:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:850
		{
			SDLVAL.distributeExpr = &DistributeExpr{TotalProb: SDLDollar[2].expr, Cases: SDLDollar[4].caseExprList, Default: SDLDollar[5].expr} /* TODO: Pos */
		}
	case 135:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:856
		{
			SDLVAL.caseExprList = []*CaseExpr{}
		}
	case 136:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:857
		{
			SDLVAL.caseExprList = SDLDollar[1].caseExprList
		}
	case 137:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:861
		{
			SDLVAL.caseExprList = []*CaseExpr{SDLDollar[1].caseExpr}
		}
	case 138:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:862
		{
			SDLVAL.caseExprList = append(SDLDollar[1].caseExprList, SDLDollar[2].caseExpr)
		}
	case 139:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:866
		{
			SDLVAL.caseExpr = &CaseExpr{Condition: SDLDollar[1].expr, Body: SDLDollar[3].expr}
		}
	case 140:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:869
		{ // allow optional comma
			SDLVAL.caseExpr = &CaseExpr{Condition: SDLDollar[1].expr, Body: SDLDollar[3].expr}
		}
	case 141:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:875
		{
			SDLVAL.expr = nil
		}
	case 142:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:876
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 143:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:880
		{
			SDLVAL.expr = SDLDollar[3].expr
		}
	case 144:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:881
		{
			SDLVAL.expr = SDLDollar[3].expr
		}
	case 145:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:885
		{
			SDLVAL.switchStmt = &SwitchStmt{Expr: SDLDollar[2].expr, Cases: SDLDollar[4].caseStmtList, Default: SDLDollar[5].stmt} /* TODO: Pos */
		}
	case 146:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:891
		{
			SDLVAL.caseStmtList = []*CaseStmt{}
		}
	case 147:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:892
		{
			SDLVAL.caseStmtList = SDLDollar[1].caseStmtList
		}
	case 148:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:896
		{
			SDLVAL.caseStmtList = []*CaseStmt{SDLDollar[1].caseStmt}
		}
	case 149:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:897
		{
			SDLVAL.caseStmtList = append(SDLDollar[1].caseStmtList, SDLDollar[2].caseStmt)
		}
	case 150:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:901
		{
			SDLVAL.caseStmt = &CaseStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[3].stmt.End()), Condition: SDLDollar[1].expr, Body: SDLDollar[3].stmt}
		}
	case 151:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:905
		{
			SDLVAL.stmt = nil
		}
	case 152:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:906
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 153:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:910
		{
			SDLVAL.stmt = SDLDollar[3].stmt
		}
	case 154:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:914
		{
			SDLVAL.stmt = &ExprStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[1].expr.(Node).End()), Expression: SDLDollar[1].expr}
		}
	case 155:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:915
		{
			SDLVAL.stmt = &ExprStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[1].expr.(Node).End()), Expression: SDLDollar[1].expr}
		}
	}
	goto SDLstack /* stack new state and value */
}
