// Code generated by goyacc -o parser.go -p SDL grammar.y. DO NOT EDIT.

//line grammar.y:2
package parser

import __yyfmt__ "fmt"

//line grammar.y:2

import (
	// "reflect"
	"fmt"
	"io"
	"log"
)

// Function to be called by SDLParse on error.
// Needs access to the lexer passed via %parse-param.
func yyerror(yyl SDLLexer, msg string) {
	lexer := yyl.(LexerInterface)
	// line, col := lexer.Position()
	// log.Println("YYERROR MSG = ", msg)
	// errMsg := fmt.Sprintf("Error at Line %d, Col %d, Near ('%s'): %s", line, col, /* TokenString(lexer.LastToken()),*/ lexer.Text(), msg) // Added TokenString helper call
	lexer.Error(msg)
}

func yyerrok(lexer SDLLexer) {
	log.Println("Error here... not sure how to recover")
	///ErrFlag = 0
}

//line grammar.y:30
type SDLSymType struct {
	yys int
	// Basic types from lexer
	sval string // Holds raw string values like identifiers, literal content

	// AST Nodes (using pointers) - these should have NodeInfo
	file           *FileDecl
	componentDecl  *ComponentDecl
	systemDecl     *SystemDecl
	aggregatorDecl *AggregatorDecl
	node           Node // Generic interface for lists and for accessing NodeInfo
	// tokenNode   TokenNode // Generic interface for lists and for accessing NodeInfo
	expr         Expr
	chainedExpr  *ChainedExpr
	stmt         Stmt
	typeDecl     *TypeDecl
	paramDecl    *ParamDecl
	usesDecl     *UsesDecl
	methodDef    *MethodDecl
	instanceDecl *InstanceDecl
	analyzeDecl  *AnalyzeDecl
	expectBlock  *ExpectationsDecl
	expectStmt   *ExpectStmt
	blockStmt    *BlockStmt
	ifStmt       *IfStmt

	distributeExpr *DistributeExpr
	caseExpr       *CaseExpr

	switchStmt *SwitchStmt
	caseStmt   *CaseStmt

	tupleExpr   *TupleExpr
	goExpr      *GoExpr
	forStmt     *ForStmt
	assignStmt  *AssignmentStmt
	optionsDecl *OptionsDecl
	enumDecl    *EnumDecl
	importDecl  *ImportDecl
	waitExpr    *WaitExpr
	delayStmt   *DelayStmt
	sampleExpr  *SampleExpr

	// Slices for lists
	nodeList               []Node
	caseExprList           []*CaseExpr
	typeDeclList           []*TypeDecl
	caseStmtList           []*CaseStmt
	importDeclList         []*ImportDecl
	compBodyItem           ComponentDeclBodyItem
	compBodyItemList       []ComponentDeclBodyItem
	sysBodyItemList        []SystemDeclBodyItem
	paramList              []*ParamDecl
	assignList             []*AssignmentStmt
	exprList               []Expr
	exprMap                map[string]Expr
	stmtList               []Stmt
	ident                  *IdentifierExpr
	identList              []*IdentifierExpr
	distributeExprCaseList []*CaseExpr
	expectStmtList         []*ExpectStmt
	methodSigItemList      []*MethodDecl

	// Add field to store position for simple tokens if needed
	// posInfo     NodeInfo
}

const SYSTEM = 57346
const USES = 57347
const AGGREGATOR = 57348
const METHOD = 57349
const ANALYZE = 57350
const EXPECT = 57351
const LET = 57352
const IF = 57353
const ELSE = 57354
const SAMPLE = 57355
const DISTRIBUTE = 57356
const DEFAULT = 57357
const RETURN = 57358
const DELAY = 57359
const WAIT = 57360
const GO = 57361
const GOBATCH = 57362
const USING = 57363
const LOG = 57364
const SWITCH = 57365
const CASE = 57366
const FOR = 57367
const USE = 57368
const NATIVE = 57369
const LSQUARE = 57370
const RSQUARE = 57371
const LBRACE = 57372
const RBRACE = 57373
const OPTIONS = 57374
const ENUM = 57375
const COMPONENT = 57376
const PARAM = 57377
const IMPORT = 57378
const FROM = 57379
const AS = 57380
const ASSIGN = 57381
const COLON = 57382
const LPAREN = 57383
const RPAREN = 57384
const COMMA = 57385
const DOT = 57386
const ARROW = 57387
const LET_ASSIGN = 57388
const SEMICOLON = 57389
const INT = 57390
const FLOAT = 57391
const BOOL = 57392
const STRING = 57393
const DURATION = 57394
const INT_LITERAL = 57395
const FLOAT_LITERAL = 57396
const STRING_LITERAL = 57397
const BOOL_LITERAL = 57398
const DURATION_LITERAL = 57399
const IDENTIFIER = 57400
const OR = 57401
const AND = 57402
const EQ = 57403
const NEQ = 57404
const LT = 57405
const LTE = 57406
const GT = 57407
const GTE = 57408
const PLUS = 57409
const MUL = 57410
const DIV = 57411
const MOD = 57412
const DUAL_OP = 57413
const BINARY_NC_OP = 57414
const BINARY_OP = 57415
const UNARY_OP = 57416
const MINUS = 57417
const UMINUS = 57418

var SDLToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SYSTEM",
	"USES",
	"AGGREGATOR",
	"METHOD",
	"ANALYZE",
	"EXPECT",
	"LET",
	"IF",
	"ELSE",
	"SAMPLE",
	"DISTRIBUTE",
	"DEFAULT",
	"RETURN",
	"DELAY",
	"WAIT",
	"GO",
	"GOBATCH",
	"USING",
	"LOG",
	"SWITCH",
	"CASE",
	"FOR",
	"USE",
	"NATIVE",
	"LSQUARE",
	"RSQUARE",
	"LBRACE",
	"RBRACE",
	"OPTIONS",
	"ENUM",
	"COMPONENT",
	"PARAM",
	"IMPORT",
	"FROM",
	"AS",
	"ASSIGN",
	"COLON",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"DOT",
	"ARROW",
	"LET_ASSIGN",
	"SEMICOLON",
	"INT",
	"FLOAT",
	"BOOL",
	"STRING",
	"DURATION",
	"INT_LITERAL",
	"FLOAT_LITERAL",
	"STRING_LITERAL",
	"BOOL_LITERAL",
	"DURATION_LITERAL",
	"IDENTIFIER",
	"OR",
	"AND",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"PLUS",
	"MUL",
	"DIV",
	"MOD",
	"DUAL_OP",
	"BINARY_NC_OP",
	"BINARY_OP",
	"UNARY_OP",
	"MINUS",
	"UMINUS",
}

var SDLStatenames = [...]string{}

const SDLEofCode = 1
const SDLErrCode = 2
const SDLInitialStackSize = 16

//line grammar.y:1024
// --- Go Code Section ---

// Interface for the lexer required by the parser.
type LexerInterface interface {
	Lex(lval *SDLSymType) int
	Error(s string)
	Pos() int                  // Start byte position of the last token read
	End() int                  // End byte position of the last token read
	Text() string              // Text of the last token read
	Position() (line, col int) // Added: Get line/col of last token start
	LastToken() int            // Added: Get the token code that was just lexed
}

// Parse takes an input stream and attempts to parse it according to the SDL grammar. 22222
// It returns the root of the Abstract Syntax Tree (*FileDecl) if successful, or an error.
func Parse(input io.Reader) (*Lexer, *FileDecl, error) {
	// Reset global result before parsing
	lexer := NewLexer(input)
	// Set yyDebug = 3 for verbose parser debugging output
	// yyDebug = 3
	resultCode := SDLParse(lexer) // Call the LALR parser generated by goyacc

	if resultCode != 0 {
		// A syntax error occurred. The lexer's Error method should have been called
		// and stored the error message.
		if lexer.lastError != nil {
			return lexer, nil, lexer.lastError
		}
		// Fallback error message if lexer didn't store one
		return lexer, nil, fmt.Errorf("syntax error near byte %d (Line %d, Col %d)", lexer.location.Pos, lexer.location.Line, lexer.location.Col)
	}

	// Parsing succeeded
	if lexer.parseResult == nil {
		// This indicates a potential issue with the grammar's top rule action
		return lexer, nil, fmt.Errorf("parsing finished successfully, but no AST result was produced")
	}

	return lexer, lexer.parseResult, nil
}

// The parser expects the lexer variable to be named yyLex.
// We can satisfy this by creating a global or passing it via SDLParseWithLexer.
// Using SDLParseWithLexer is cleaner.

// Example main function (optional, for standalone testing)
/*
func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: parser <input_file>")
		return
	}
	filePath := os.Args[1]
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Printf("Error opening file %s: %v\n", filePath, err)
		return
	}
	defer file.Close()

	astRoot, err := Parse(file)
	if err != nil {
		fmt.Printf("Parsing failed: %v\n", err)
		// Error message should ideally include line/column from lexer
	} else {
		fmt.Println("Parsing successful!")
		// Print the AST (implement String() methods for AST nodes for nice output)
		fmt.Println(astRoot.String())
	}
}
*/

//line yacctab:1
var SDLExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 65,
	41, 119,
	-2, 162,
	-1, 66,
	41, 121,
	-2, 163,
}

const SDLPrivate = 57344

const SDLLast = 511

var SDLAct = [...]int16{
	205, 54, 226, 224, 190, 216, 59, 128, 62, 124,
	120, 127, 189, 204, 103, 77, 30, 44, 143, 154,
	227, 94, 98, 162, 34, 163, 121, 236, 156, 194,
	154, 104, 184, 180, 92, 91, 153, 179, 159, 75,
	122, 123, 66, 157, 74, 67, 65, 153, 31, 95,
	108, 73, 107, 38, 19, 29, 25, 99, 23, 22,
	92, 91, 93, 36, 256, 252, 139, 109, 243, 117,
	129, 131, 132, 133, 86, 87, 88, 89, 90, 79,
	55, 9, 235, 160, 210, 245, 116, 146, 93, 138,
	221, 222, 141, 142, 144, 125, 126, 136, 134, 222,
	86, 87, 88, 89, 90, 79, 209, 208, 177, 152,
	207, 206, 155, 138, 145, 99, 265, 149, 158, 161,
	148, 125, 126, 165, 166, 66, 146, 74, 67, 65,
	146, 164, 264, 114, 113, 248, 176, 26, 178, 182,
	169, 14, 66, 27, 74, 67, 65, 151, 43, 260,
	247, 244, 167, 168, 174, 185, 183, 192, 150, 228,
	193, 195, 135, 40, 12, 254, 186, 199, 249, 15,
	16, 13, 191, 11, 187, 198, 49, 28, 50, 100,
	20, 255, 217, 218, 3, 211, 21, 74, 219, 196,
	197, 106, 223, 212, 251, 147, 70, 64, 51, 105,
	181, 220, 18, 170, 73, 13, 48, 48, 229, 237,
	230, 238, 39, 115, 20, 73, 217, 234, 110, 15,
	35, 242, 33, 32, 24, 213, 188, 246, 137, 241,
	37, 233, 250, 92, 91, 201, 47, 253, 119, 6,
	231, 232, 202, 66, 257, 74, 67, 65, 203, 61,
	259, 258, 239, 240, 261, 262, 80, 263, 214, 215,
	66, 93, 74, 67, 65, 92, 91, 140, 173, 225,
	75, 122, 123, 86, 87, 88, 89, 90, 79, 57,
	112, 46, 45, 101, 102, 118, 83, 76, 85, 84,
	92, 91, 78, 93, 172, 75, 122, 123, 82, 81,
	60, 58, 56, 200, 17, 86, 87, 88, 89, 90,
	175, 5, 10, 52, 92, 91, 96, 97, 93, 75,
	122, 123, 41, 42, 130, 8, 125, 126, 7, 4,
	86, 87, 88, 89, 90, 79, 111, 2, 1, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 126, 0, 86, 87, 88, 89, 90, 79,
	0, 0, 0, 0, 64, 70, 0, 92, 91, 0,
	69, 71, 75, 0, 0, 125, 126, 72, 0, 68,
	0, 0, 0, 0, 73, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 63, 0, 0, 0, 0, 0, 86, 87, 88,
	89, 90, 79, 64, 70, 0, 92, 91, 0, 69,
	71, 75, 0, 0, 0, 0, 72, 0, 68, 0,
	0, 0, 0, 73, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 0, 0, 86, 87, 88, 89,
	90, 79, 64, 70, 0, 92, 91, 0, 69, 71,
	75, 0, 0, 0, 0, 72, 0, 68, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 0, 0, 86, 87, 88, 89, 90,
	79,
}

var SDLPact = [...]int16{
	-1000, -1000, 137, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -4, 180, 1, 0, 194, -2, 100, -1000, 139,
	-3, -10, 193, 192, -1000, 190, 8, -4, -5, 182,
	-1000, 122, 171, -1000, 403, -9, -1000, -1000, -1000, 172,
	-27, 168, 171, -1000, -1000, -1000, -1000, -1000, -6, -8,
	-10, 146, 187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -9, -1000, -1000, -1000, 301, 277,
	301, 301, 301, -1000, 121, -9, 200, -1000, -1000, 69,
	-1000, -1000, -1000, -1000, 22, -1000, -1000, -1000, -1000, -1000,
	-1000, 301, 301, 301, 83, -1000, 164, 172, -1000, -1000,
	-10, 116, 104, -1000, -22, -1000, -1000, -11, -15, 174,
	-1000, -1000, -1000, -1000, -1000, -20, 44, 452, -50, -1000,
	-1000, -1000, 21, 301, 121, 47, 47, -1000, -1000, -1000,
	-1000, 174, -1000, 173, 354, 252, 87, 301, -21, -25,
	170, -1000, -1000, 96, 114, -1000, -26, -1000, -1000, -1000,
	-22, -27, 135, 198, -22, 133, 301, 119, -1000, -29,
	301, -1000, 47, 47, -1000, -1000, 21, -1000, -1000, 223,
	301, -1000, -1000, 68, 64, 45, -1000, 220, 196, -1000,
	-1000, 301, 301, -1000, -1000, -1000, -1000, 301, -22, 48,
	-1000, 301, -1000, -38, 118, -1000, -1000, -1000, -1000, -1000,
	-1000, 185, 216, 301, -1000, 37, -31, -1000, 301, -1000,
	301, -1000, -1000, -1000, 214, 301, -1000, 23, 109, -1000,
	56, -1000, -22, -1000, 108, 92, -1000, 129, -38, -1000,
	-1000, 163, -1000, 20, -1000, 452, 126, -1000, -1000, 150,
	-1000, 19, -1000, 301, -1000, -1000, -1000, -1000, -38, 301,
	107, -1000, 452, -1000, 301, -1000, 301, 89, -1000, -1000,
	-1000, -1000, -1000, 73, -1000, -1000,
}

var SDLPgo = [...]int16{
	0, 338, 337, 336, 329, 236, 328, 325, 148, 323,
	322, 22, 317, 316, 313, 81, 312, 21, 202, 311,
	304, 1, 303, 80, 302, 301, 300, 299, 8, 24,
	298, 0, 26, 9, 292, 7, 15, 11, 289, 288,
	287, 286, 10, 285, 17, 14, 284, 283, 4, 12,
	282, 281, 16, 280, 279, 2, 269, 3, 6, 269,
	18, 269, 268, 267, 5, 259, 258, 256, 253, 252,
	249, 13, 248, 242, 241, 240, 238,
}

var SDLR1 = [...]int8{
	0, 1, 2, 2, 2, 2, 4, 4, 4, 4,
	4, 15, 5, 5, 16, 17, 17, 19, 20, 20,
	18, 18, 52, 52, 13, 13, 12, 12, 11, 11,
	10, 10, 9, 9, 8, 8, 8, 8, 44, 44,
	44, 48, 48, 48, 49, 49, 50, 50, 51, 47,
	47, 46, 46, 45, 45, 6, 7, 14, 14, 3,
	3, 3, 53, 53, 57, 57, 56, 56, 55, 29,
	29, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	28, 54, 23, 25, 25, 26, 42, 42, 42, 61,
	61, 62, 62, 59, 59, 60, 60, 58, 22, 22,
	22, 27, 63, 63, 30, 76, 76, 76, 76, 31,
	31, 31, 43, 43, 43, 32, 32, 32, 33, 33,
	33, 33, 40, 40, 40, 40, 40, 40, 40, 40,
	41, 34, 34, 34, 34, 34, 39, 38, 38, 35,
	36, 37, 67, 66, 66, 65, 65, 64, 64, 69,
	69, 68, 68, 70, 73, 73, 72, 72, 71, 75,
	75, 74, 24, 24, 24,
}

var SDLR2 = [...]int8{
	0, 1, 0, 2, 2, 2, 1, 1, 1, 1,
	1, 4, 6, 5, 5, 1, 3, 4, 1, 3,
	1, 3, 4, 5, 0, 1, 1, 2, 1, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 3, 4,
	5, 1, 3, 4, 1, 3, 3, 6, 3, 0,
	1, 1, 3, 2, 4, 5, 3, 0, 2, 1,
	1, 1, 3, 6, 0, 1, 1, 3, 3, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 4, 2, 2, 2, 2, 4, 4, 0,
	1, 3, 5, 0, 1, 1, 3, 4, 0, 2,
	2, 2, 0, 1, 5, 2, 2, 3, 3, 1,
	1, 1, 1, 3, 3, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 4, 3, 3, 3,
	4, 4, 6, 0, 1, 1, 2, 3, 4, 0,
	1, 3, 4, 6, 0, 1, 1, 2, 3, 0,
	1, 3, 1, 1, 1,
}

var SDLChk = [...]int16{
	-1000, -1, -2, 47, -4, -19, -5, -6, -7, -15,
	-16, 36, 27, 34, 4, 32, 33, -20, -18, 58,
	34, 6, 58, 58, 30, 58, 37, 43, 38, 58,
	-52, 58, 30, 30, -29, 30, 55, -18, 58, 30,
	41, -10, -9, -8, -44, -50, -51, -5, 35, 5,
	7, 27, -14, 31, -21, -23, -24, -54, -25, -58,
	-26, -70, -28, 47, 10, -37, -35, -42, 25, 16,
	11, 17, 23, 30, -33, 18, -40, -36, -34, 58,
	-67, -27, -30, -41, -38, -39, 53, 54, 55, 56,
	57, 14, 13, 41, -17, 58, -13, -12, -11, -44,
	7, -47, -46, -45, 58, 31, -8, 58, 58, -52,
	31, -3, -53, -15, -23, 26, -17, -31, -43, -76,
	-42, -32, 19, 20, -33, 74, 75, -37, -35, -31,
	47, -31, -31, -31, -29, 41, -17, 28, 44, 44,
	-63, -31, -31, -60, -31, 31, 43, 31, -11, -52,
	42, 43, -48, 58, 41, -48, 39, 58, -28, 58,
	39, -21, 73, 75, -28, -31, -31, -32, -32, -28,
	30, 31, 42, -62, -60, 58, -31, 21, -31, 58,
	58, 30, 43, 42, 58, -48, -45, 39, 28, -49,
	-48, 39, -31, 41, 58, -31, -32, -32, -28, -31,
	-22, 12, -73, -72, -71, -31, 43, 42, 43, 42,
	39, -35, -36, 29, -66, -65, -64, -31, -31, -31,
	-49, 42, 43, -31, -57, -56, -55, 58, 41, -58,
	-28, -75, -74, 15, -71, 45, 58, -31, -31, -69,
	-68, 15, -64, 45, 42, 29, -48, 42, 43, 39,
	-57, 31, 45, -21, 39, 31, 45, -31, -55, -31,
	42, -21, -31, -31, 43, 43,
}

var SDLDef = [...]int16{
	2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 0, 0, 0, 0, 0, 0, 0, 18, 20,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	56, 0, 30, 57, 0, 0, 17, 19, 21, 24,
	49, 0, 31, 32, 34, 35, 36, 37, 0, 0,
	0, 0, 0, 11, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 0, -2, -2, 164, 0, 0,
	0, 0, 0, 69, 0, 0, 118, 120, 122, 123,
	124, 125, 126, 127, 128, 129, 131, 132, 133, 134,
	135, 102, 0, 0, 0, 15, 0, 25, 26, 28,
	0, 0, 50, 51, 0, 13, 33, 0, 0, 0,
	55, 58, 59, 60, 61, 0, 0, 0, 109, 110,
	111, 112, 0, 0, 115, 0, 0, 119, 121, 83,
	84, 0, 85, 0, 0, 0, 86, 0, 0, 0,
	0, 103, 101, 0, 95, 14, 0, 12, 27, 29,
	22, 0, 53, 41, 0, 38, 0, 46, 48, 0,
	0, 81, 0, 0, 105, 106, 0, 116, 117, 98,
	154, 80, 139, 0, 0, 123, 95, 0, 0, 137,
	138, 143, 0, 130, 16, 23, 52, 0, 0, 0,
	44, 0, 39, 64, 62, 82, 113, 114, 107, 108,
	97, 0, 159, 155, 156, 0, 0, 140, 0, 141,
	0, 87, 88, 136, 149, 144, 145, 0, 96, 54,
	0, 42, 0, 40, 0, 65, 66, 0, 64, 99,
	100, 0, 160, 0, 157, 0, 0, 96, 91, 0,
	150, 0, 146, 0, 104, 43, 45, 47, 0, 0,
	0, 153, 0, 158, 0, 142, 0, 147, 67, 68,
	63, 161, 92, 151, 148, 152,
}

var SDLTok1 = [...]int8{
	1,
}

var SDLTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76,
}

var SDLTok3 = [...]int8{
	0,
}

var SDLErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	SDLDebug        = 0
	SDLErrorVerbose = false
)

type SDLLexer interface {
	Lex(lval *SDLSymType) int
	Error(s string)
}

type SDLParser interface {
	Parse(SDLLexer) int
	Lookahead() int
}

type SDLParserImpl struct {
	lval  SDLSymType
	stack [SDLInitialStackSize]SDLSymType
	char  int
}

func (p *SDLParserImpl) Lookahead() int {
	return p.char
}

func SDLNewParser() SDLParser {
	return &SDLParserImpl{}
}

const SDLFlag = -1000

func SDLTokname(c int) string {
	if c >= 1 && c-1 < len(SDLToknames) {
		if SDLToknames[c-1] != "" {
			return SDLToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func SDLStatname(s int) string {
	if s >= 0 && s < len(SDLStatenames) {
		if SDLStatenames[s] != "" {
			return SDLStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func SDLErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !SDLErrorVerbose {
		return "syntax error"
	}

	for _, e := range SDLErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + SDLTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(SDLPact[state])
	for tok := TOKSTART; tok-1 < len(SDLToknames); tok++ {
		if n := base + tok; n >= 0 && n < SDLLast && int(SDLChk[int(SDLAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if SDLDef[state] == -2 {
		i := 0
		for SDLExca[i] != -1 || int(SDLExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; SDLExca[i] >= 0; i += 2 {
			tok := int(SDLExca[i])
			if tok < TOKSTART || SDLExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if SDLExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += SDLTokname(tok)
	}
	return res
}

func SDLlex1(lex SDLLexer, lval *SDLSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(SDLTok1[0])
		goto out
	}
	if char < len(SDLTok1) {
		token = int(SDLTok1[char])
		goto out
	}
	if char >= SDLPrivate {
		if char < SDLPrivate+len(SDLTok2) {
			token = int(SDLTok2[char-SDLPrivate])
			goto out
		}
	}
	for i := 0; i < len(SDLTok3); i += 2 {
		token = int(SDLTok3[i+0])
		if token == char {
			token = int(SDLTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(SDLTok2[1]) /* unknown char */
	}
	if SDLDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", SDLTokname(token), uint(char))
	}
	return char, token
}

func SDLParse(SDLlex SDLLexer) int {
	return SDLNewParser().Parse(SDLlex)
}

func (SDLrcvr *SDLParserImpl) Parse(SDLlex SDLLexer) int {
	var SDLn int
	var SDLVAL SDLSymType
	var SDLDollar []SDLSymType
	_ = SDLDollar // silence set and not used
	SDLS := SDLrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	SDLstate := 0
	SDLrcvr.char = -1
	SDLtoken := -1 // SDLrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		SDLstate = -1
		SDLrcvr.char = -1
		SDLtoken = -1
	}()
	SDLp := -1
	goto SDLstack

ret0:
	return 0

ret1:
	return 1

SDLstack:
	/* put a state and value onto the stack */
	if SDLDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", SDLTokname(SDLtoken), SDLStatname(SDLstate))
	}

	SDLp++
	if SDLp >= len(SDLS) {
		nyys := make([]SDLSymType, len(SDLS)*2)
		copy(nyys, SDLS)
		SDLS = nyys
	}
	SDLS[SDLp] = SDLVAL
	SDLS[SDLp].yys = SDLstate

SDLnewstate:
	SDLn = int(SDLPact[SDLstate])
	if SDLn <= SDLFlag {
		goto SDLdefault /* simple state */
	}
	if SDLrcvr.char < 0 {
		SDLrcvr.char, SDLtoken = SDLlex1(SDLlex, &SDLrcvr.lval)
	}
	SDLn += SDLtoken
	if SDLn < 0 || SDLn >= SDLLast {
		goto SDLdefault
	}
	SDLn = int(SDLAct[SDLn])
	if int(SDLChk[SDLn]) == SDLtoken { /* valid shift */
		SDLrcvr.char = -1
		SDLtoken = -1
		SDLVAL = SDLrcvr.lval
		SDLstate = SDLn
		if Errflag > 0 {
			Errflag--
		}
		goto SDLstack
	}

SDLdefault:
	/* default state action */
	SDLn = int(SDLDef[SDLstate])
	if SDLn == -2 {
		if SDLrcvr.char < 0 {
			SDLrcvr.char, SDLtoken = SDLlex1(SDLlex, &SDLrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if SDLExca[xi+0] == -1 && int(SDLExca[xi+1]) == SDLstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			SDLn = int(SDLExca[xi+0])
			if SDLn < 0 || SDLn == SDLtoken {
				break
			}
		}
		SDLn = int(SDLExca[xi+1])
		if SDLn < 0 {
			goto ret0
		}
	}
	if SDLn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			SDLlex.Error(SDLErrorMessage(SDLstate, SDLtoken))
			Nerrs++
			if SDLDebug >= 1 {
				__yyfmt__.Printf("%s", SDLStatname(SDLstate))
				__yyfmt__.Printf(" saw %s\n", SDLTokname(SDLtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for SDLp >= 0 {
				SDLn = int(SDLPact[SDLS[SDLp].yys]) + SDLErrCode
				if SDLn >= 0 && SDLn < SDLLast {
					SDLstate = int(SDLAct[SDLn]) /* simulate a shift of "error" */
					if int(SDLChk[SDLstate]) == SDLErrCode {
						goto SDLstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if SDLDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", SDLS[SDLp].yys)
				}
				SDLp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if SDLDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", SDLTokname(SDLtoken))
			}
			if SDLtoken == SDLEofCode {
				goto ret1
			}
			SDLrcvr.char = -1
			SDLtoken = -1
			goto SDLnewstate /* try again in the same state */
		}
	}

	/* reduction by production SDLn */
	if SDLDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", SDLn, SDLStatname(SDLstate))
	}

	SDLnt := SDLn
	SDLpt := SDLp
	_ = SDLpt // guard against "declared and not used"

	SDLp -= int(SDLR2[SDLn])
	// SDLp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if SDLp+1 >= len(SDLS) {
		nyys := make([]SDLSymType, len(SDLS)*2)
		copy(nyys, SDLS)
		SDLS = nyys
	}
	SDLVAL = SDLS[SDLp+1]

	/* consult goto table to find next state */
	SDLn = int(SDLR1[SDLn])
	SDLg := int(SDLPgo[SDLn])
	SDLj := SDLg + SDLS[SDLp].yys + 1

	if SDLj >= SDLLast {
		SDLstate = int(SDLAct[SDLg])
	} else {
		SDLstate = int(SDLAct[SDLj])
		if int(SDLChk[SDLstate]) != -SDLn {
			SDLstate = int(SDLAct[SDLg])
		}
	}
	// dummy call; replaced with literal code
	switch SDLnt {

	case 1:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:196
		{
			ni := NodeInfo{}
			if len(SDLDollar[1].nodeList) > 0 {
				ni.StartPos = SDLDollar[1].nodeList[0].Pos()
				ni.StopPos = SDLDollar[1].nodeList[len(SDLDollar[1].nodeList)-1].End()
			}
			SDLlex.(*Lexer).parseResult = &FileDecl{NodeInfo: ni, Declarations: SDLDollar[1].nodeList}
			// $$ = &File{NodeInfo: ni, Declarations: $1}
		}
	case 2:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:208
		{
			SDLVAL.nodeList = []Node{}
		}
	case 3:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:209
		{
			SDLVAL.nodeList = SDLDollar[1].nodeList
		}
	case 4:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:210
		{
			SDLVAL.nodeList = append(SDLDollar[1].nodeList, SDLDollar[2].node)
		}
	case 5:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:213
		{
			for _, imp := range SDLDollar[2].importDeclList {
				SDLDollar[1].nodeList = append(SDLDollar[1].nodeList, imp)
			}
			SDLVAL.nodeList = SDLDollar[1].nodeList
		}
	case 6:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:222
		{
			SDLVAL.node = SDLDollar[1].componentDecl
		}
	case 7:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:223
		{
			SDLVAL.node = SDLDollar[1].systemDecl
		}
	case 8:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:224
		{
			SDLVAL.node = SDLDollar[1].aggregatorDecl
		}
	case 9:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:225
		{
			SDLVAL.node = SDLDollar[1].optionsDecl
		}
	case 10:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:226
		{
			SDLVAL.node = SDLDollar[1].enumDecl
		}
	case 11:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:230
		{ // OPTIONS ($1) LBRACE ($2) StmtList ($3) RBRACE ($4)
			// Assume OPTIONS token itself doesn't carry complex NodeInfo from lexer for this example.
			// Span from LBRACE to RBRACE for body. If StmtList is empty, Body.NodeInfo might be tricky.
			/*
			   bodyStart := $2.(Node).Pos() // Position of LBRACE (assuming lexer returns it as Node)
			   bodyEnd := $4.(Node).Pos()   // Position of RBRACE (actually its start, use .End() for full span)
			   if len($3) > 0 { // If StmtList is not empty
			       bodyStart = $3[0].Pos()
			       bodyEnd = $3[len($3)-1].End()
			   }
			*/
			SDLVAL.optionsDecl = &OptionsDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].node.(Node).End()), // Pos of OPTIONS, End of RBRACE
				Body: &BlockStmt{
					NodeInfo:   NewNodeInfo(SDLDollar[2].node.(Node).Pos(), SDLDollar[4].node.(Node).End()),
					Statements: SDLDollar[3].stmtList,
				},
			}
		}
	case 12:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:252
		{ // COMPONENT($1) ... RBRACE($5)
			SDLVAL.componentDecl = &ComponentDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.(Node).End()),
				Name:     SDLDollar[3].ident,
				Body:     SDLDollar[5].compBodyItemList,
				IsNative: true,
			}
		}
	case 13:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:260
		{ // COMPONENT($1) ... RBRACE($5)
			SDLVAL.componentDecl = &ComponentDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Name:     SDLDollar[2].ident,
				Body:     SDLDollar[4].compBodyItemList,
			}
		}
	case 14:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:270
		{ // ENUM($1) IDENTIFIER($2) ... RBRACE($5)
			SDLVAL.enumDecl = &EnumDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Name:     SDLDollar[2].ident, // $2 is an IdentifierExpr from lexer, has Pos/End
				Values:   SDLDollar[4].identList,
			}
		}
	case 15:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:280
		{
			SDLVAL.identList = []*IdentifierExpr{SDLDollar[1].ident}
		}
	case 16:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:281
		{
			SDLVAL.identList = append(SDLDollar[1].identList, SDLDollar[3].ident)
		}
	case 17:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:285
		{ // IMPORT($1) STRING_LITERAL($2)
			path := SDLDollar[4].expr.(*LiteralExpr)
			for _, imp := range SDLDollar[2].importDeclList {
				imp.Path = path
			}
			SDLVAL.importDeclList = SDLDollar[2].importDeclList
		}
	case 18:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:294
		{
			SDLVAL.importDeclList = []*ImportDecl{SDLDollar[1].importDecl}
		}
	case 19:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:295
		{
			SDLVAL.importDeclList = append(SDLVAL.importDeclList, SDLDollar[3].importDecl)
		}
	case 20:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:298
		{
			SDLVAL.importDecl = &ImportDecl{ImportedItem: SDLDollar[1].ident, Alias: SDLDollar[1].ident}
		}
	case 21:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:299
		{
			SDLVAL.importDecl = &ImportDecl{ImportedItem: SDLDollar[1].ident, Alias: SDLDollar[3].ident}
		}
	case 22:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:303
		{ // METHOD($1) ... BlockStmt($6)
			SDLVAL.methodDef = &MethodDecl{
				NodeInfo:   NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[4].node.End()),
				Name:       SDLDollar[1].ident,
				Parameters: SDLDollar[3].paramList,
			}
		}
	case 23:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:310
		{ // METHOD($1) ... BlockStmt($8)
			SDLVAL.methodDef = &MethodDecl{
				NodeInfo:   NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[5].typeDecl.End()),
				Name:       SDLDollar[1].ident,
				Parameters: SDLDollar[3].paramList,
				ReturnType: SDLDollar[5].typeDecl,
			}
		}
	case 24:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:321
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{}
		}
	case 25:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:322
		{
			SDLVAL.compBodyItemList = SDLDollar[1].compBodyItemList
		}
	case 26:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:326
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{SDLDollar[1].compBodyItem}
		}
	case 27:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:327
		{
			SDLVAL.compBodyItemList = append(SDLDollar[1].compBodyItemList, SDLDollar[2].compBodyItem)
		}
	case 28:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:331
		{
			SDLVAL.compBodyItem = SDLDollar[1].paramDecl
		}
	case 29:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:332
		{
			SDLVAL.compBodyItem = SDLDollar[2].methodDef
		}
	case 30:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:337
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{}
		}
	case 31:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:338
		{
			SDLVAL.compBodyItemList = SDLDollar[1].compBodyItemList
		}
	case 32:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:342
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{SDLDollar[1].compBodyItem}
		}
	case 33:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:343
		{
			SDLVAL.compBodyItemList = append(SDLDollar[1].compBodyItemList, SDLDollar[2].compBodyItem)
		}
	case 34:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:347
		{
			SDLVAL.compBodyItem = SDLDollar[1].paramDecl
		}
	case 35:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:348
		{
			SDLVAL.compBodyItem = SDLDollar[1].usesDecl
		}
	case 36:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:349
		{
			SDLVAL.compBodyItem = SDLDollar[1].methodDef
		}
	case 37:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:350
		{
			SDLVAL.compBodyItem = SDLDollar[1].componentDecl
		}
	case 38:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:354
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].typeDecl.End()),
				Name:     SDLDollar[2].ident,
				TypeDecl: SDLDollar[3].typeDecl, // TypeDecl also needs to have NodeInfo
			}
		}
	case 39:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:361
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo:     NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].expr.End()),
				Name:         SDLDollar[2].ident,
				DefaultValue: SDLDollar[4].expr,
			}
		}
	case 40:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:368
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo:     NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].expr.End()),
				Name:         SDLDollar[2].ident,
				TypeDecl:     SDLDollar[3].typeDecl,
				DefaultValue: SDLDollar[5].expr,
			}
		}
	case 41:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:380
		{
			identNode := SDLDollar[1].ident
			SDLVAL.typeDecl = &TypeDecl{
				NodeInfo: identNode.NodeInfo,
				Name:     identNode.Value,
			}
		}
	case 42:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:387
		{ // Tuple type
			if len(SDLDollar[2].typeDeclList) == 1 {
				SDLVAL.typeDecl = SDLDollar[2].typeDeclList[0]
			} else {
				SDLVAL.typeDecl = &TypeDecl{
					NodeInfo: NewNodeInfo(SDLDollar[1].node.Pos(), SDLDollar[3].node.Pos()),
					Name:     "Tuple",
					Args:     SDLDollar[2].typeDeclList,
				}
			}
		}
	case 43:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:398
		{
			identNode := SDLDollar[1].ident
			SDLVAL.typeDecl = &TypeDecl{
				NodeInfo: identNode.NodeInfo,
				Name:     identNode.Value,
				Args:     SDLDollar[3].typeDeclList,
			}
		}
	case 44:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:414
		{
			SDLVAL.typeDeclList = []*TypeDecl{SDLDollar[1].typeDecl}
		}
	case 45:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:415
		{
			SDLVAL.typeDeclList = append(SDLDollar[1].typeDeclList, SDLDollar[3].typeDecl)
		}
	case 46:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:419
		{ // USES($1) ...
			SDLVAL.usesDecl = &UsesDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].ident.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
			}
		}
	case 47:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:427
		{
			SDLVAL.usesDecl = &UsesDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     SDLDollar[5].assignList,
			}
		}
	case 48:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:438
		{ // METHOD($1) ... BlockStmt($6)
			SDLDollar[2].methodDef.Body = SDLDollar[3].blockStmt
			SDLDollar[2].methodDef.NodeInfo.StopPos = SDLDollar[3].blockStmt.End()
			SDLVAL.methodDef = SDLDollar[2].methodDef
		}
	case 49:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:446
		{
			SDLVAL.paramList = []*ParamDecl{}
		}
	case 50:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:447
		{
			SDLVAL.paramList = SDLDollar[1].paramList
		}
	case 51:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:451
		{
			SDLVAL.paramList = []*ParamDecl{SDLDollar[1].paramDecl}
		}
	case 52:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:452
		{
			SDLVAL.paramList = append(SDLDollar[1].paramList, SDLDollar[3].paramDecl)
		}
	case 53:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:456
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[2].typeDecl.End()),
				Name:     SDLDollar[1].ident,
				TypeDecl: SDLDollar[2].typeDecl, // TypeDecl also needs to have NodeInfo
			}
		}
	case 54:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:463
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo:     NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[4].expr.End()),
				Name:         SDLDollar[1].ident,
				TypeDecl:     SDLDollar[2].typeDecl,
				DefaultValue: SDLDollar[4].expr,
			}
		}
	case 55:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:475
		{ // SYSTEM($1) ... RBRACE($5)
			SDLVAL.systemDecl = &SystemDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Name:     SDLDollar[2].ident,
				Body:     SDLDollar[4].sysBodyItemList,
			}
		}
	case 56:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:485
		{ // SYSTEM($1) ... RBRACE($5)
			SDLVAL.aggregatorDecl = &AggregatorDecl{
				NodeInfo:   NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].methodDef.End()),
				Name:       SDLDollar[3].methodDef.Name,
				Parameters: SDLDollar[3].methodDef.Parameters,
				ReturnType: SDLDollar[3].methodDef.ReturnType,
			}
		}
	case 57:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:496
		{
			SDLVAL.sysBodyItemList = []SystemDeclBodyItem{}
		}
	case 58:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:497
		{
			SDLVAL.sysBodyItemList = append(SDLDollar[1].sysBodyItemList, SDLDollar[2].node.(SystemDeclBodyItem))
		}
	case 59:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:501
		{
			SDLVAL.node = SDLDollar[1].instanceDecl
		}
	case 60:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:503
		{
			SDLVAL.node = SDLDollar[1].optionsDecl
		}
	case 61:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:504
		{
			SDLVAL.node = SDLDollar[1].stmt
		}
	case 62:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:508
		{ // IDENTIFIER($1) ...
			SDLVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].ident.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     []*AssignmentStmt{},
			}
		}
	case 63:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:516
		{ // IDENTIFIER($1) ...
			SDLVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     SDLDollar[5].assignList,
			}
		}
	case 64:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:527
		{
			SDLVAL.assignList = []*AssignmentStmt{}
		}
	case 65:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:528
		{
			SDLVAL.assignList = SDLDollar[1].assignList
		}
	case 66:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:532
		{
			SDLVAL.assignList = []*AssignmentStmt{SDLDollar[1].assignStmt}
		}
	case 67:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:533
		{
			SDLVAL.assignList = append(SDLDollar[1].assignList, SDLDollar[3].assignStmt)
		}
	case 68:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:537
		{ // IDENTIFIER($1) ...
			SDLVAL.assignStmt = &AssignmentStmt{
				NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[3].expr.End()),
				Var:      SDLDollar[1].ident,
				Value:    SDLDollar[3].expr,
			}
		}
	case 69:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:612
		{
			SDLVAL.stmtList = []Stmt{}
		}
	case 70:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:613
		{
			SDLVAL.stmtList = SDLDollar[1].stmtList
			if SDLDollar[2].stmt != nil {
				SDLVAL.stmtList = append(SDLVAL.stmtList, SDLDollar[2].stmt)
			}
		}
	case 71:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:621
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 72:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:622
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 73:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:623
		{
			SDLVAL.stmt = SDLDollar[1].forStmt
		}
	case 74:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:624
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 75:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:625
		{
			SDLVAL.stmt = SDLDollar[1].ifStmt
		}
	case 76:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:626
		{
			SDLVAL.stmt = SDLDollar[1].delayStmt
		}
	case 77:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:627
		{
			SDLVAL.stmt = SDLDollar[1].switchStmt
		}
	case 78:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:628
		{
			SDLVAL.stmt = SDLDollar[1].blockStmt
		}
	case 79:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:629
		{
			SDLVAL.stmt = nil
		}
	case 80:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:634
		{
			SDLVAL.blockStmt = &BlockStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].node.(Node).End()), Statements: SDLDollar[2].stmtList}
		}
	case 81:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:639
		{
			SDLVAL.forStmt = &ForStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].stmt.End()), Condition: SDLDollar[2].expr, Body: SDLDollar[3].stmt}
		}
	case 82:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:645
		{ // LET($1) ...
			SDLVAL.stmt = &LetStmt{
				NodeInfo:  NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].expr.End()),
				Variables: SDLDollar[2].identList,
				Value:     SDLDollar[4].expr,
			}
		}
	case 83:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:670
		{
			SDLVAL.stmt = &ReturnStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End()), ReturnValue: SDLDollar[2].expr}
		}
	case 84:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:671
		{
			SDLVAL.stmt = &ReturnStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].node.(Node).End()), ReturnValue: nil}
		}
	case 85:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:675
		{
			SDLVAL.delayStmt = &DelayStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.End()), Duration: SDLDollar[2].expr}
		}
	case 86:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:679
		{ // WAIT($1) IDENTIFIER($2) ...
			idents := SDLDollar[2].identList
			endNode := idents[len(idents)-1] // End at the last identifier in the list
			SDLVAL.expr = &WaitExpr{FutureNames: idents}
			SDLVAL.expr.(*WaitExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.Pos(), endNode.End())
		}
	case 87:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:685
		{ // WAIT($1) IDENTIFIER($2) ...
			idents := SDLDollar[2].identList
			endNode := idents[len(idents)-1] // End at the last identifier in the list
			SDLVAL.expr = &WaitExpr{
				FutureNames:    idents,
				AggregatorName: SDLDollar[4].expr.(*CallExpr).Function.(*IdentifierExpr),
			}
			SDLVAL.expr.(*WaitExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.Pos(), endNode.End())
		}
	case 88:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:694
		{ // WAIT($1) IDENTIFIER($2) ...
			idents := SDLDollar[2].identList
			endNode := idents[len(idents)-1] // End at the last identifier in the list
			SDLVAL.expr = &WaitExpr{
				FutureNames:      idents,
				AggregatorName:   SDLDollar[4].expr.(*CallExpr).Function.(*IdentifierExpr),
				AggregatorParams: SDLDollar[4].expr.(*CallExpr).ArgMap,
			}
			SDLVAL.expr.(*WaitExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.Pos(), endNode.End())
		}
	case 89:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:708
		{
			SDLVAL.exprMap = map[string]Expr{}
		}
	case 90:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:709
		{
			SDLVAL.exprMap = SDLDollar[1].exprMap
		}
	case 91:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:713
		{
			SDLVAL.exprMap = map[string]Expr{SDLDollar[1].ident.Value: SDLDollar[3].expr}
		}
	case 92:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:714
		{
			name := SDLDollar[3].ident.Value
			SDLDollar[1].exprMap[name] = SDLDollar[5].expr
			SDLVAL.exprMap = SDLDollar[1].exprMap
		}
	case 93:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:723
		{
			SDLVAL.exprList = []Expr{}
		}
	case 94:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:724
		{
			SDLVAL.exprList = SDLDollar[1].exprList
		}
	case 95:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:728
		{
			SDLVAL.exprList = []Expr{SDLDollar[1].expr}
		}
	case 96:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:729
		{
			SDLVAL.exprList = append(SDLDollar[1].exprList, SDLDollar[3].expr)
		}
	case 97:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:734
		{ // IF($1) ...
			endNode := Stmt(SDLDollar[3].blockStmt)
			if SDLDollar[4].stmt != nil {
				endNode = SDLDollar[4].stmt
			} // End of Else block/IfStmt
			SDLVAL.ifStmt = &IfStmt{
				NodeInfo:  NewNodeInfo(SDLDollar[1].node.(Node).Pos(), endNode.End()),
				Condition: SDLDollar[2].expr,
				Then:      SDLDollar[3].blockStmt,
				Else:      SDLDollar[4].stmt,
			}
		}
	case 98:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:747
		{
			SDLVAL.stmt = nil
		}
	case 99:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:748
		{
			SDLVAL.stmt = SDLDollar[2].ifStmt
		}
	case 100:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:749
		{
			SDLVAL.stmt = SDLDollar[2].blockStmt
		}
	case 101:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:753
		{ // DISTRIBUTE($1) ... RBRACE($6)
			SDLVAL.sampleExpr = &SampleExpr{FromExpr: SDLDollar[2].expr}
			SDLVAL.sampleExpr.NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 102:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:759
		{
			SDLVAL.expr = nil
		}
	case 103:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:759
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 104:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:761
		{
			SDLVAL.tupleExpr = &TupleExpr{Children: append(SDLDollar[2].exprList, SDLDollar[4].expr)}
		}
	case 105:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:766
		{ // GO($1) ... BlockStmt($4)
			SDLVAL.expr = &GoExpr{Stmt: SDLDollar[2].blockStmt}
			SDLVAL.expr.(*GoExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].blockStmt.End())
		}
	case 106:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:770
		{
			SDLVAL.expr = &GoExpr{Expr: SDLDollar[2].expr}
			SDLVAL.expr.(*GoExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.End())
		}
	case 107:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:774
		{ // GO($1) ... BlockStmt($4)
			SDLVAL.expr = &GoExpr{LoopExpr: SDLDollar[2].expr, Stmt: SDLDollar[3].blockStmt}
			SDLVAL.expr.(*GoExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].blockStmt.End())
		}
	case 108:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:778
		{
			SDLVAL.expr = &GoExpr{LoopExpr: SDLDollar[2].expr, Expr: SDLDollar[3].expr}
			SDLVAL.expr.(*GoExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].expr.End())
		}
	case 109:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:787
		{
			SDLDollar[1].chainedExpr.Unchain(nil)
			SDLVAL.expr = SDLDollar[1].chainedExpr.UnchainedExpr
		}
	case 110:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:791
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 111:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:792
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 112:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:819
		{
			SDLVAL.chainedExpr = &ChainedExpr{Children: []Expr{SDLDollar[1].expr}}
		}
	case 113:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:822
		{
			SDLDollar[1].chainedExpr.Children = append(SDLDollar[1].chainedExpr.Children, SDLDollar[3].expr)
			SDLDollar[1].chainedExpr.Operators = append(SDLDollar[1].chainedExpr.Operators, SDLDollar[2].node.String())
			SDLVAL.chainedExpr = SDLDollar[1].chainedExpr
		}
	case 114:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:827
		{
			SDLDollar[1].chainedExpr.Children = append(SDLDollar[1].chainedExpr.Children, SDLDollar[3].expr)
			SDLDollar[1].chainedExpr.Operators = append(SDLDollar[1].chainedExpr.Operators, SDLDollar[2].node.String())
			SDLVAL.chainedExpr = SDLDollar[1].chainedExpr
		}
	case 115:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:834
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 116:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:836
		{
			SDLVAL.expr = &UnaryExpr{Operator: SDLDollar[1].node.String(), Right: SDLDollar[2].expr}
			SDLVAL.expr.(*UnaryExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 117:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:841
		{
			SDLVAL.expr = &UnaryExpr{Operator: SDLDollar[1].node.String(), Right: SDLDollar[2].expr}
			SDLVAL.expr.(*UnaryExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 118:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:849
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 119:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:850
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 120:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:851
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 121:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:852
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 122:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:856
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 123:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:857
		{
			SDLVAL.expr = SDLDollar[1].ident
		}
	case 124:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:858
		{
			SDLVAL.expr = SDLDollar[1].distributeExpr
		}
	case 125:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:859
		{
			SDLVAL.expr = SDLDollar[1].sampleExpr
		}
	case 126:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:860
		{
			SDLVAL.expr = SDLDollar[1].tupleExpr
		}
	case 127:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:861
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 128:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:862
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 129:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:863
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 130:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:866
		{
			SDLVAL.expr = SDLDollar[2].expr
		}
	case 131:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:869
		{
			// SDLlex.(*Lexer).lval)
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 132:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:873
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 133:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:874
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 134:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:875
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 135:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:876
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 136:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:880
		{ // Expression "[" Key "]"
			SDLVAL.expr = &IndexExpr{
				Receiver: SDLDollar[1].expr,
				Key:      SDLDollar[3].expr,
			}
			SDLVAL.expr.(*IndexExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), SDLDollar[4].node.End())
		}
	case 137:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:890
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			SDLVAL.expr = &MemberAccessExpr{
				Receiver: SDLDollar[1].ident,
				Member:   SDLDollar[3].ident,
			}
			SDLVAL.expr.(*MemberAccessExpr).NodeInfo = NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[3].ident.End())
		}
	case 138:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:897
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			SDLVAL.expr = &MemberAccessExpr{
				Receiver: SDLDollar[1].expr,
				Member:   SDLDollar[3].ident,
			}
			SDLVAL.expr.(*MemberAccessExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), SDLDollar[3].ident.End())
		}
	case 139:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:907
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			SDLVAL.expr = &CallExpr{Function: SDLDollar[1].expr}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), SDLDollar[3].node.End())
		}
	case 140:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:914
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := SDLDollar[4].node.(Node) // End at RPAREN
			SDLVAL.expr = &CallExpr{
				Function: SDLDollar[1].expr,
				IsNamed:  true,
				ArgMap:   SDLDollar[3].exprMap,
			}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), endNode.End())
		}
	case 141:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:926
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := SDLDollar[4].node.(Node) // End at RPAREN
			if len(SDLDollar[3].exprList) > 0 {
				exprList := SDLDollar[3].exprList
				endNode = exprList[len(exprList)-1].(Node) // End at last arg
			}
			SDLVAL.expr = &CallExpr{
				Function: SDLDollar[1].expr,
				ArgList:  SDLDollar[3].exprList,
			}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), endNode.End())
		}
	case 142:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:955
		{
			SDLVAL.distributeExpr = &DistributeExpr{TotalProb: SDLDollar[2].expr, Cases: SDLDollar[4].caseExprList, Default: SDLDollar[5].expr} /* TODO: Pos */
		}
	case 143:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:961
		{
			SDLVAL.caseExprList = []*CaseExpr{}
		}
	case 144:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:962
		{
			SDLVAL.caseExprList = SDLDollar[1].caseExprList
		}
	case 145:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:966
		{
			SDLVAL.caseExprList = []*CaseExpr{SDLDollar[1].caseExpr}
		}
	case 146:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:967
		{
			SDLVAL.caseExprList = append(SDLDollar[1].caseExprList, SDLDollar[2].caseExpr)
		}
	case 147:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:971
		{
			SDLVAL.caseExpr = &CaseExpr{Condition: SDLDollar[1].expr, Body: SDLDollar[3].expr}
		}
	case 148:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:974
		{ // allow optional comma
			SDLVAL.caseExpr = &CaseExpr{Condition: SDLDollar[1].expr, Body: SDLDollar[3].expr}
		}
	case 149:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:980
		{
			SDLVAL.expr = nil
		}
	case 150:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:981
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 151:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:985
		{
			SDLVAL.expr = SDLDollar[3].expr
		}
	case 152:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:986
		{
			SDLVAL.expr = SDLDollar[3].expr
		}
	case 153:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:990
		{
			SDLVAL.switchStmt = &SwitchStmt{Expr: SDLDollar[2].expr, Cases: SDLDollar[4].caseStmtList, Default: SDLDollar[5].stmt} /* TODO: Pos */
		}
	case 154:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:996
		{
			SDLVAL.caseStmtList = []*CaseStmt{}
		}
	case 155:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:997
		{
			SDLVAL.caseStmtList = SDLDollar[1].caseStmtList
		}
	case 156:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:1001
		{
			SDLVAL.caseStmtList = []*CaseStmt{SDLDollar[1].caseStmt}
		}
	case 157:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:1002
		{
			SDLVAL.caseStmtList = append(SDLDollar[1].caseStmtList, SDLDollar[2].caseStmt)
		}
	case 158:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:1006
		{
			SDLVAL.caseStmt = &CaseStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[3].stmt.End()), Condition: SDLDollar[1].expr, Body: SDLDollar[3].stmt}
		}
	case 159:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:1010
		{
			SDLVAL.stmt = nil
		}
	case 160:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:1011
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 161:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:1015
		{
			SDLVAL.stmt = SDLDollar[3].stmt
		}
	case 162:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:1019
		{
			SDLVAL.stmt = &ExprStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[1].expr.(Node).End()), Expression: SDLDollar[1].expr}
		}
	case 163:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:1020
		{
			SDLVAL.stmt = &ExprStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[1].expr.(Node).End()), Expression: SDLDollar[1].expr}
		}
	case 164:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:1021
		{
			SDLVAL.stmt = &ExprStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[1].expr.(Node).End()), Expression: SDLDollar[1].expr}
		}
	}
	goto SDLstack /* stack new state and value */
}
