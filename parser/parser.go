// Code generated by goyacc -o parser.go -p SDL grammar.y. DO NOT EDIT.

//line grammar.y:2
package parser

import __yyfmt__ "fmt"

//line grammar.y:2

import (
	// "reflect"
	"fmt"
	"io"
	"log"
)

// Function to be called by SDLParse on error.
// Needs access to the lexer passed via %parse-param.
func yyerror(yyl SDLLexer, msg string) {
	lexer := yyl.(LexerInterface)
	// line, col := lexer.Position()
	// log.Println("YYERROR MSG = ", msg)
	// errMsg := fmt.Sprintf("Error at Line %d, Col %d, Near ('%s'): %s", line, col, /* TokenString(lexer.LastToken()),*/ lexer.Text(), msg) // Added TokenString helper call
	lexer.Error(msg)
}

func yyerrok(lexer SDLLexer) {
	log.Println("Error here... not sure how to recover")
	///ErrFlag = 0
}

//line grammar.y:30
type SDLSymType struct {
	yys int
	// Basic types from lexer
	sval string // Holds raw string values like identifiers, literal content

	// AST Nodes (using pointers) - these should have NodeInfo
	file          *FileDecl
	componentDecl *ComponentDecl
	systemDecl    *SystemDecl
	node          Node // Generic interface for lists and for accessing NodeInfo
	// tokenNode   TokenNode // Generic interface for lists and for accessing NodeInfo
	expr         Expr
	chainedExpr  *ChainedExpr
	stmt         Stmt
	typeDecl     *TypeDecl
	paramDecl    *ParamDecl
	usesDecl     *UsesDecl
	methodDef    *MethodDecl
	instanceDecl *InstanceDecl
	analyzeDecl  *AnalyzeDecl
	expectBlock  *ExpectationsDecl
	expectStmt   *ExpectStmt
	blockStmt    *BlockStmt
	ifStmt       *IfStmt

	distributeExpr *DistributeExpr
	caseExpr       *CaseExpr

	switchStmt *SwitchStmt
	caseStmt   *CaseStmt

	tupleExpr   *TupleExpr
	goStmt      *GoStmt
	forStmt     *ForStmt
	assignStmt  *AssignmentStmt
	optionsDecl *OptionsDecl
	enumDecl    *EnumDecl
	importDecl  *ImportDecl
	waitStmt    *WaitStmt
	delayStmt   *DelayStmt
	sampleExpr  *SampleExpr

	// Slices for lists
	nodeList               []Node
	caseExprList           []*CaseExpr
	typeDeclList           []*TypeDecl
	caseStmtList           []*CaseStmt
	importDeclList         []*ImportDecl
	compBodyItem           ComponentDeclBodyItem
	compBodyItemList       []ComponentDeclBodyItem
	sysBodyItemList        []SystemDeclBodyItem
	paramList              []*ParamDecl
	assignList             []*AssignmentStmt
	exprList               []Expr
	stmtList               []Stmt
	ident                  *IdentifierExpr
	identList              []*IdentifierExpr
	distributeExprCaseList []*CaseExpr
	expectStmtList         []*ExpectStmt
	methodSigItemList      []*MethodDecl

	// Add field to store position for simple tokens if needed
	// posInfo     NodeInfo
}

const SYSTEM = 57346
const USES = 57347
const METHOD = 57348
const ANALYZE = 57349
const EXPECT = 57350
const LET = 57351
const IF = 57352
const ELSE = 57353
const SAMPLE = 57354
const DISTRIBUTE = 57355
const DEFAULT = 57356
const RETURN = 57357
const DELAY = 57358
const WAIT = 57359
const GO = 57360
const LOG = 57361
const SWITCH = 57362
const CASE = 57363
const FOR = 57364
const USE = 57365
const NATIVE = 57366
const LSQUARE = 57367
const RSQUARE = 57368
const LBRACE = 57369
const RBRACE = 57370
const OPTIONS = 57371
const ENUM = 57372
const COMPONENT = 57373
const PARAM = 57374
const IMPORT = 57375
const FROM = 57376
const AS = 57377
const ASSIGN = 57378
const COLON = 57379
const LPAREN = 57380
const RPAREN = 57381
const COMMA = 57382
const DOT = 57383
const ARROW = 57384
const LET_ASSIGN = 57385
const SEMICOLON = 57386
const INT = 57387
const FLOAT = 57388
const BOOL = 57389
const STRING = 57390
const DURATION = 57391
const INT_LITERAL = 57392
const FLOAT_LITERAL = 57393
const STRING_LITERAL = 57394
const BOOL_LITERAL = 57395
const DURATION_LITERAL = 57396
const IDENTIFIER = 57397
const OR = 57398
const AND = 57399
const EQ = 57400
const NEQ = 57401
const LT = 57402
const LTE = 57403
const GT = 57404
const GTE = 57405
const PLUS = 57406
const MUL = 57407
const DIV = 57408
const MOD = 57409
const DUAL_OP = 57410
const BINARY_NC_OP = 57411
const BINARY_OP = 57412
const UNARY_OP = 57413
const MINUS = 57414
const UMINUS = 57415

var SDLToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SYSTEM",
	"USES",
	"METHOD",
	"ANALYZE",
	"EXPECT",
	"LET",
	"IF",
	"ELSE",
	"SAMPLE",
	"DISTRIBUTE",
	"DEFAULT",
	"RETURN",
	"DELAY",
	"WAIT",
	"GO",
	"LOG",
	"SWITCH",
	"CASE",
	"FOR",
	"USE",
	"NATIVE",
	"LSQUARE",
	"RSQUARE",
	"LBRACE",
	"RBRACE",
	"OPTIONS",
	"ENUM",
	"COMPONENT",
	"PARAM",
	"IMPORT",
	"FROM",
	"AS",
	"ASSIGN",
	"COLON",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"DOT",
	"ARROW",
	"LET_ASSIGN",
	"SEMICOLON",
	"INT",
	"FLOAT",
	"BOOL",
	"STRING",
	"DURATION",
	"INT_LITERAL",
	"FLOAT_LITERAL",
	"STRING_LITERAL",
	"BOOL_LITERAL",
	"DURATION_LITERAL",
	"IDENTIFIER",
	"OR",
	"AND",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"PLUS",
	"MUL",
	"DIV",
	"MOD",
	"DUAL_OP",
	"BINARY_NC_OP",
	"BINARY_OP",
	"UNARY_OP",
	"MINUS",
	"UMINUS",
}

var SDLStatenames = [...]string{}

const SDLEofCode = 1
const SDLErrCode = 2
const SDLInitialStackSize = 16

//line grammar.y:996
// --- Go Code Section ---

// Interface for the lexer required by the parser.
type LexerInterface interface {
	Lex(lval *SDLSymType) int
	Error(s string)
	Pos() int                  // Start byte position of the last token read
	End() int                  // End byte position of the last token read
	Text() string              // Text of the last token read
	Position() (line, col int) // Added: Get line/col of last token start
	LastToken() int            // Added: Get the token code that was just lexed
}

// Parse takes an input stream and attempts to parse it according to the SDL grammar. 22222
// It returns the root of the Abstract Syntax Tree (*FileDecl) if successful, or an error.
func Parse(input io.Reader) (*Lexer, *FileDecl, error) {
	// Reset global result before parsing
	lexer := NewLexer(input)
	// Set yyDebug = 3 for verbose parser debugging output
	// yyDebug = 3
	resultCode := SDLParse(lexer) // Call the LALR parser generated by goyacc

	if resultCode != 0 {
		// A syntax error occurred. The lexer's Error method should have been called
		// and stored the error message.
		if lexer.lastError != nil {
			return lexer, nil, lexer.lastError
		}
		// Fallback error message if lexer didn't store one
		return lexer, nil, fmt.Errorf("syntax error near byte %d (Line %d, Col %d)", lexer.location.Pos, lexer.location.Line, lexer.location.Col)
	}

	// Parsing succeeded
	if lexer.parseResult == nil {
		// This indicates a potential issue with the grammar's top rule action
		return lexer, nil, fmt.Errorf("parsing finished successfully, but no AST result was produced")
	}

	return lexer, lexer.parseResult, nil
}

// The parser expects the lexer variable to be named yyLex.
// We can satisfy this by creating a global or passing it via SDLParseWithLexer.
// Using SDLParseWithLexer is cleaner.

// Example main function (optional, for standalone testing)
/*
func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: parser <input_file>")
		return
	}
	filePath := os.Args[1]
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Printf("Error opening file %s: %v\n", filePath, err)
		return
	}
	defer file.Close()

	astRoot, err := Parse(file)
	if err != nil {
		fmt.Printf("Parsing failed: %v\n", err)
		// Error message should ideally include line/column from lexer
	} else {
		fmt.Println("Parsing successful!")
		// Print the AST (implement String() methods for AST nodes for nice output)
		fmt.Println(astRoot.String())
	}
}
*/

//line yacctab:1
var SDLExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const SDLPrivate = 57344

const SDLLast = 302

var SDLAct = [...]uint8{
	124, 107, 100, 49, 205, 196, 194, 185, 167, 166,
	171, 59, 54, 95, 158, 159, 77, 45, 30, 137,
	115, 114, 143, 197, 144, 73, 172, 173, 162, 160,
	157, 39, 72, 62, 140, 138, 136, 61, 65, 74,
	85, 83, 82, 64, 67, 66, 116, 69, 68, 34,
	63, 18, 118, 79, 27, 70, 156, 84, 109, 110,
	111, 112, 113, 102, 93, 117, 119, 78, 121, 122,
	23, 135, 60, 137, 21, 20, 32, 243, 50, 97,
	98, 115, 114, 71, 238, 123, 8, 92, 231, 125,
	136, 134, 120, 133, 79, 72, 62, 142, 228, 214,
	129, 127, 130, 128, 126, 192, 193, 116, 78, 141,
	242, 145, 146, 131, 131, 149, 150, 152, 218, 109,
	110, 111, 112, 113, 102, 13, 90, 72, 62, 215,
	199, 153, 151, 24, 89, 155, 164, 179, 131, 25,
	97, 98, 174, 193, 161, 11, 236, 229, 177, 217,
	14, 15, 12, 198, 10, 186, 187, 175, 176, 189,
	38, 188, 180, 201, 190, 3, 168, 139, 222, 219,
	163, 26, 19, 46, 237, 191, 230, 44, 46, 206,
	207, 200, 132, 65, 80, 186, 178, 154, 70, 35,
	31, 29, 213, 28, 209, 208, 11, 22, 81, 43,
	70, 202, 216, 12, 43, 206, 17, 220, 223, 227,
	221, 165, 147, 226, 212, 182, 72, 62, 232, 42,
	234, 210, 6, 235, 233, 211, 183, 184, 57, 239,
	61, 65, 33, 72, 62, 240, 64, 67, 66, 241,
	69, 68, 224, 63, 61, 65, 225, 61, 70, 48,
	64, 67, 66, 103, 69, 68, 203, 63, 204, 148,
	195, 91, 70, 52, 88, 60, 86, 14, 41, 40,
	169, 170, 94, 106, 99, 108, 71, 101, 96, 60,
	105, 104, 56, 55, 58, 53, 51, 181, 16, 5,
	71, 9, 47, 75, 76, 36, 37, 7, 4, 87,
	2, 1,
}

var SDLPact = [...]int16{
	-1000, -1000, 121, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-4, 141, 20, 19, 170, 15, 99, -1000, 136, -1,
	166, 164, -1000, 163, 24, -4, -6, 162, 172, -1000,
	221, -16, -1000, -1000, -1000, 167, 156, 172, -1000, -1000,
	-1000, -1000, -1000, -13, -14, 161, -15, 238, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -16, -1000, 69, 8, 69, -16, 69, 69, 69,
	-1000, 63, 62, 74, -1000, 154, 167, -1000, -1000, -1000,
	-1000, -1000, 35, -20, -1000, 129, -1000, -1000, -1000, -1000,
	-1000, -21, 73, 235, -48, -1000, -1000, 69, 69, 187,
	-1000, -1000, 63, -1000, -1000, -1000, -1000, 62, -1000, -1000,
	-1000, -1000, -1000, -1000, 69, 69, 69, -1000, -1000, 161,
	98, -1000, 160, 95, -1000, 28, -25, 69, -26, 69,
	-1000, -27, -1000, -1000, 134, 69, 186, -19, 128, -29,
	-28, 69, -1000, 69, 69, -1000, -1000, 69, 159, -1000,
	-1000, 97, 123, 204, 69, 69, -1000, -1000, 122, 95,
	-1000, 120, -1000, 69, -1000, -19, 66, -1000, -32, 114,
	90, -1000, -19, 125, -1000, -1000, -1000, 175, 69, 69,
	-1000, -1000, 173, 200, 69, -1000, 57, -1000, -1000, -1000,
	-1000, 103, -1000, -19, 110, 78, -1000, 133, -19, -29,
	132, -32, -1000, 199, 69, -1000, 56, 108, -1000, -1000,
	148, -1000, 46, -1000, 235, -1000, -1000, -1000, -32, 69,
	-1000, -1000, 69, 107, 146, -1000, 42, -1000, 69, -1000,
	-1000, 235, -1000, -1000, -1000, -1000, -1000, -1000, 69, 70,
	-1000, 37, -1000, -1000,
}

var SDLPgo = [...]int16{
	0, 301, 300, 299, 298, 219, 297, 160, 296, 295,
	16, 294, 293, 292, 86, 291, 25, 206, 289, 288,
	3, 287, 78, 286, 285, 284, 283, 282, 281, 11,
	18, 280, 0, 13, 278, 277, 2, 1, 275, 274,
	273, 272, 31, 10, 271, 270, 8, 9, 269, 268,
	17, 264, 263, 5, 260, 6, 12, 14, 15, 259,
	4, 258, 256, 253, 246, 242, 228, 7, 227, 226,
	225, 221, 221,
}

var SDLR1 = [...]int8{
	0, 1, 2, 2, 2, 2, 4, 4, 4, 4,
	14, 5, 5, 15, 16, 16, 18, 19, 19, 17,
	17, 50, 50, 12, 12, 11, 11, 10, 10, 9,
	9, 8, 8, 7, 7, 7, 7, 42, 42, 42,
	46, 46, 46, 47, 47, 48, 48, 49, 45, 45,
	44, 44, 43, 43, 6, 13, 13, 3, 3, 3,
	51, 51, 55, 55, 54, 54, 53, 30, 30, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	29, 52, 22, 23, 24, 24, 27, 26, 25, 57,
	57, 58, 58, 56, 21, 21, 21, 28, 59, 59,
	31, 72, 72, 72, 32, 41, 41, 41, 33, 33,
	33, 34, 34, 39, 39, 39, 39, 39, 39, 39,
	39, 40, 35, 35, 35, 35, 35, 38, 37, 37,
	36, 36, 63, 62, 62, 61, 61, 60, 60, 65,
	65, 64, 64, 66, 69, 69, 68, 68, 67, 71,
	71, 70,
}

var SDLR2 = [...]int8{
	0, 1, 0, 2, 2, 2, 1, 1, 1, 1,
	4, 6, 5, 5, 1, 3, 4, 1, 3, 1,
	3, 5, 6, 0, 1, 1, 2, 1, 1, 0,
	1, 1, 2, 1, 1, 1, 1, 3, 4, 5,
	1, 3, 4, 1, 3, 3, 6, 2, 0, 1,
	1, 3, 2, 4, 5, 0, 2, 1, 1, 1,
	3, 6, 0, 1, 1, 3, 3, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 4, 1, 2, 2, 2, 2, 2, 0,
	1, 1, 3, 4, 0, 2, 2, 2, 0, 1,
	5, 4, 2, 4, 1, 1, 3, 3, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 4, 3, 3,
	4, 4, 6, 0, 1, 1, 2, 3, 4, 0,
	1, 3, 4, 6, 0, 1, 1, 2, 3, 0,
	1, 3,
}

var SDLChk = [...]int16{
	-1000, -1, -2, 44, -4, -18, -5, -6, -14, -15,
	33, 24, 31, 4, 29, 30, -19, -17, 55, 31,
	55, 55, 27, 55, 34, 40, 35, 55, 27, 27,
	-30, 27, 52, -17, 55, 27, -9, -8, -7, -42,
	-48, -49, -5, 32, 5, -50, 6, -13, 28, -20,
	-22, -23, -52, -24, -56, -26, -27, -66, -25, -29,
	44, 9, -36, 22, 15, 10, 17, 16, 20, 19,
	27, 55, -37, -16, 55, -12, -11, -10, -42, -50,
	28, -7, 55, 55, -29, 55, 28, -3, -51, -14,
	-22, 23, -16, -32, -41, -33, -34, 71, 72, -39,
	-36, -35, 55, -63, -28, -31, -40, -37, -38, 50,
	51, 52, 53, 54, 13, 12, 38, -32, 44, -32,
	-16, -32, -32, -58, -32, -30, 41, 38, 41, 38,
	28, 40, 28, -10, -46, 36, 55, 38, 55, 38,
	55, 36, -20, 70, 72, -33, -33, 25, -59, -32,
	-32, -58, -32, -29, 27, 40, 28, 55, -57, -58,
	55, -57, 55, 36, -32, 25, -47, -46, 38, -45,
	-44, -43, 55, 55, -32, -33, -33, -32, 27, 40,
	39, -21, 11, -69, -68, -67, -32, -32, 39, 39,
	-32, -47, 39, 40, -55, -54, -53, 55, 39, 40,
	-46, 38, 26, -62, -61, -60, -32, -32, -56, -29,
	-71, -70, 14, -67, 42, 26, -46, 39, 40, 36,
	-46, -43, 36, -55, -65, -64, 14, -60, 42, 39,
	28, 42, -20, -53, -32, -32, 39, 28, 42, -32,
	-20, -32, 40, 40,
}

var SDLDef = [...]int16{
	2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	0, 0, 0, 0, 0, 0, 0, 17, 19, 0,
	0, 0, 67, 0, 0, 0, 0, 0, 29, 55,
	0, 0, 16, 18, 20, 23, 0, 30, 31, 33,
	34, 35, 36, 0, 0, 0, 0, 0, 10, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 0, 83, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 14, 0, 24, 25, 27, 28,
	12, 32, 0, 0, 47, 0, 54, 56, 57, 58,
	59, 0, 0, 0, 104, 105, 108, 0, 0, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 122,
	123, 124, 125, 126, 98, 0, 0, 84, 85, 0,
	87, 86, 0, 88, 91, 0, 0, 89, 0, 89,
	13, 0, 11, 26, 37, 0, 40, 0, 45, 48,
	0, 0, 81, 0, 0, 109, 110, 0, 0, 99,
	97, 0, 91, 94, 144, 0, 80, 128, 0, 90,
	129, 0, 15, 0, 38, 0, 0, 43, 62, 0,
	49, 50, 0, 60, 82, 106, 107, 0, 133, 0,
	121, 93, 0, 149, 145, 146, 0, 92, 130, 131,
	39, 0, 41, 0, 0, 63, 64, 0, 21, 0,
	52, 62, 127, 139, 134, 135, 0, 92, 95, 96,
	0, 150, 0, 147, 0, 42, 44, 46, 0, 0,
	22, 51, 0, 0, 0, 140, 0, 136, 0, 100,
	143, 0, 148, 65, 66, 53, 61, 132, 0, 137,
	151, 141, 138, 142,
}

var SDLTok1 = [...]int8{
	1,
}

var SDLTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73,
}

var SDLTok3 = [...]int8{
	0,
}

var SDLErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	SDLDebug        = 0
	SDLErrorVerbose = false
)

type SDLLexer interface {
	Lex(lval *SDLSymType) int
	Error(s string)
}

type SDLParser interface {
	Parse(SDLLexer) int
	Lookahead() int
}

type SDLParserImpl struct {
	lval  SDLSymType
	stack [SDLInitialStackSize]SDLSymType
	char  int
}

func (p *SDLParserImpl) Lookahead() int {
	return p.char
}

func SDLNewParser() SDLParser {
	return &SDLParserImpl{}
}

const SDLFlag = -1000

func SDLTokname(c int) string {
	if c >= 1 && c-1 < len(SDLToknames) {
		if SDLToknames[c-1] != "" {
			return SDLToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func SDLStatname(s int) string {
	if s >= 0 && s < len(SDLStatenames) {
		if SDLStatenames[s] != "" {
			return SDLStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func SDLErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !SDLErrorVerbose {
		return "syntax error"
	}

	for _, e := range SDLErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + SDLTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(SDLPact[state])
	for tok := TOKSTART; tok-1 < len(SDLToknames); tok++ {
		if n := base + tok; n >= 0 && n < SDLLast && int(SDLChk[int(SDLAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if SDLDef[state] == -2 {
		i := 0
		for SDLExca[i] != -1 || int(SDLExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; SDLExca[i] >= 0; i += 2 {
			tok := int(SDLExca[i])
			if tok < TOKSTART || SDLExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if SDLExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += SDLTokname(tok)
	}
	return res
}

func SDLlex1(lex SDLLexer, lval *SDLSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(SDLTok1[0])
		goto out
	}
	if char < len(SDLTok1) {
		token = int(SDLTok1[char])
		goto out
	}
	if char >= SDLPrivate {
		if char < SDLPrivate+len(SDLTok2) {
			token = int(SDLTok2[char-SDLPrivate])
			goto out
		}
	}
	for i := 0; i < len(SDLTok3); i += 2 {
		token = int(SDLTok3[i+0])
		if token == char {
			token = int(SDLTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(SDLTok2[1]) /* unknown char */
	}
	if SDLDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", SDLTokname(token), uint(char))
	}
	return char, token
}

func SDLParse(SDLlex SDLLexer) int {
	return SDLNewParser().Parse(SDLlex)
}

func (SDLrcvr *SDLParserImpl) Parse(SDLlex SDLLexer) int {
	var SDLn int
	var SDLVAL SDLSymType
	var SDLDollar []SDLSymType
	_ = SDLDollar // silence set and not used
	SDLS := SDLrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	SDLstate := 0
	SDLrcvr.char = -1
	SDLtoken := -1 // SDLrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		SDLstate = -1
		SDLrcvr.char = -1
		SDLtoken = -1
	}()
	SDLp := -1
	goto SDLstack

ret0:
	return 0

ret1:
	return 1

SDLstack:
	/* put a state and value onto the stack */
	if SDLDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", SDLTokname(SDLtoken), SDLStatname(SDLstate))
	}

	SDLp++
	if SDLp >= len(SDLS) {
		nyys := make([]SDLSymType, len(SDLS)*2)
		copy(nyys, SDLS)
		SDLS = nyys
	}
	SDLS[SDLp] = SDLVAL
	SDLS[SDLp].yys = SDLstate

SDLnewstate:
	SDLn = int(SDLPact[SDLstate])
	if SDLn <= SDLFlag {
		goto SDLdefault /* simple state */
	}
	if SDLrcvr.char < 0 {
		SDLrcvr.char, SDLtoken = SDLlex1(SDLlex, &SDLrcvr.lval)
	}
	SDLn += SDLtoken
	if SDLn < 0 || SDLn >= SDLLast {
		goto SDLdefault
	}
	SDLn = int(SDLAct[SDLn])
	if int(SDLChk[SDLn]) == SDLtoken { /* valid shift */
		SDLrcvr.char = -1
		SDLtoken = -1
		SDLVAL = SDLrcvr.lval
		SDLstate = SDLn
		if Errflag > 0 {
			Errflag--
		}
		goto SDLstack
	}

SDLdefault:
	/* default state action */
	SDLn = int(SDLDef[SDLstate])
	if SDLn == -2 {
		if SDLrcvr.char < 0 {
			SDLrcvr.char, SDLtoken = SDLlex1(SDLlex, &SDLrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if SDLExca[xi+0] == -1 && int(SDLExca[xi+1]) == SDLstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			SDLn = int(SDLExca[xi+0])
			if SDLn < 0 || SDLn == SDLtoken {
				break
			}
		}
		SDLn = int(SDLExca[xi+1])
		if SDLn < 0 {
			goto ret0
		}
	}
	if SDLn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			SDLlex.Error(SDLErrorMessage(SDLstate, SDLtoken))
			Nerrs++
			if SDLDebug >= 1 {
				__yyfmt__.Printf("%s", SDLStatname(SDLstate))
				__yyfmt__.Printf(" saw %s\n", SDLTokname(SDLtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for SDLp >= 0 {
				SDLn = int(SDLPact[SDLS[SDLp].yys]) + SDLErrCode
				if SDLn >= 0 && SDLn < SDLLast {
					SDLstate = int(SDLAct[SDLn]) /* simulate a shift of "error" */
					if int(SDLChk[SDLstate]) == SDLErrCode {
						goto SDLstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if SDLDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", SDLS[SDLp].yys)
				}
				SDLp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if SDLDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", SDLTokname(SDLtoken))
			}
			if SDLtoken == SDLEofCode {
				goto ret1
			}
			SDLrcvr.char = -1
			SDLtoken = -1
			goto SDLnewstate /* try again in the same state */
		}
	}

	/* reduction by production SDLn */
	if SDLDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", SDLn, SDLStatname(SDLstate))
	}

	SDLnt := SDLn
	SDLpt := SDLp
	_ = SDLpt // guard against "declared and not used"

	SDLp -= int(SDLR2[SDLn])
	// SDLp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if SDLp+1 >= len(SDLS) {
		nyys := make([]SDLSymType, len(SDLS)*2)
		copy(nyys, SDLS)
		SDLS = nyys
	}
	SDLVAL = SDLS[SDLp+1]

	/* consult goto table to find next state */
	SDLn = int(SDLR1[SDLn])
	SDLg := int(SDLPgo[SDLn])
	SDLj := SDLg + SDLS[SDLp].yys + 1

	if SDLj >= SDLLast {
		SDLstate = int(SDLAct[SDLg])
	} else {
		SDLstate = int(SDLAct[SDLj])
		if int(SDLChk[SDLstate]) != -SDLn {
			SDLstate = int(SDLAct[SDLg])
		}
	}
	// dummy call; replaced with literal code
	switch SDLnt {

	case 1:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:193
		{
			ni := NodeInfo{}
			if len(SDLDollar[1].nodeList) > 0 {
				ni.StartPos = SDLDollar[1].nodeList[0].Pos()
				ni.StopPos = SDLDollar[1].nodeList[len(SDLDollar[1].nodeList)-1].End()
			}
			SDLlex.(*Lexer).parseResult = &FileDecl{NodeInfo: ni, Declarations: SDLDollar[1].nodeList}
			// $$ = &File{NodeInfo: ni, Declarations: $1}
		}
	case 2:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:205
		{
			SDLVAL.nodeList = []Node{}
		}
	case 3:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:206
		{
			SDLVAL.nodeList = SDLDollar[1].nodeList
		}
	case 4:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:207
		{
			SDLVAL.nodeList = append(SDLDollar[1].nodeList, SDLDollar[2].node)
		}
	case 5:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:210
		{
			for _, imp := range SDLDollar[2].importDeclList {
				SDLDollar[1].nodeList = append(SDLDollar[1].nodeList, imp)
			}
			SDLVAL.nodeList = SDLDollar[1].nodeList
		}
	case 6:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:219
		{
			SDLVAL.node = SDLDollar[1].componentDecl
		}
	case 7:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:220
		{
			SDLVAL.node = SDLDollar[1].systemDecl
		}
	case 8:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:221
		{
			SDLVAL.node = SDLDollar[1].optionsDecl
		}
	case 9:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:222
		{
			SDLVAL.node = SDLDollar[1].enumDecl
		}
	case 10:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:226
		{ // OPTIONS ($1) LBRACE ($2) StmtList ($3) RBRACE ($4)
			// Assume OPTIONS token itself doesn't carry complex NodeInfo from lexer for this example.
			// Span from LBRACE to RBRACE for body. If StmtList is empty, Body.NodeInfo might be tricky.
			/*
			   bodyStart := $2.(Node).Pos() // Position of LBRACE (assuming lexer returns it as Node)
			   bodyEnd := $4.(Node).Pos()   // Position of RBRACE (actually its start, use .End() for full span)
			   if len($3) > 0 { // If StmtList is not empty
			       bodyStart = $3[0].Pos()
			       bodyEnd = $3[len($3)-1].End()
			   }
			*/
			SDLVAL.optionsDecl = &OptionsDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].node.(Node).End()), // Pos of OPTIONS, End of RBRACE
				Body: &BlockStmt{
					NodeInfo:   NewNodeInfo(SDLDollar[2].node.(Node).Pos(), SDLDollar[4].node.(Node).End()),
					Statements: SDLDollar[3].stmtList,
				},
			}
		}
	case 11:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:248
		{ // COMPONENT($1) ... RBRACE($5)
			SDLVAL.componentDecl = &ComponentDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.(Node).End()),
				Name:     SDLDollar[3].ident,
				Body:     SDLDollar[5].compBodyItemList,
				IsNative: true,
			}
		}
	case 12:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:256
		{ // COMPONENT($1) ... RBRACE($5)
			SDLVAL.componentDecl = &ComponentDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Name:     SDLDollar[2].ident,
				Body:     SDLDollar[4].compBodyItemList,
			}
		}
	case 13:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:266
		{ // ENUM($1) IDENTIFIER($2) ... RBRACE($5)
			SDLVAL.enumDecl = &EnumDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Name:     SDLDollar[2].ident, // $2 is an IdentifierExpr from lexer, has Pos/End
				Values:   SDLDollar[4].identList,
			}
		}
	case 14:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:276
		{
			SDLVAL.identList = []*IdentifierExpr{SDLDollar[1].ident}
		}
	case 15:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:277
		{
			SDLVAL.identList = append(SDLDollar[1].identList, SDLDollar[3].ident)
		}
	case 16:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:281
		{ // IMPORT($1) STRING_LITERAL($2)
			path := SDLDollar[4].expr.(*LiteralExpr)
			for _, imp := range SDLDollar[2].importDeclList {
				imp.Path = path
			}
			SDLVAL.importDeclList = SDLDollar[2].importDeclList
		}
	case 17:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:290
		{
			SDLVAL.importDeclList = []*ImportDecl{SDLDollar[1].importDecl}
		}
	case 18:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:291
		{
			SDLVAL.importDeclList = append(SDLVAL.importDeclList, SDLDollar[3].importDecl)
		}
	case 19:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:294
		{
			SDLVAL.importDecl = &ImportDecl{ImportedItem: SDLDollar[1].ident, Alias: SDLDollar[1].ident}
		}
	case 20:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:295
		{
			SDLVAL.importDecl = &ImportDecl{ImportedItem: SDLDollar[1].ident, Alias: SDLDollar[3].ident}
		}
	case 21:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:311
		{ // METHOD($1) ... BlockStmt($6)
			SDLVAL.methodDef = &MethodDecl{
				NodeInfo:   NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.End()),
				Name:       SDLDollar[2].ident,
				Parameters: SDLDollar[4].paramList,
			}
		}
	case 22:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:318
		{ // METHOD($1) ... BlockStmt($8)
			SDLVAL.methodDef = &MethodDecl{
				NodeInfo:   NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].typeDecl.End()),
				Name:       SDLDollar[2].ident,
				Parameters: SDLDollar[4].paramList,
				ReturnType: SDLDollar[6].typeDecl,
			}
		}
	case 23:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:329
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{}
		}
	case 24:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:330
		{
			SDLVAL.compBodyItemList = SDLDollar[1].compBodyItemList
		}
	case 25:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:334
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{SDLDollar[1].compBodyItem}
		}
	case 26:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:335
		{
			SDLVAL.compBodyItemList = append(SDLDollar[1].compBodyItemList, SDLDollar[2].compBodyItem)
		}
	case 27:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:339
		{
			SDLVAL.compBodyItem = SDLDollar[1].paramDecl
		}
	case 28:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:340
		{
			SDLVAL.compBodyItem = SDLDollar[1].methodDef
		}
	case 29:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:345
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{}
		}
	case 30:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:346
		{
			SDLVAL.compBodyItemList = SDLDollar[1].compBodyItemList
		}
	case 31:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:350
		{
			SDLVAL.compBodyItemList = []ComponentDeclBodyItem{SDLDollar[1].compBodyItem}
		}
	case 32:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:351
		{
			SDLVAL.compBodyItemList = append(SDLDollar[1].compBodyItemList, SDLDollar[2].compBodyItem)
		}
	case 33:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:355
		{
			SDLVAL.compBodyItem = SDLDollar[1].paramDecl
		}
	case 34:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:356
		{
			SDLVAL.compBodyItem = SDLDollar[1].usesDecl
		}
	case 35:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:357
		{
			SDLVAL.compBodyItem = SDLDollar[1].methodDef
		}
	case 36:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:358
		{
			SDLVAL.compBodyItem = SDLDollar[1].componentDecl
		}
	case 37:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:362
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].typeDecl.End()),
				Name:     SDLDollar[2].ident,
				TypeDecl: SDLDollar[3].typeDecl, // TypeDecl also needs to have NodeInfo
			}
		}
	case 38:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:369
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo:     NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].expr.End()),
				Name:         SDLDollar[2].ident,
				DefaultValue: SDLDollar[4].expr,
			}
		}
	case 39:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:376
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo:     NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].expr.End()),
				Name:         SDLDollar[2].ident,
				TypeDecl:     SDLDollar[3].typeDecl,
				DefaultValue: SDLDollar[5].expr,
			}
		}
	case 40:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:388
		{
			identNode := SDLDollar[1].ident
			SDLVAL.typeDecl = &TypeDecl{
				NodeInfo: identNode.NodeInfo,
				Name:     identNode.Value,
			}
		}
	case 41:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:395
		{ // Tuple type
			if len(SDLDollar[2].typeDeclList) == 1 {
				SDLVAL.typeDecl = SDLDollar[2].typeDeclList[0]
			} else {
				SDLVAL.typeDecl = &TypeDecl{
					NodeInfo: NewNodeInfo(SDLDollar[1].node.Pos(), SDLDollar[3].node.Pos()),
					Name:     "Tuple",
					Args:     SDLDollar[2].typeDeclList,
				}
			}
		}
	case 42:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:406
		{
			identNode := SDLDollar[1].ident
			SDLVAL.typeDecl = &TypeDecl{
				NodeInfo: identNode.NodeInfo,
				Name:     identNode.Value,
				Args:     SDLDollar[3].typeDeclList,
			}
		}
	case 43:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:422
		{
			SDLVAL.typeDeclList = []*TypeDecl{SDLDollar[1].typeDecl}
		}
	case 44:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:423
		{
			SDLVAL.typeDeclList = append(SDLDollar[1].typeDeclList, SDLDollar[3].typeDecl)
		}
	case 45:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:427
		{ // USES($1) ...
			SDLVAL.usesDecl = &UsesDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].ident.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
			}
		}
	case 46:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:435
		{
			SDLVAL.usesDecl = &UsesDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     SDLDollar[5].assignList,
			}
		}
	case 47:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:446
		{ // METHOD($1) ... BlockStmt($6)
			SDLDollar[1].methodDef.Body = SDLDollar[2].blockStmt
			SDLDollar[1].methodDef.NodeInfo.StopPos = SDLDollar[2].blockStmt.End()
			SDLVAL.methodDef = SDLDollar[1].methodDef
		}
	case 48:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:454
		{
			SDLVAL.paramList = []*ParamDecl{}
		}
	case 49:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:455
		{
			SDLVAL.paramList = SDLDollar[1].paramList
		}
	case 50:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:459
		{
			SDLVAL.paramList = []*ParamDecl{SDLDollar[1].paramDecl}
		}
	case 51:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:460
		{
			SDLVAL.paramList = append(SDLDollar[1].paramList, SDLDollar[3].paramDecl)
		}
	case 52:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:464
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[2].typeDecl.End()),
				Name:     SDLDollar[1].ident,
				TypeDecl: SDLDollar[2].typeDecl, // TypeDecl also needs to have NodeInfo
			}
		}
	case 53:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:471
		{ // PARAM($1) ...
			SDLVAL.paramDecl = &ParamDecl{
				NodeInfo:     NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[4].expr.End()),
				Name:         SDLDollar[1].ident,
				TypeDecl:     SDLDollar[2].typeDecl,
				DefaultValue: SDLDollar[4].expr,
			}
		}
	case 54:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:483
		{ // SYSTEM($1) ... RBRACE($5)
			SDLVAL.systemDecl = &SystemDecl{
				NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[5].node.(Node).End()),
				Name:     SDLDollar[2].ident,
				Body:     SDLDollar[4].sysBodyItemList,
			}
		}
	case 55:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:493
		{
			SDLVAL.sysBodyItemList = []SystemDeclBodyItem{}
		}
	case 56:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:494
		{
			SDLVAL.sysBodyItemList = append(SDLDollar[1].sysBodyItemList, SDLDollar[2].node.(SystemDeclBodyItem))
		}
	case 57:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:498
		{
			SDLVAL.node = SDLDollar[1].instanceDecl
		}
	case 58:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:500
		{
			SDLVAL.node = SDLDollar[1].optionsDecl
		}
	case 59:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:501
		{
			SDLVAL.node = SDLDollar[1].stmt
		}
	case 60:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:505
		{ // IDENTIFIER($1) ...
			SDLVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].ident.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     []*AssignmentStmt{},
			}
		}
	case 61:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:513
		{ // IDENTIFIER($1) ...
			SDLVAL.instanceDecl = &InstanceDecl{
				NodeInfo:      NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[6].node.End()),
				Name:          SDLDollar[2].ident,
				ComponentName: SDLDollar[3].ident,
				Overrides:     SDLDollar[5].assignList,
			}
		}
	case 62:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:524
		{
			SDLVAL.assignList = []*AssignmentStmt{}
		}
	case 63:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:525
		{
			SDLVAL.assignList = SDLDollar[1].assignList
		}
	case 64:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:529
		{
			SDLVAL.assignList = []*AssignmentStmt{SDLDollar[1].assignStmt}
		}
	case 65:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:530
		{
			SDLVAL.assignList = append(SDLDollar[1].assignList, SDLDollar[3].assignStmt)
		}
	case 66:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:534
		{ // IDENTIFIER($1) ...
			SDLVAL.assignStmt = &AssignmentStmt{
				NodeInfo: NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[3].expr.End()),
				Var:      SDLDollar[1].ident,
				Value:    SDLDollar[3].expr,
			}
		}
	case 67:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:609
		{
			SDLVAL.stmtList = []Stmt{}
		}
	case 68:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:610
		{
			SDLVAL.stmtList = SDLDollar[1].stmtList
			if SDLDollar[2].stmt != nil {
				SDLVAL.stmtList = append(SDLVAL.stmtList, SDLDollar[2].stmt)
			}
		}
	case 69:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:618
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 70:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:619
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 71:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:620
		{
			SDLVAL.stmt = SDLDollar[1].forStmt
		}
	case 72:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:621
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 73:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:622
		{
			SDLVAL.stmt = SDLDollar[1].ifStmt
		}
	case 74:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:623
		{
			SDLVAL.stmt = SDLDollar[1].waitStmt
		}
	case 75:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:624
		{
			SDLVAL.stmt = SDLDollar[1].delayStmt
		}
	case 76:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:625
		{
			SDLVAL.stmt = SDLDollar[1].switchStmt
		}
	case 77:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:627
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 78:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:628
		{
			SDLVAL.stmt = SDLDollar[1].blockStmt
		}
	case 79:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:629
		{
			SDLVAL.stmt = nil
		}
	case 80:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:634
		{
			SDLVAL.blockStmt = &BlockStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].node.(Node).End()), Statements: SDLDollar[2].stmtList}
		}
	case 81:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:639
		{
			SDLVAL.forStmt = &ForStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[3].stmt.End()), Condition: SDLDollar[2].expr, Body: SDLDollar[3].stmt}
		}
	case 82:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:645
		{ // LET($1) ...
			SDLVAL.stmt = &LetStmt{
				NodeInfo:  NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].expr.End()),
				Variables: SDLDollar[2].identList,
				Value:     SDLDollar[4].expr,
			}
		}
	case 83:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:670
		{
			SDLVAL.stmt = &ExprStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[1].expr.(Node).End()), Expression: SDLDollar[1].expr}
		}
	case 84:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:674
		{
			SDLVAL.stmt = &ReturnStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End()), ReturnValue: SDLDollar[2].expr}
		}
	case 85:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:675
		{
			SDLVAL.stmt = &ReturnStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].node.(Node).End()), ReturnValue: nil}
		}
	case 86:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:679
		{
			SDLVAL.delayStmt = &DelayStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.End()), Duration: SDLDollar[2].expr}
		}
	case 87:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:683
		{ // WAIT($1) IDENTIFIER($2) ...
			idents := SDLDollar[2].identList
			endNode := idents[len(idents)-1] // End at the last identifier in the list
			SDLVAL.waitStmt = &WaitStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.Pos(), endNode.End()), Idents: idents}
		}
	case 88:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:691
		{ // LOG($1) Expression($2) ...
			SDLVAL.stmt = &LogStmt{Args: SDLDollar[2].exprList}
		}
	case 89:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:698
		{
			SDLVAL.exprList = []Expr{}
		}
	case 90:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:699
		{
			SDLVAL.exprList = SDLDollar[1].exprList
		}
	case 91:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:703
		{
			SDLVAL.exprList = []Expr{SDLDollar[1].expr}
		}
	case 92:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:704
		{
			SDLVAL.exprList = append(SDLDollar[1].exprList, SDLDollar[3].expr)
		}
	case 93:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:709
		{ // IF($1) ...
			endNode := Stmt(SDLDollar[3].blockStmt)
			if SDLDollar[4].stmt != nil {
				endNode = SDLDollar[4].stmt
			} // End of Else block/IfStmt
			SDLVAL.ifStmt = &IfStmt{
				NodeInfo:  NewNodeInfo(SDLDollar[1].node.(Node).Pos(), endNode.End()),
				Condition: SDLDollar[2].expr,
				Then:      SDLDollar[3].blockStmt,
				Else:      SDLDollar[4].stmt,
			}
		}
	case 94:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:722
		{
			SDLVAL.stmt = nil
		}
	case 95:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:723
		{
			SDLVAL.stmt = SDLDollar[2].ifStmt
		}
	case 96:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:724
		{
			SDLVAL.stmt = SDLDollar[2].blockStmt
		}
	case 97:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:728
		{ // DISTRIBUTE($1) ... RBRACE($6)
			SDLVAL.sampleExpr = &SampleExpr{FromExpr: SDLDollar[2].expr}
			SDLVAL.sampleExpr.NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 98:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:734
		{
			SDLVAL.expr = nil
		}
	case 99:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:734
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 100:
		SDLDollar = SDLS[SDLpt-5 : SDLpt+1]
//line grammar.y:736
		{
			SDLVAL.tupleExpr = &TupleExpr{Children: append(SDLDollar[2].exprList, SDLDollar[4].expr)}
		}
	case 101:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:741
		{ // GO($1) ... BlockStmt($4)
			SDLVAL.goStmt = &GoStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[4].stmt.End()), VarName: SDLDollar[2].ident, Stmt: SDLDollar[4].stmt}
		}
	case 102:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:744
		{ // GO($1) BlockStmt($2)
			SDLVAL.goStmt = &GoStmt{NodeInfo: NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].blockStmt.End()), VarName: nil, Stmt: SDLDollar[2].blockStmt}
		}
	case 103:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:747
		{
			yyerror(SDLlex, fmt.Sprintf("`go` currently only supports assigning blocks, not expressions, at pos %d", SDLDollar[1].node.(Node).Pos()))
			SDLVAL.goStmt = &GoStmt{}
		}
	case 104:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:756
		{
			SDLDollar[1].chainedExpr.Unchain(nil)
			SDLVAL.expr = SDLDollar[1].chainedExpr.UnchainedExpr
		}
	case 105:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:785
		{
			SDLVAL.chainedExpr = &ChainedExpr{Children: []Expr{SDLDollar[1].expr}}
		}
	case 106:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:788
		{
			SDLDollar[1].chainedExpr.Children = append(SDLDollar[1].chainedExpr.Children, SDLDollar[3].expr)
			SDLDollar[1].chainedExpr.Operators = append(SDLDollar[1].chainedExpr.Operators, SDLDollar[2].node.String())
			SDLVAL.chainedExpr = SDLDollar[1].chainedExpr
		}
	case 107:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:793
		{
			SDLDollar[1].chainedExpr.Children = append(SDLDollar[1].chainedExpr.Children, SDLDollar[3].expr)
			SDLDollar[1].chainedExpr.Operators = append(SDLDollar[1].chainedExpr.Operators, SDLDollar[2].node.String())
			SDLVAL.chainedExpr = SDLDollar[1].chainedExpr
		}
	case 108:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:800
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 109:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:802
		{
			SDLVAL.expr = &UnaryExpr{Operator: SDLDollar[1].node.String(), Right: SDLDollar[2].expr}
			SDLVAL.expr.(*UnaryExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 110:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:807
		{
			SDLVAL.expr = &UnaryExpr{Operator: SDLDollar[1].node.String(), Right: SDLDollar[2].expr}
			SDLVAL.expr.(*UnaryExpr).NodeInfo = NewNodeInfo(SDLDollar[1].node.(Node).Pos(), SDLDollar[2].expr.(Node).End())
		}
	case 111:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:850
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 112:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:851
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 113:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:855
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 114:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:856
		{
			SDLVAL.expr = SDLDollar[1].ident
		}
	case 115:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:857
		{
			SDLVAL.expr = SDLDollar[1].distributeExpr
		}
	case 116:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:858
		{
			SDLVAL.expr = SDLDollar[1].sampleExpr
		}
	case 117:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:859
		{
			SDLVAL.expr = SDLDollar[1].tupleExpr
		}
	case 118:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:860
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 119:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:861
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 120:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:862
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 121:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:865
		{
			SDLVAL.expr = SDLDollar[2].expr
		}
	case 122:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:868
		{
			// SDLlex.(*Lexer).lval)
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 123:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:872
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 124:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:873
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 125:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:874
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 126:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:875
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 127:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:879
		{ // Expression "[" Key "]"
			SDLVAL.expr = &IndexExpr{
				Receiver: SDLDollar[1].expr,
				Key:      SDLDollar[3].expr,
			}
			SDLVAL.expr.(*IndexExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), SDLDollar[4].node.End())
		}
	case 128:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:889
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			SDLVAL.expr = &MemberAccessExpr{
				Receiver: SDLDollar[1].ident,
				Member:   SDLDollar[3].ident,
			}
			SDLVAL.expr.(*MemberAccessExpr).NodeInfo = NewNodeInfo(SDLDollar[1].ident.Pos(), SDLDollar[3].ident.End())
		}
	case 129:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:896
		{ // PrimaryExpr($1) DOT($2) IDENTIFIER($3)
			SDLVAL.expr = &MemberAccessExpr{
				Receiver: SDLDollar[1].expr,
				Member:   SDLDollar[3].ident,
			}
			SDLVAL.expr.(*MemberAccessExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), SDLDollar[3].ident.End())
		}
	case 130:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:906
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := SDLDollar[4].node.(Node) // End at RPAREN
			if len(SDLDollar[3].exprList) > 0 {
				exprList := SDLDollar[3].exprList
				endNode = exprList[len(exprList)-1].(Node) // End at last arg
			}
			SDLVAL.expr = &CallExpr{
				Function: SDLDollar[1].ident,
				Args:     SDLDollar[3].exprList,
			}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].ident.Pos(), endNode.End())
		}
	case 131:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:918
		{ // PrimaryExpr($1) LPAREN($2) ArgList($3) RPAREN($4)
			endNode := SDLDollar[4].node.(Node) // End at RPAREN
			if len(SDLDollar[3].exprList) > 0 {
				exprList := SDLDollar[3].exprList
				endNode = exprList[len(exprList)-1].(Node) // End at last arg
			}
			SDLVAL.expr = &CallExpr{
				Function: SDLDollar[1].expr,
				Args:     SDLDollar[3].exprList,
			}
			SDLVAL.expr.(*CallExpr).NodeInfo = NewNodeInfo(SDLDollar[1].expr.Pos(), endNode.End())
		}
	case 132:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:933
		{
			SDLVAL.distributeExpr = &DistributeExpr{TotalProb: SDLDollar[2].expr, Cases: SDLDollar[4].caseExprList, Default: SDLDollar[5].expr} /* TODO: Pos */
		}
	case 133:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:939
		{
			SDLVAL.caseExprList = []*CaseExpr{}
		}
	case 134:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:940
		{
			SDLVAL.caseExprList = SDLDollar[1].caseExprList
		}
	case 135:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:944
		{
			SDLVAL.caseExprList = []*CaseExpr{SDLDollar[1].caseExpr}
		}
	case 136:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:945
		{
			SDLVAL.caseExprList = append(SDLDollar[1].caseExprList, SDLDollar[2].caseExpr)
		}
	case 137:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:949
		{
			SDLVAL.caseExpr = &CaseExpr{Condition: SDLDollar[1].expr, Body: SDLDollar[3].expr}
		}
	case 138:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:952
		{ // allow optional comma
			SDLVAL.caseExpr = &CaseExpr{Condition: SDLDollar[1].expr, Body: SDLDollar[3].expr}
		}
	case 139:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:958
		{
			SDLVAL.expr = nil
		}
	case 140:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:959
		{
			SDLVAL.expr = SDLDollar[1].expr
		}
	case 141:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:963
		{
			SDLVAL.expr = SDLDollar[3].expr
		}
	case 142:
		SDLDollar = SDLS[SDLpt-4 : SDLpt+1]
//line grammar.y:964
		{
			SDLVAL.expr = SDLDollar[3].expr
		}
	case 143:
		SDLDollar = SDLS[SDLpt-6 : SDLpt+1]
//line grammar.y:968
		{
			SDLVAL.switchStmt = &SwitchStmt{Expr: SDLDollar[2].expr, Cases: SDLDollar[4].caseStmtList, Default: SDLDollar[5].stmt} /* TODO: Pos */
		}
	case 144:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:974
		{
			SDLVAL.caseStmtList = []*CaseStmt{}
		}
	case 145:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:975
		{
			SDLVAL.caseStmtList = SDLDollar[1].caseStmtList
		}
	case 146:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:979
		{
			SDLVAL.caseStmtList = []*CaseStmt{SDLDollar[1].caseStmt}
		}
	case 147:
		SDLDollar = SDLS[SDLpt-2 : SDLpt+1]
//line grammar.y:980
		{
			SDLVAL.caseStmtList = append(SDLDollar[1].caseStmtList, SDLDollar[2].caseStmt)
		}
	case 148:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:984
		{
			SDLVAL.caseStmt = &CaseStmt{NodeInfo: NewNodeInfo(SDLDollar[1].expr.(Node).Pos(), SDLDollar[3].stmt.End()), Condition: SDLDollar[1].expr, Body: SDLDollar[3].stmt}
		}
	case 149:
		SDLDollar = SDLS[SDLpt-0 : SDLpt+1]
//line grammar.y:988
		{
			SDLVAL.stmt = nil
		}
	case 150:
		SDLDollar = SDLS[SDLpt-1 : SDLpt+1]
//line grammar.y:989
		{
			SDLVAL.stmt = SDLDollar[1].stmt
		}
	case 151:
		SDLDollar = SDLS[SDLpt-3 : SDLpt+1]
//line grammar.y:993
		{
			SDLVAL.stmt = SDLDollar[3].stmt
		}
	}
	goto SDLstack /* stack new state and value */
}
