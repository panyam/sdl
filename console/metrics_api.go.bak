package console

// MeasurementResponse represents the JSON response for a measurement
/*
type MeasurementResponse struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Component   string   `json:"component"`
	Methods     []string `json:"methods"`
	ResultValue string   `json:"resultValue"`
	Metric      string   `json:"metric"`
	Aggregation string   `json:"aggregation"`
	Window      string   `json:"window"`

	PointCount int    `json:"pointCount,omitempty"`
	LastUpdate string `json:"lastUpdate,omitempty"`
}

// AggregatedDataResponse represents the aggregated data response
type AggregatedDataResponse struct {
	ID         string  `json:"id"`
	Value      float64 `json:"value"`
	Unit       string  `json:"unit"`
	Window     string  `json:"window"`
	PointCount int     `json:"pointCount"`
	LastUpdate string  `json:"lastUpdate,omitempty"`
}

// GetMeasurementData returns raw data points for a measurement
func (m *MetricsAPI) GetMeasurementData(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]

	// Parse query parameters
	limit := 1000 // Default limit
	if limitStr := r.URL.Query().Get("limit"); limitStr != "" {
		if parsed, err := strconv.Atoi(limitStr); err == nil && parsed > 0 {
			limit = parsed
		}
	}

	currentSystem := m.canvas.CurrentSystem()
	if currentSystem == nil {
		http.Error(w, "No system loaded", http.StatusBadRequest)
		return
	}

	rt := currentSystem.File.Runtime
	if rt == nil || rt.GetMetricStore() == nil {
		http.Error(w, "Metrics not enabled", http.StatusBadRequest)
		return
	}

	store := rt.GetMetricStore()
	points, err := store.GetMeasurementData(id, limit)
	if err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
		return
	}

	// Convert to response format
	dataPoints := make([]MetricDataPoint, len(points))
	for i, p := range points {
		dataPoints[i] = MetricDataPoint{
			Timestamp: float64(p.Timestamp) / 1e9, // Convert to seconds
			Value:     p.Value,
			Component: p.Component,
			Method:    p.Method,
		}
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(dataPoints)
}

// GetAggregatedData returns aggregated data for a measurement
func (m *MetricsAPI) GetAggregatedData(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]

	currentSystem := m.canvas.CurrentSystem()
	if currentSystem == nil {
		http.Error(w, "No system loaded", http.StatusBadRequest)
		return
	}

	rt := currentSystem.File.Runtime
	if rt == nil || rt.GetMetricStore() == nil {
		http.Error(w, "Metrics not enabled", http.StatusBadRequest)
		return
	}

	store := rt.GetMetricStore()

	// Get aggregated value
	agg, err := store.GetAggregatedData(id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Failed to aggregate data: %v", err), http.StatusInternalServerError)
		return
	}

	// Determine unit based on metric type and aggregation
	unit := ""
	if agg.Aggregation == runtime.AggRate {
		unit = "per second"
	} else if strings.Contains(string(agg.Aggregation), "p") || agg.Aggregation == runtime.AggAvg {
		unit = "ms"
	} else {
		unit = "count"
	}

	resp := AggregatedDataResponse{
		ID:         id,
		Value:      agg.Value,
		Unit:       unit,
		Window:     agg.Window.String(),
		PointCount: agg.Count,
		LastUpdate: agg.EndTime.Format(time.RFC3339),
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(resp)
}
*/
