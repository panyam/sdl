{
  "swagger": "2.0",
  "info": {
    "title": "sdl/v1/models.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "CanvasService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/canvases": {
      "get": {
        "summary": "*\nList all canvases from a user.",
        "operationId": "CanvasService_ListCanvases",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCanvasesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageKey",
            "description": "*\nInstead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.pageOffset",
            "description": "*\nIf a pagekey is not supported we can also support a direct integer offset\nfor cases where it makes sense.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.pageSize",
            "description": "*\nNumber of results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      },
      "post": {
        "summary": "*\nCreate a new canvas sesssion.",
        "operationId": "CanvasService_CreateCanvas",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateCanvasResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCanvasRequest"
            }
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/actions:load": {
      "post": {
        "operationId": "CanvasService_LoadFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LoadFileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "sdlFilePath": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/actions:use": {
      "post": {
        "operationId": "CanvasService_UseSystem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UseSystemResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "systemName": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/generators": {
      "get": {
        "operationId": "CanvasService_ListGenerators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListGeneratorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/generators/actions:startall": {
      "put": {
        "summary": "Request to start all generators",
        "operationId": "CanvasService_StartAllGenerators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StartAllGeneratorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/generators/actions:stopall": {
      "put": {
        "summary": "Request to start all generators",
        "operationId": "CanvasService_StopAllGenerators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StopAllGeneratorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/generators/{generatorId}": {
      "get": {
        "operationId": "CanvasService_GetGenerator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGeneratorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "generatorId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      },
      "delete": {
        "operationId": "CanvasService_DeleteGenerator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteGeneratorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "generatorId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/generators/{generatorId}/actions:pause": {
      "post": {
        "operationId": "CanvasService_PauseGenerator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PauseGeneratorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "generatorId",
            "description": "The generator being moved",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/generators/{generatorId}/actions:resume": {
      "post": {
        "operationId": "CanvasService_ResumeGenerator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResumeGeneratorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "generatorId",
            "description": "The generator being moved",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/metrics": {
      "get": {
        "summary": "List all available metrics",
        "operationId": "CanvasService_ListMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMetricsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/metrics/subscribe": {
      "get": {
        "operationId": "CanvasService_LiveMetric",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1LiveMetricsResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1LiveMetricsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/metrics/{metricId}": {
      "delete": {
        "summary": "*\nDelete a particular metriccanvas.  Frees up resources used by it and all the connections",
        "operationId": "CanvasService_DeleteMetric",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteMetricResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metricId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/metrics/{metricId}/aggregate": {
      "get": {
        "summary": "Get aggregated metric data",
        "operationId": "CanvasService_AggregateMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AggregateMetricsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metricId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "function",
            "description": "Aggregation function: \"count\", \"sum\", \"avg\", \"min\", \"max\", \"p50\", \"p90\", \"p95\", \"p99\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "windowSize",
            "description": "Optional: window size for time-based aggregation (in seconds)",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/metrics/{metricId}/query": {
      "get": {
        "summary": "Query raw metric data points",
        "operationId": "CanvasService_QueryMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1QueryMetricsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metricId",
            "description": "Metric identifier (component.method.type)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "description": "Time range for the query\n\nUnix timestamp in seconds",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "endTime",
            "description": "Unix timestamp in seconds",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "limit",
            "description": "Optional: limit number of points returned",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/parameters": {
      "get": {
        "summary": "Get parameter values",
        "operationId": "CanvasService_GetParameters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetParametersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "description": "Optional: if empty, return all parameters",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/parameters/{path}": {
      "put": {
        "summary": "----- Parameter Operations -----\nSet a component parameter value",
        "operationId": "CanvasService_SetParameter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetParameterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "description": "dot-separated path like \"server.cache.HitRate\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newValue": {
                  "type": "string",
                  "title": "SDL expression string (e.g., \"42\", \"true\", \"'hello'\", \"[1,2,3]\", etc.)"
                }
              },
              "title": "Request to set a parameter value"
            }
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{canvasId}/trace/{component}/{method}": {
      "get": {
        "summary": "Execute a single trace for debugging/analysis",
        "operationId": "CanvasService_ExecuteTrace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExecuteTraceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "component",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "method",
            "description": "Optional: arguments for the method call (for future enhancement)\n repeated string args = 4;",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{generator.canvasId}/generators": {
      "post": {
        "summary": "----- Generator Operations -----\nAdds a generator to a canvas's generator_ids list and creates the generator resource.",
        "operationId": "CanvasService_AddGenerator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddGeneratorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "generator.canvasId",
            "description": "Canvas this generator is sending traffic to",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "generator": {
                  "type": "object",
                  "properties": {
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "id": {
                      "type": "string",
                      "title": "ID of the generator"
                    },
                    "name": {
                      "type": "string",
                      "title": "A descriptive label"
                    },
                    "component": {
                      "type": "string",
                      "title": "Name of the target component to generate traffic on. This component should be defined in the System,\neg \"server\""
                    },
                    "method": {
                      "type": "string",
                      "description": "Method in the target component to generate traffic on."
                    },
                    "rate": {
                      "type": "number",
                      "format": "double",
                      "title": "Traffic rate in RPS (\u003e= 1).  Does not support \u003c 1 yet"
                    },
                    "duration": {
                      "type": "number",
                      "format": "double",
                      "title": "Duration in seconds over which the genarator is run. 0 =\u003e For ever"
                    },
                    "enabled": {
                      "type": "boolean",
                      "title": "whether it is enabled or not"
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{generator.canvasId}/generators/{generator.id}": {
      "patch": {
        "summary": "Use PATCH for partial updates to a generator (title, content)",
        "operationId": "CanvasService_UpdateGenerator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateGeneratorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "generator.canvasId",
            "description": "Canvas this generator is sending traffic to",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "generator.id",
            "description": "ID of the generator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "generator": {
                  "type": "object",
                  "properties": {
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "name": {
                      "type": "string",
                      "title": "A descriptive label"
                    },
                    "component": {
                      "type": "string",
                      "title": "Name of the target component to generate traffic on. This component should be defined in the System,\neg \"server\""
                    },
                    "method": {
                      "type": "string",
                      "description": "Method in the target component to generate traffic on."
                    },
                    "rate": {
                      "type": "number",
                      "format": "double",
                      "title": "Traffic rate in RPS (\u003e= 1).  Does not support \u003c 1 yet"
                    },
                    "duration": {
                      "type": "number",
                      "format": "double",
                      "title": "Duration in seconds over which the genarator is run. 0 =\u003e For ever"
                    },
                    "enabled": {
                      "type": "boolean",
                      "title": "whether it is enabled or not"
                    }
                  },
                  "description": "Generator object containing *only* the fields to be updated.\nThe server will use the update_mask to know which fields from\nthis 'generator' message to apply to the stored generator.",
                  "title": "Generator object containing *only* the fields to be updated.\nThe server will use the update_mask to know which fields from\nthis 'generator' message to apply to the stored generator."
                },
                "updateMask": {
                  "type": "string",
                  "title": "e.g., paths: \"title\", paths: \"text_content\""
                }
              },
              "title": "Consolidate generator updates into one RPC using PATCH and FieldMask"
            }
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{id}": {
      "get": {
        "summary": "*\nGet details/stats for a particular canvas",
        "operationId": "CanvasService_GetCanvas",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCanvasResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "*\nID of the canvas to be fetched",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      },
      "delete": {
        "summary": "*\nDelete a particular canvas.  Frees up resources used by it and all the connections",
        "operationId": "CanvasService_DeleteCanvas",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteCanvasResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "*\nID of the canvas to be deleted.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    },
    "/v1/canvases/{metric.canvasId}/metrics": {
      "post": {
        "summary": "----- Generator Operations -----\nAdds a metric to live plot",
        "operationId": "CanvasService_AddMetric",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddMetricResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "metric.canvasId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "metric": {
                  "type": "object",
                  "properties": {
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string",
                      "title": "A descriptive label"
                    },
                    "component": {
                      "type": "string",
                      "title": "Name of the target component to monitor\neg \"server\""
                    },
                    "methods": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Method in the target component to generate traffic on."
                    },
                    "enabled": {
                      "type": "boolean",
                      "title": "whether it is enabled or not"
                    },
                    "metricType": {
                      "type": "string",
                      "title": "Type of metric \"count\" or \"latency\""
                    },
                    "aggregation": {
                      "type": "string",
                      "title": "Type of aggregation on the metric"
                    },
                    "aggregationWindow": {
                      "type": "number",
                      "format": "double",
                      "title": "Aggregation window (in seconds) to match on"
                    },
                    "matchResult": {
                      "type": "string",
                      "title": "Result value to match"
                    },
                    "matchResultType": {
                      "type": "string",
                      "title": "The result \"type\" if a matching result is provided\nThis will be parsed into a type declaration so we know how to treat\nthe match_result value provided"
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "CanvasService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AddGeneratorResponse": {
      "type": "object",
      "properties": {
        "generator": {
          "$ref": "#/definitions/v1Generator"
        }
      }
    },
    "v1AddMetricResponse": {
      "type": "object",
      "properties": {
        "metric": {
          "$ref": "#/definitions/v1Metric"
        }
      }
    },
    "v1AggregateMetricsResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AggregateResult"
          },
          "title": "Single value if no windowing, multiple if windowed"
        }
      }
    },
    "v1AggregateResult": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "number",
          "format": "double",
          "title": "Start of window (if windowed)"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "v1Canvas": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "title": "Unique ID for the canvas"
        },
        "activeSystem": {
          "type": "string",
          "title": "Active system being observed"
        },
        "loadedFiles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Files that have been loaded so far"
        },
        "generators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Generator"
          },
          "title": "Registered generators for this canvas"
        },
        "metrics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Metric"
          },
          "title": "Registered live metrics for this canvas"
        }
      }
    },
    "v1CreateCanvasRequest": {
      "type": "object",
      "properties": {
        "canvas": {
          "$ref": "#/definitions/v1Canvas",
          "title": "*\nCanvas being updated"
        }
      },
      "title": "*\nCanvas creation request object"
    },
    "v1CreateCanvasResponse": {
      "type": "object",
      "properties": {
        "canvas": {
          "$ref": "#/definitions/v1Canvas",
          "title": "*\nCanvas being created"
        },
        "fieldErrors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "*\nError specific to a field if there are any errors."
        }
      },
      "description": "*\nResponse of an canvas creation."
    },
    "v1DeleteCanvasResponse": {
      "type": "object",
      "title": "*\nCanvas deletion response"
    },
    "v1DeleteGeneratorResponse": {
      "type": "object"
    },
    "v1DeleteMetricResponse": {
      "type": "object"
    },
    "v1ExecuteTraceResponse": {
      "type": "object",
      "properties": {
        "traceData": {
          "$ref": "#/definitions/v1TraceData",
          "title": "The complete trace data"
        }
      }
    },
    "v1Generator": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "title": "ID of the generator"
        },
        "canvasId": {
          "type": "string",
          "title": "Canvas this generator is sending traffic to"
        },
        "name": {
          "type": "string",
          "title": "A descriptive label"
        },
        "component": {
          "type": "string",
          "title": "Name of the target component to generate traffic on. This component should be defined in the System,\neg \"server\""
        },
        "method": {
          "type": "string",
          "description": "Method in the target component to generate traffic on."
        },
        "rate": {
          "type": "number",
          "format": "double",
          "title": "Traffic rate in RPS (\u003e= 1).  Does not support \u003c 1 yet"
        },
        "duration": {
          "type": "number",
          "format": "double",
          "title": "Duration in seconds over which the genarator is run. 0 =\u003e For ever"
        },
        "enabled": {
          "type": "boolean",
          "title": "whether it is enabled or not"
        }
      }
    },
    "v1GetCanvasResponse": {
      "type": "object",
      "properties": {
        "canvas": {
          "$ref": "#/definitions/v1Canvas"
        }
      },
      "title": "*\nCanvas get response"
    },
    "v1GetGeneratorResponse": {
      "type": "object",
      "properties": {
        "generator": {
          "$ref": "#/definitions/v1Generator"
        }
      }
    },
    "v1GetParametersResponse": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Values as SDL expression strings"
        }
      },
      "title": "Response containing parameter values"
    },
    "v1ListCanvasesResponse": {
      "type": "object",
      "properties": {
        "canvases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Canvas"
          },
          "description": "*\nThe list of canvases found as part of this response."
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      },
      "description": "*\nResponse of a canvas search/listing."
    },
    "v1ListGeneratorsResponse": {
      "type": "object",
      "properties": {
        "generators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Generator"
          }
        }
      }
    },
    "v1ListMetricsResponse": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetricInfo"
          }
        }
      }
    },
    "v1LiveMetricsResponse": {
      "type": "object"
    },
    "v1LoadFileResponse": {
      "type": "object"
    },
    "v1Metric": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "canvasId": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "A descriptive label"
        },
        "component": {
          "type": "string",
          "title": "Name of the target component to monitor\neg \"server\""
        },
        "methods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Method in the target component to generate traffic on."
        },
        "enabled": {
          "type": "boolean",
          "title": "whether it is enabled or not"
        },
        "metricType": {
          "type": "string",
          "title": "Type of metric \"count\" or \"latency\""
        },
        "aggregation": {
          "type": "string",
          "title": "Type of aggregation on the metric"
        },
        "aggregationWindow": {
          "type": "number",
          "format": "double",
          "title": "Aggregation window (in seconds) to match on"
        },
        "matchResult": {
          "type": "string",
          "title": "Result value to match"
        },
        "matchResultType": {
          "type": "string",
          "title": "The result \"type\" if a matching result is provided\nThis will be parsed into a type declaration so we know how to treat\nthe match_result value provided"
        }
      }
    },
    "v1MetricInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "component.method.type"
        },
        "component": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "metricType": {
          "type": "string"
        },
        "dataPoints": {
          "type": "string",
          "format": "int64",
          "title": "Number of data points stored"
        },
        "oldestTimestamp": {
          "type": "number",
          "format": "double"
        },
        "newestTimestamp": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "v1MetricPoint": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "number",
          "format": "double",
          "title": "Unix timestamp in seconds"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "pageKey": {
          "type": "string",
          "description": "*\nInstead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set."
        },
        "pageOffset": {
          "type": "integer",
          "format": "int32",
          "description": "*\nIf a pagekey is not supported we can also support a direct integer offset\nfor cases where it makes sense."
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "*\nNumber of results to return."
        }
      }
    },
    "v1PaginationResponse": {
      "type": "object",
      "properties": {
        "nextPageKey": {
          "type": "string",
          "description": "*\nThe key/pointer string that subsequent List requests should pass to\ncontinue the pagination."
        },
        "nextPageOffset": {
          "type": "integer",
          "format": "int32",
          "title": "*\nAlso support an integer offset if possible"
        },
        "hasMore": {
          "type": "boolean",
          "description": "*\nWhether theere are more results."
        },
        "totalResults": {
          "type": "integer",
          "format": "int32",
          "description": "*\nTotal number of results."
        }
      }
    },
    "v1PauseGeneratorResponse": {
      "type": "object"
    },
    "v1QueryMetricsResponse": {
      "type": "object",
      "properties": {
        "points": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MetricPoint"
          }
        }
      }
    },
    "v1ResumeGeneratorResponse": {
      "type": "object"
    },
    "v1SetParameterResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string",
          "title": "Set if success is false"
        },
        "newValue": {
          "type": "string",
          "title": "SDL expression string (e.g., \"42\", \"true\", \"'hello'\", \"[1,2,3]\", etc.)"
        },
        "oldValue": {
          "type": "string"
        }
      },
      "title": "Response from setting a parameter"
    },
    "v1StartAllGeneratorsResponse": {
      "type": "object",
      "properties": {
        "totalGenerators": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of generators"
        },
        "startedCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number successfully started"
        },
        "alreadyRunningCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number already running"
        },
        "failedCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number that failed to start"
        },
        "failedIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "IDs of generators that failed"
        }
      }
    },
    "v1StopAllGeneratorsResponse": {
      "type": "object",
      "properties": {
        "totalGenerators": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of generators"
        },
        "stoppedCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number successfully stopped"
        },
        "alreadyStoppedCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number already stopped"
        },
        "failedCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number that failed to stop"
        },
        "failedIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "IDs of generators that failed"
        }
      }
    },
    "v1TraceData": {
      "type": "object",
      "properties": {
        "system": {
          "type": "string"
        },
        "entryPoint": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TraceEvent"
          }
        }
      },
      "title": "TraceData matches the runtime.TraceData structure"
    },
    "v1TraceEvent": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "title": "\"enter\", \"exit\", \"go\", \"wait\""
        },
        "id": {
          "type": "string",
          "format": "int64"
        },
        "parentId": {
          "type": "string",
          "format": "int64"
        },
        "timestamp": {
          "type": "number",
          "format": "double",
          "title": "Virtual time in seconds"
        },
        "duration": {
          "type": "number",
          "format": "double",
          "title": "Duration in seconds (for exit events)"
        },
        "component": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "returnValue": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "title": "TraceEvent matches the runtime.TraceEvent structure"
    },
    "v1UpdateGeneratorResponse": {
      "type": "object",
      "properties": {
        "generator": {
          "$ref": "#/definitions/v1Generator"
        }
      }
    },
    "v1UseSystemResponse": {
      "type": "object"
    }
  }
}
