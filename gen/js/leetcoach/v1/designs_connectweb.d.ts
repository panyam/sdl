// protos/leetcoach/v1/designs.proto

// @generated by protoc-gen-connect-web v0.8.6
// @generated from file leetcoach/v1/designs.proto (package leetcoach.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AddSectionRequest, CreateDesignRequest, CreateDesignResponse, DeleteDesignRequest, DeleteDesignResponse, DeleteSectionRequest, DeleteSectionResponse, GetDesignRequest, GetDesignResponse, GetDesignsRequest, GetDesignsResponse, GetSectionRequest, ListDesignsRequest, ListDesignsResponse, MoveSectionRequest, MoveSectionResponse, UpdateDesignRequest, UpdateDesignResponse, UpdateSectionRequest } from "./designs_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { Section } from "./models_pb.js";

/**
 * *
 * Service for operating on design documents
 *
 * @generated from service leetcoach.v1.DesignService
 */
export declare const DesignService: {
  readonly typeName: "leetcoach.v1.DesignService",
  readonly methods: {
    /**
     * *
     * Create a new sesssion
     *
     * @generated from rpc leetcoach.v1.DesignService.CreateDesign
     */
    readonly createDesign: {
      readonly name: "CreateDesign",
      readonly I: typeof CreateDesignRequest,
      readonly O: typeof CreateDesignResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * *
     * List all designs from a user.
     *
     * @generated from rpc leetcoach.v1.DesignService.ListDesigns
     */
    readonly listDesigns: {
      readonly name: "ListDesigns",
      readonly I: typeof ListDesignsRequest,
      readonly O: typeof ListDesignsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * *
     * Get a particular design
     *
     * @generated from rpc leetcoach.v1.DesignService.GetDesign
     */
    readonly getDesign: {
      readonly name: "GetDesign",
      readonly I: typeof GetDesignRequest,
      readonly O: typeof GetDesignResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * *
     * Batch get multiple designs by ID
     *
     * @generated from rpc leetcoach.v1.DesignService.GetDesigns
     */
    readonly getDesigns: {
      readonly name: "GetDesigns",
      readonly I: typeof GetDesignsRequest,
      readonly O: typeof GetDesignsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * *
     * Delete a particular design
     *
     * @generated from rpc leetcoach.v1.DesignService.DeleteDesign
     */
    readonly deleteDesign: {
      readonly name: "DeleteDesign",
      readonly I: typeof DeleteDesignRequest,
      readonly O: typeof DeleteDesignResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * *
     * Updates specific fields of a design
     *
     * @generated from rpc leetcoach.v1.DesignService.UpdateDesign
     */
    readonly updateDesign: {
      readonly name: "UpdateDesign",
      readonly I: typeof UpdateDesignRequest,
      readonly O: typeof UpdateDesignResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a section to a design's section_ids list and creates the section resource.
     *
     * @generated from rpc leetcoach.v1.DesignService.AddSection
     */
    readonly addSection: {
      readonly name: "AddSection",
      readonly I: typeof AddSectionRequest,
      readonly O: typeof Section,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc leetcoach.v1.DesignService.GetSection
     */
    readonly getSection: {
      readonly name: "GetSection",
      readonly I: typeof GetSectionRequest,
      readonly O: typeof Section,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Use PATCH for partial updates to a section (title, content)
     *
     * @generated from rpc leetcoach.v1.DesignService.UpdateSection
     */
    readonly updateSection: {
      readonly name: "UpdateSection",
      readonly I: typeof UpdateSectionRequest,
      readonly O: typeof Section,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Moves a section within the Design's section_ids list
     * We could have done this via an UpdateDesign with the changed order but this is 
     * clearer and only needs to deal with the current (and target) section instead of
     * needing to know all sections for an update.
     *
     * @generated from rpc leetcoach.v1.DesignService.MoveSection
     */
    readonly moveSection: {
      readonly name: "MoveSection",
      readonly I: typeof MoveSectionRequest,
      readonly O: typeof MoveSectionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc leetcoach.v1.DesignService.DeleteSection
     */
    readonly deleteSection: {
      readonly name: "DeleteSection",
      readonly I: typeof DeleteSectionRequest,
      readonly O: typeof DeleteSectionResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

