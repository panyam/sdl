// @generated by protoc-gen-es v2.2.5
// @generated from file leetcoach/v1/tags.proto (package leetcoach.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Tag } from "./models_pb";
import type { FieldMask } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file leetcoach/v1/tags.proto.
 */
export declare const file_leetcoach_v1_tags: GenFile;

/**
 * *
 * Tag creation request object
 *
 * @generated from message leetcoach.v1.CreateTagRequest
 */
export declare type CreateTagRequest = Message<"leetcoach.v1.CreateTagRequest"> & {
  /**
   * *
   * Tag being updated
   *
   * @generated from field: leetcoach.v1.Tag tag = 1;
   */
  tag?: Tag;
};

/**
 * Describes the message leetcoach.v1.CreateTagRequest.
 * Use `create(CreateTagRequestSchema)` to create a new message.
 */
export declare const CreateTagRequestSchema: GenMessage<CreateTagRequest>;

/**
 * *
 * Response of an tag creation.
 *
 * @generated from message leetcoach.v1.CreateTagResponse
 */
export declare type CreateTagResponse = Message<"leetcoach.v1.CreateTagResponse"> & {
  /**
   * *
   * Tag being created
   *
   * @generated from field: leetcoach.v1.Tag tag = 1;
   */
  tag?: Tag;

  /**
   * *
   * Error specific to a field if there are any errors.
   *
   * @generated from field: map<string, string> field_errors = 2;
   */
  fieldErrors: { [key: string]: string };
};

/**
 * Describes the message leetcoach.v1.CreateTagResponse.
 * Use `create(CreateTagResponseSchema)` to create a new message.
 */
export declare const CreateTagResponseSchema: GenMessage<CreateTagResponse>;

/**
 * *
 * An tag search request.  For now only paginations params are provided.
 *
 * @generated from message leetcoach.v1.ListTagsRequest
 */
export declare type ListTagsRequest = Message<"leetcoach.v1.ListTagsRequest"> & {
  /**
   * *
   * Instead of an offset an abstract  "page" key is provided that offers
   * an opaque "pointer" into some offset in a result set.
   *
   * @generated from field: string page_key = 1;
   */
  pageKey: string;

  /**
   * *
   * Number of results to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * *
   * Limit to tags of a particular user
   *
   * @generated from field: string user_id = 3;
   */
  userId: string;

  /**
   * *
   * search by tag prefix.
   *
   * @generated from field: string prefix = 4;
   */
  prefix: string;

  /**
   * *
   * "recent" or "name" or num_designs
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message leetcoach.v1.ListTagsRequest.
 * Use `create(ListTagsRequestSchema)` to create a new message.
 */
export declare const ListTagsRequestSchema: GenMessage<ListTagsRequest>;

/**
 * *
 * Response of a tag search/listing.
 *
 * @generated from message leetcoach.v1.ListTagsResponse
 */
export declare type ListTagsResponse = Message<"leetcoach.v1.ListTagsResponse"> & {
  /**
   * *
   * The list of tags found as part of this response.
   *
   * @generated from field: repeated leetcoach.v1.Tag tags = 1;
   */
  tags: Tag[];

  /**
   * *
   * The key/pointer string that subsequent List requests should pass to
   * continue the pagination.
   *
   * @generated from field: string next_page_key = 2;
   */
  nextPageKey: string;
};

/**
 * Describes the message leetcoach.v1.ListTagsResponse.
 * Use `create(ListTagsResponseSchema)` to create a new message.
 */
export declare const ListTagsResponseSchema: GenMessage<ListTagsResponse>;

/**
 * *
 * Request to get an tag.
 *
 * @generated from message leetcoach.v1.GetTagRequest
 */
export declare type GetTagRequest = Message<"leetcoach.v1.GetTagRequest"> & {
  /**
   * *
   * ID of the tag to be fetched
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * *
   * Returns if contents are also to be returned.
   *
   * @generated from field: bool with_contents = 2;
   */
  withContents: boolean;
};

/**
 * Describes the message leetcoach.v1.GetTagRequest.
 * Use `create(GetTagRequestSchema)` to create a new message.
 */
export declare const GetTagRequestSchema: GenMessage<GetTagRequest>;

/**
 * *
 * Tag get response
 *
 * @generated from message leetcoach.v1.GetTagResponse
 */
export declare type GetTagResponse = Message<"leetcoach.v1.GetTagResponse"> & {
  /**
   * @generated from field: leetcoach.v1.Tag tag = 1;
   */
  tag?: Tag;
};

/**
 * Describes the message leetcoach.v1.GetTagResponse.
 * Use `create(GetTagResponseSchema)` to create a new message.
 */
export declare const GetTagResponseSchema: GenMessage<GetTagResponse>;

/**
 * *
 * Request to batch get tags
 *
 * @generated from message leetcoach.v1.GetTagsRequest
 */
export declare type GetTagsRequest = Message<"leetcoach.v1.GetTagsRequest"> & {
  /**
   * *
   * IDs of the tag to be fetched
   *
   * @generated from field: repeated string ids = 1;
   */
  ids: string[];
};

/**
 * Describes the message leetcoach.v1.GetTagsRequest.
 * Use `create(GetTagsRequestSchema)` to create a new message.
 */
export declare const GetTagsRequestSchema: GenMessage<GetTagsRequest>;

/**
 * *
 * Tag batch-get response
 *
 * @generated from message leetcoach.v1.GetTagsResponse
 */
export declare type GetTagsResponse = Message<"leetcoach.v1.GetTagsResponse"> & {
  /**
   * @generated from field: map<string, leetcoach.v1.Tag> tags = 1;
   */
  tags: { [key: string]: Tag };
};

/**
 * Describes the message leetcoach.v1.GetTagsResponse.
 * Use `create(GetTagsResponseSchema)` to create a new message.
 */
export declare const GetTagsResponseSchema: GenMessage<GetTagsResponse>;

/**
 * *
 * Request to delete an tag.
 *
 * @generated from message leetcoach.v1.DeleteTagRequest
 */
export declare type DeleteTagRequest = Message<"leetcoach.v1.DeleteTagRequest"> & {
  /**
   * *
   * ID of the tag to be deleted.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message leetcoach.v1.DeleteTagRequest.
 * Use `create(DeleteTagRequestSchema)` to create a new message.
 */
export declare const DeleteTagRequestSchema: GenMessage<DeleteTagRequest>;

/**
 * *
 * Tag deletion response
 *
 * @generated from message leetcoach.v1.DeleteTagResponse
 */
export declare type DeleteTagResponse = Message<"leetcoach.v1.DeleteTagResponse"> & {
};

/**
 * Describes the message leetcoach.v1.DeleteTagResponse.
 * Use `create(DeleteTagResponseSchema)` to create a new message.
 */
export declare const DeleteTagResponseSchema: GenMessage<DeleteTagResponse>;

/**
 * *
 * The request for (partially) updating an Tag.
 *
 * @generated from message leetcoach.v1.UpdateTagRequest
 */
export declare type UpdateTagRequest = Message<"leetcoach.v1.UpdateTagRequest"> & {
  /**
   * *
   * Tag being updated
   *
   * @generated from field: leetcoach.v1.Tag tag = 1;
   */
  tag?: Tag;

  /**
   * *
   * Mask of fields being updated in this Tag to make partial changes.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message leetcoach.v1.UpdateTagRequest.
 * Use `create(UpdateTagRequestSchema)` to create a new message.
 */
export declare const UpdateTagRequestSchema: GenMessage<UpdateTagRequest>;

/**
 * *
 * The request for (partially) updating an Tag.
 *
 * @generated from message leetcoach.v1.UpdateTagResponse
 */
export declare type UpdateTagResponse = Message<"leetcoach.v1.UpdateTagResponse"> & {
  /**
   * *
   * Tag being updated
   *
   * @generated from field: leetcoach.v1.Tag tag = 1;
   */
  tag?: Tag;
};

/**
 * Describes the message leetcoach.v1.UpdateTagResponse.
 * Use `create(UpdateTagResponseSchema)` to create a new message.
 */
export declare const UpdateTagResponseSchema: GenMessage<UpdateTagResponse>;

/**
 * *
 * Service for tags
 *
 * @generated from service leetcoach.v1.TagService
 */
export declare const TagService: GenService<{
  /**
   * *
   * Create a new tag.  If a tag by name already exists then it is returned.
   *
   * @generated from rpc leetcoach.v1.TagService.CreateTag
   */
  createTag: {
    methodKind: "unary";
    input: typeof CreateTagRequestSchema;
    output: typeof CreateTagResponseSchema;
  },
  /**
   * *
   * List all tags
   *
   * @generated from rpc leetcoach.v1.TagService.ListTags
   */
  listTags: {
    methodKind: "unary";
    input: typeof ListTagsRequestSchema;
    output: typeof ListTagsResponseSchema;
  },
  /**
   * *
   * Get a particular tag
   *
   * @generated from rpc leetcoach.v1.TagService.GetTag
   */
  getTag: {
    methodKind: "unary";
    input: typeof GetTagRequestSchema;
    output: typeof GetTagResponseSchema;
  },
  /**
   * *
   * Batch get multiple tags by ID
   *
   * @generated from rpc leetcoach.v1.TagService.GetTags
   */
  getTags: {
    methodKind: "unary";
    input: typeof GetTagsRequestSchema;
    output: typeof GetTagsResponseSchema;
  },
  /**
   * *
   * Delete a particular tag
   *
   * @generated from rpc leetcoach.v1.TagService.DeleteTag
   */
  deleteTag: {
    methodKind: "unary";
    input: typeof DeleteTagRequestSchema;
    output: typeof DeleteTagResponseSchema;
  },
  /**
   * *
   * Updates specific fields of a tag
   *
   * @generated from rpc leetcoach.v1.TagService.UpdateTag
   */
  updateTag: {
    methodKind: "unary";
    input: typeof UpdateTagRequestSchema;
    output: typeof UpdateTagResponseSchema;
  },
}>;

