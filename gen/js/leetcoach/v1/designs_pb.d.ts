// protos/leetcoach/v1/designs.proto

// @generated by protoc-gen-es v2.2.5
// @generated from file leetcoach/v1/designs.proto (package leetcoach.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Design, Pagination, PaginationResponse, Section, SectionSchema } from "./models_pb";
import type { FieldMask } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file leetcoach/v1/designs.proto.
 */
export declare const file_leetcoach_v1_designs: GenFile;

/**
 * *
 * Design creation request object
 *
 * @generated from message leetcoach.v1.CreateDesignRequest
 */
export declare type CreateDesignRequest = Message<"leetcoach.v1.CreateDesignRequest"> & {
  /**
   * *
   * Design being updated
   *
   * @generated from field: leetcoach.v1.Design design = 1;
   */
  design?: Design;
};

/**
 * Describes the message leetcoach.v1.CreateDesignRequest.
 * Use `create(CreateDesignRequestSchema)` to create a new message.
 */
export declare const CreateDesignRequestSchema: GenMessage<CreateDesignRequest>;

/**
 * *
 * Response of an design creation.
 *
 * @generated from message leetcoach.v1.CreateDesignResponse
 */
export declare type CreateDesignResponse = Message<"leetcoach.v1.CreateDesignResponse"> & {
  /**
   * *
   * Design being created
   *
   * @generated from field: leetcoach.v1.Design design = 1;
   */
  design?: Design;

  /**
   * *
   * Error specific to a field if there are any errors.
   *
   * @generated from field: map<string, string> field_errors = 2;
   */
  fieldErrors: { [key: string]: string };
};

/**
 * Describes the message leetcoach.v1.CreateDesignResponse.
 * Use `create(CreateDesignResponseSchema)` to create a new message.
 */
export declare const CreateDesignResponseSchema: GenMessage<CreateDesignResponse>;

/**
 * *
 * An design search request.  For now only paginations params are provided.
 *
 * @generated from message leetcoach.v1.ListDesignsRequest
 */
export declare type ListDesignsRequest = Message<"leetcoach.v1.ListDesignsRequest"> & {
  /**
   * Pagination info
   *
   * @generated from field: leetcoach.v1.Pagination pagination = 1;
   */
  pagination?: Pagination;

  /**
   * *
   * Limit to designs of a particular user
   *
   * @generated from field: string owner_id = 3;
   */
  ownerId: string;

  /**
   * *
   * Whether to only get public ones.
   *
   * @generated from field: bool limit_to_public = 5;
   */
  limitToPublic: boolean;

  /**
   * *
   * "recent" or "name"
   *
   * @generated from field: string order_by = 6;
   */
  orderBy: string;
};

/**
 * Describes the message leetcoach.v1.ListDesignsRequest.
 * Use `create(ListDesignsRequestSchema)` to create a new message.
 */
export declare const ListDesignsRequestSchema: GenMessage<ListDesignsRequest>;

/**
 * *
 * Response of a design search/listing.
 *
 * @generated from message leetcoach.v1.ListDesignsResponse
 */
export declare type ListDesignsResponse = Message<"leetcoach.v1.ListDesignsResponse"> & {
  /**
   * *
   * The list of designs found as part of this response.
   *
   * @generated from field: repeated leetcoach.v1.Design designs = 1;
   */
  designs: Design[];

  /**
   * @generated from field: leetcoach.v1.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;
};

/**
 * Describes the message leetcoach.v1.ListDesignsResponse.
 * Use `create(ListDesignsResponseSchema)` to create a new message.
 */
export declare const ListDesignsResponseSchema: GenMessage<ListDesignsResponse>;

/**
 * *
 * Request to get an design.
 *
 * @generated from message leetcoach.v1.GetDesignRequest
 */
export declare type GetDesignRequest = Message<"leetcoach.v1.GetDesignRequest"> & {
  /**
   * *
   * ID of the design to be fetched
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * New flag to request metadata inclusion.  Note section content is NOT returned here but instead with GetSection
   *
   * @generated from field: bool include_section_metadata = 2;
   */
  includeSectionMetadata: boolean;
};

/**
 * Describes the message leetcoach.v1.GetDesignRequest.
 * Use `create(GetDesignRequestSchema)` to create a new message.
 */
export declare const GetDesignRequestSchema: GenMessage<GetDesignRequest>;

/**
 * *
 * Design get response
 *
 * @generated from message leetcoach.v1.GetDesignResponse
 */
export declare type GetDesignResponse = Message<"leetcoach.v1.GetDesignResponse"> & {
  /**
   * @generated from field: leetcoach.v1.Design design = 1;
   */
  design?: Design;

  /**
   * Optionally populated by server if include_section_metadata was true.
   * Sections in this list will *not* have their 'content' oneof populated.
   * The order should match design.section_ids.
   *
   * @generated from field: repeated leetcoach.v1.Section sections_metadata = 2;
   */
  sectionsMetadata: Section[];
};

/**
 * Describes the message leetcoach.v1.GetDesignResponse.
 * Use `create(GetDesignResponseSchema)` to create a new message.
 */
export declare const GetDesignResponseSchema: GenMessage<GetDesignResponse>;

/**
 * *
 * Request to batch get designs
 *
 * @generated from message leetcoach.v1.GetDesignsRequest
 */
export declare type GetDesignsRequest = Message<"leetcoach.v1.GetDesignsRequest"> & {
  /**
   * *
   * IDs of the design to be fetched
   *
   * @generated from field: repeated string ids = 1;
   */
  ids: string[];
};

/**
 * Describes the message leetcoach.v1.GetDesignsRequest.
 * Use `create(GetDesignsRequestSchema)` to create a new message.
 */
export declare const GetDesignsRequestSchema: GenMessage<GetDesignsRequest>;

/**
 * *
 * Design batch-get response
 *
 * @generated from message leetcoach.v1.GetDesignsResponse
 */
export declare type GetDesignsResponse = Message<"leetcoach.v1.GetDesignsResponse"> & {
  /**
   * @generated from field: map<string, leetcoach.v1.Design> designs = 1;
   */
  designs: { [key: string]: Design };
};

/**
 * Describes the message leetcoach.v1.GetDesignsResponse.
 * Use `create(GetDesignsResponseSchema)` to create a new message.
 */
export declare const GetDesignsResponseSchema: GenMessage<GetDesignsResponse>;

/**
 * *
 * Request to delete an design.
 *
 * @generated from message leetcoach.v1.DeleteDesignRequest
 */
export declare type DeleteDesignRequest = Message<"leetcoach.v1.DeleteDesignRequest"> & {
  /**
   * *
   * ID of the design to be deleted.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message leetcoach.v1.DeleteDesignRequest.
 * Use `create(DeleteDesignRequestSchema)` to create a new message.
 */
export declare const DeleteDesignRequestSchema: GenMessage<DeleteDesignRequest>;

/**
 * *
 * Design deletion response
 *
 * @generated from message leetcoach.v1.DeleteDesignResponse
 */
export declare type DeleteDesignResponse = Message<"leetcoach.v1.DeleteDesignResponse"> & {
};

/**
 * Describes the message leetcoach.v1.DeleteDesignResponse.
 * Use `create(DeleteDesignResponseSchema)` to create a new message.
 */
export declare const DeleteDesignResponseSchema: GenMessage<DeleteDesignResponse>;

/**
 * *
 * The request for (partially) updating an Design.  Note this only updates design level metadata.
 * Specific changes to section contetn will not happen here.
 *
 * @generated from message leetcoach.v1.UpdateDesignRequest
 */
export declare type UpdateDesignRequest = Message<"leetcoach.v1.UpdateDesignRequest"> & {
  /**
   * *
   * Design being updated
   *
   * @generated from field: leetcoach.v1.Design design = 1;
   */
  design?: Design;

  /**
   * *
   * Mask of fields being updated in this Design to make partial changes.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message leetcoach.v1.UpdateDesignRequest.
 * Use `create(UpdateDesignRequestSchema)` to create a new message.
 */
export declare const UpdateDesignRequestSchema: GenMessage<UpdateDesignRequest>;

/**
 * *
 * The request for (partially) updating an Design.
 *
 * @generated from message leetcoach.v1.UpdateDesignResponse
 */
export declare type UpdateDesignResponse = Message<"leetcoach.v1.UpdateDesignResponse"> & {
  /**
   * *
   * Design being updated
   *
   * @generated from field: leetcoach.v1.Design design = 1;
   */
  design?: Design;
};

/**
 * Describes the message leetcoach.v1.UpdateDesignResponse.
 * Use `create(UpdateDesignResponseSchema)` to create a new message.
 */
export declare const UpdateDesignResponseSchema: GenMessage<UpdateDesignResponse>;

/**
 * @generated from message leetcoach.v1.AddSectionRequest
 */
export declare type AddSectionRequest = Message<"leetcoach.v1.AddSectionRequest"> & {
  /**
   * @generated from field: leetcoach.v1.Section section = 1;
   */
  section?: Section;

  /**
   * @generated from field: string relative_section_id = 2;
   */
  relativeSectionId: string;

  /**
   * @generated from field: leetcoach.v1.PositionType position = 3;
   */
  position: PositionType;
};

/**
 * Describes the message leetcoach.v1.AddSectionRequest.
 * Use `create(AddSectionRequestSchema)` to create a new message.
 */
export declare const AddSectionRequestSchema: GenMessage<AddSectionRequest>;

/**
 * @generated from message leetcoach.v1.GetSectionRequest
 */
export declare type GetSectionRequest = Message<"leetcoach.v1.GetSectionRequest"> & {
  /**
   * @generated from field: string design_id = 1;
   */
  designId: string;

  /**
   * @generated from field: string section_id = 2;
   */
  sectionId: string;
};

/**
 * Describes the message leetcoach.v1.GetSectionRequest.
 * Use `create(GetSectionRequestSchema)` to create a new message.
 */
export declare const GetSectionRequestSchema: GenMessage<GetSectionRequest>;

/**
 * Consolidate section updates into one RPC using PATCH and FieldMask
 *
 * @generated from message leetcoach.v1.UpdateSectionRequest
 */
export declare type UpdateSectionRequest = Message<"leetcoach.v1.UpdateSectionRequest"> & {
  /**
   * Section object containing *only* the fields to be updated.
   * The server will use the update_mask to know which fields from
   * this 'section' message to apply to the stored section.
   *
   * @generated from field: leetcoach.v1.Section section = 1;
   */
  section?: Section;

  /**
   * e.g., paths: "title", paths: "text_content"
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message leetcoach.v1.UpdateSectionRequest.
 * Use `create(UpdateSectionRequestSchema)` to create a new message.
 */
export declare const UpdateSectionRequestSchema: GenMessage<UpdateSectionRequest>;

/**
 * @generated from message leetcoach.v1.MoveSectionRequest
 */
export declare type MoveSectionRequest = Message<"leetcoach.v1.MoveSectionRequest"> & {
  /**
   * @generated from field: string design_id = 1;
   */
  designId: string;

  /**
   * The section being moved
   *
   * @generated from field: string section_id = 2;
   */
  sectionId: string;

  /**
   * @generated from field: string relative_section_id = 3;
   */
  relativeSectionId: string;

  /**
   * @generated from field: leetcoach.v1.PositionType position = 4;
   */
  position: PositionType;
};

/**
 * Describes the message leetcoach.v1.MoveSectionRequest.
 * Use `create(MoveSectionRequestSchema)` to create a new message.
 */
export declare const MoveSectionRequestSchema: GenMessage<MoveSectionRequest>;

/**
 * @generated from message leetcoach.v1.MoveSectionResponse
 */
export declare type MoveSectionResponse = Message<"leetcoach.v1.MoveSectionResponse"> & {
};

/**
 * Describes the message leetcoach.v1.MoveSectionResponse.
 * Use `create(MoveSectionResponseSchema)` to create a new message.
 */
export declare const MoveSectionResponseSchema: GenMessage<MoveSectionResponse>;

/**
 * @generated from message leetcoach.v1.DeleteSectionRequest
 */
export declare type DeleteSectionRequest = Message<"leetcoach.v1.DeleteSectionRequest"> & {
  /**
   * @generated from field: string design_id = 1;
   */
  designId: string;

  /**
   * @generated from field: string section_id = 2;
   */
  sectionId: string;
};

/**
 * Describes the message leetcoach.v1.DeleteSectionRequest.
 * Use `create(DeleteSectionRequestSchema)` to create a new message.
 */
export declare const DeleteSectionRequestSchema: GenMessage<DeleteSectionRequest>;

/**
 * @generated from message leetcoach.v1.DeleteSectionResponse
 */
export declare type DeleteSectionResponse = Message<"leetcoach.v1.DeleteSectionResponse"> & {
};

/**
 * Describes the message leetcoach.v1.DeleteSectionResponse.
 * Use `create(DeleteSectionResponseSchema)` to create a new message.
 */
export declare const DeleteSectionResponseSchema: GenMessage<DeleteSectionResponse>;

/**
 * Used for positioning new/moved sections
 *
 * @generated from enum leetcoach.v1.PositionType
 */
export enum PositionType {
  /**
   * @generated from enum value: POSITION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Insert before the relative_section_id
   *
   * @generated from enum value: POSITION_TYPE_BEFORE = 1;
   */
  BEFORE = 1,

  /**
   * Insert after the relative_section_id
   *
   * @generated from enum value: POSITION_TYPE_AFTER = 2;
   */
  AFTER = 2,

  /**
   * Append to the end of the design
   *
   * @generated from enum value: POSITION_TYPE_END = 3;
   */
  END = 3,
}

/**
 * Describes the enum leetcoach.v1.PositionType.
 */
export declare const PositionTypeSchema: GenEnum<PositionType>;

/**
 * *
 * Service for operating on design documents
 *
 * @generated from service leetcoach.v1.DesignService
 */
export declare const DesignService: GenService<{
  /**
   * *
   * Create a new sesssion
   *
   * @generated from rpc leetcoach.v1.DesignService.CreateDesign
   */
  createDesign: {
    methodKind: "unary";
    input: typeof CreateDesignRequestSchema;
    output: typeof CreateDesignResponseSchema;
  },
  /**
   * *
   * List all designs from a user.
   *
   * @generated from rpc leetcoach.v1.DesignService.ListDesigns
   */
  listDesigns: {
    methodKind: "unary";
    input: typeof ListDesignsRequestSchema;
    output: typeof ListDesignsResponseSchema;
  },
  /**
   * *
   * Get a particular design
   *
   * @generated from rpc leetcoach.v1.DesignService.GetDesign
   */
  getDesign: {
    methodKind: "unary";
    input: typeof GetDesignRequestSchema;
    output: typeof GetDesignResponseSchema;
  },
  /**
   * *
   * Batch get multiple designs by ID
   *
   * @generated from rpc leetcoach.v1.DesignService.GetDesigns
   */
  getDesigns: {
    methodKind: "unary";
    input: typeof GetDesignsRequestSchema;
    output: typeof GetDesignsResponseSchema;
  },
  /**
   * *
   * Delete a particular design
   *
   * @generated from rpc leetcoach.v1.DesignService.DeleteDesign
   */
  deleteDesign: {
    methodKind: "unary";
    input: typeof DeleteDesignRequestSchema;
    output: typeof DeleteDesignResponseSchema;
  },
  /**
   * *
   * Updates specific fields of a design
   *
   * @generated from rpc leetcoach.v1.DesignService.UpdateDesign
   */
  updateDesign: {
    methodKind: "unary";
    input: typeof UpdateDesignRequestSchema;
    output: typeof UpdateDesignResponseSchema;
  },
  /**
   * Adds a section to a design's section_ids list and creates the section resource.
   *
   * @generated from rpc leetcoach.v1.DesignService.AddSection
   */
  addSection: {
    methodKind: "unary";
    input: typeof AddSectionRequestSchema;
    output: typeof SectionSchema;
  },
  /**
   * @generated from rpc leetcoach.v1.DesignService.GetSection
   */
  getSection: {
    methodKind: "unary";
    input: typeof GetSectionRequestSchema;
    output: typeof SectionSchema;
  },
  /**
   * Use PATCH for partial updates to a section (title, content)
   *
   * @generated from rpc leetcoach.v1.DesignService.UpdateSection
   */
  updateSection: {
    methodKind: "unary";
    input: typeof UpdateSectionRequestSchema;
    output: typeof SectionSchema;
  },
  /**
   * Moves a section within the Design's section_ids list
   * We could have done this via an UpdateDesign with the changed order but this is 
   * clearer and only needs to deal with the current (and target) section instead of
   * needing to know all sections for an update.
   *
   * @generated from rpc leetcoach.v1.DesignService.MoveSection
   */
  moveSection: {
    methodKind: "unary";
    input: typeof MoveSectionRequestSchema;
    output: typeof MoveSectionResponseSchema;
  },
  /**
   * @generated from rpc leetcoach.v1.DesignService.DeleteSection
   */
  deleteSection: {
    methodKind: "unary";
    input: typeof DeleteSectionRequestSchema;
    output: typeof DeleteSectionResponseSchema;
  },
}>;

