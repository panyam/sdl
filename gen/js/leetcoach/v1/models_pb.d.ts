// protos/leetcoach/v1/models.proto

// @generated by protoc-gen-es v2.2.5
// @generated from file leetcoach/v1/models.proto (package leetcoach.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { JsonObject, Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file leetcoach/v1/models.proto.
 */
export declare const file_leetcoach_v1_models: GenFile;

/**
 * @generated from message leetcoach.v1.Pagination
 */
export declare type Pagination = Message<"leetcoach.v1.Pagination"> & {
  /**
   * *
   * Instead of an offset an abstract  "page" key is provided that offers
   * an opaque "pointer" into some offset in a result set.
   *
   * @generated from field: string page_key = 1;
   */
  pageKey: string;

  /**
   * *
   * If a pagekey is not supported we can also support a direct integer offset
   * for cases where it makes sense.
   *
   * @generated from field: int32 page_offset = 2;
   */
  pageOffset: number;

  /**
   * *
   * Number of results to return.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;
};

/**
 * Describes the message leetcoach.v1.Pagination.
 * Use `create(PaginationSchema)` to create a new message.
 */
export declare const PaginationSchema: GenMessage<Pagination>;

/**
 * @generated from message leetcoach.v1.PaginationResponse
 */
export declare type PaginationResponse = Message<"leetcoach.v1.PaginationResponse"> & {
  /**
   * *
   * The key/pointer string that subsequent List requests should pass to
   * continue the pagination.
   *
   * @generated from field: string next_page_key = 2;
   */
  nextPageKey: string;

  /**
   * *
   * Also support an integer offset if possible
   *
   * @generated from field: int32 next_page_offset = 3;
   */
  nextPageOffset: number;

  /**
   * *
   * Whether theere are more results.
   *
   * @generated from field: bool has_more = 4;
   */
  hasMore: boolean;

  /**
   * *
   * Total number of results.
   *
   * @generated from field: int32 total_results = 5;
   */
  totalResults: number;
};

/**
 * Describes the message leetcoach.v1.PaginationResponse.
 * Use `create(PaginationResponseSchema)` to create a new message.
 */
export declare const PaginationResponseSchema: GenMessage<PaginationResponse>;

/**
 * @generated from message leetcoach.v1.Tag
 */
export declare type Tag = Message<"leetcoach.v1.Tag"> & {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * Unique label across our system
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * Normalized label for making search easier
   *
   * @generated from field: string normalized_name = 4;
   */
  normalizedName: string;

  /**
   * First user that created this
   *
   * @generated from field: string first_user_id = 5;
   */
  firstUserId: string;

  /**
   * Description for this tag
   *
   * @generated from field: string description = 6;
   */
  description: string;

  /**
   * An optional image url for this tag
   *
   * @generated from field: string image_url = 7;
   */
  imageUrl: string;

  /**
   * Number of designs this tag is in - will be calculated periodically
   *
   * @generated from field: int64 num_designs = 8;
   */
  numDesigns: bigint;
};

/**
 * Describes the message leetcoach.v1.Tag.
 * Use `create(TagSchema)` to create a new message.
 */
export declare const TagSchema: GenMessage<Tag>;

/**
 * @generated from message leetcoach.v1.Credential
 */
export declare type Credential = Message<"leetcoach.v1.Credential"> & {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * @generated from field: string owner = 4;
   */
  owner: string;

  /**
   * Name/Labelfor this setof credentials (eg github, aws, bitbucket etc)
   *
   * @generated from field: string name = 5;
   */
  name: string;

  /**
   * eg AWS, github, datastore etc
   *
   * @generated from field: string provider = 6;
   */
  provider: string;

  /**
   * Actual credential data
   *
   * @generated from field: google.protobuf.Struct credential_data = 9;
   */
  credentialData?: JsonObject;
};

/**
 * Describes the message leetcoach.v1.Credential.
 * Use `create(CredentialSchema)` to create a new message.
 */
export declare const CredentialSchema: GenMessage<Credential>;

/**
 * @generated from message leetcoach.v1.Design
 */
export declare type Design = Message<"leetcoach.v1.Design"> & {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * @generated from field: string owner_id = 4;
   */
  ownerId: string;

  /**
   * @generated from field: string visibility = 5;
   */
  visibility: string;

  /**
   * @generated from field: repeated string visible_to = 6;
   */
  visibleTo: string[];

  /**
   * *
   * Name of the system design
   *
   * @generated from field: string name = 7;
   */
  name: string;

  /**
   * A description or abstract for the design
   *
   * @generated from field: string description = 8;
   */
  description: string;

  /**
   * Metadata about the content itself that user may want to
   * highlight (or the system extracts).  
   *
   * @generated from field: google.protobuf.Struct content_metadata = 9;
   */
  contentMetadata?: JsonObject;

  /**
   * IDs of all the sections in this Design
   *
   * @generated from field: repeated string section_ids = 10;
   */
  sectionIds: string[];
};

/**
 * Describes the message leetcoach.v1.Design.
 * Use `create(DesignSchema)` to create a new message.
 */
export declare const DesignSchema: GenMessage<Design>;

/**
 * @generated from message leetcoach.v1.Section
 */
export declare type Section = Message<"leetcoach.v1.Section"> & {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * *
   * ID of this section - only needs ot be unique within a design
   *
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * *
   * Which design this section belong to.
   *
   * @generated from field: string design_id = 4;
   */
  designId: string;

  /**
   * *
   * Type of section, eg text, drawing, plot etc.
   *
   * @generated from field: leetcoach.v1.SectionType type = 5;
   */
  type: SectionType;

  /**
   * *
   * Title of this section.
   *
   * @generated from field: string title = 6;
   */
  title: string;

  /**
   * *
   * A description of the section to help make sense of why this is here.
   *
   * @generated from field: string description = 7;
   */
  description: string;

  /**
   * *
   * Order of the section in the list of sections.  This is a readonly field.
   *
   * @generated from field: uint32 order = 8;
   */
  order: number;
};

/**
 * Describes the message leetcoach.v1.Section.
 * Use `create(SectionSchema)` to create a new message.
 */
export declare const SectionSchema: GenMessage<Section>;

/**
 * *
 * Each section can have multiple pieces of content identified by a "name"
 * The name 
 *
 * @generated from message leetcoach.v1.Content
 */
export declare type Content = Message<"leetcoach.v1.Content"> & {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * Unique name of the content piece within the section
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * *
   * Type of content being attached to this section.
   * This would determine what kind of media we are working with
   * eg e
   *
   * e.g., "application/json", "text/html" etc
   *
   * @generated from field: string type = 5;
   */
  type: string;

  /**
   * *
   * Format of the section. 
   *
   * e.g., "chartjs/json", "plotly/json"
   *
   * @generated from field: string format = 6;
   */
  format: string;
};

/**
 * Describes the message leetcoach.v1.Content.
 * Use `create(ContentSchema)` to create a new message.
 */
export declare const ContentSchema: GenMessage<Content>;

/**
 * @generated from enum leetcoach.v1.ContentState
 */
export enum ContentState {
  /**
   * @generated from enum value: CONTENT_STATE_CREATED = 0;
   */
  CREATED = 0,

  /**
   * @generated from enum value: CONTENT_STATE_POPULATED = 1;
   */
  POPULATED = 1,
}

/**
 * Describes the enum leetcoach.v1.ContentState.
 */
export declare const ContentStateSchema: GenEnum<ContentState>;

/**
 * @generated from enum leetcoach.v1.SectionType
 */
export enum SectionType {
  /**
   * @generated from enum value: SECTION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SECTION_TYPE_TEXT = 1;
   */
  TEXT = 1,

  /**
   * @generated from enum value: SECTION_TYPE_DRAWING = 2;
   */
  DRAWING = 2,

  /**
   * @generated from enum value: SECTION_TYPE_PLOT = 3;
   */
  PLOT = 3,
}

/**
 * Describes the enum leetcoach.v1.SectionType.
 */
export declare const SectionTypeSchema: GenEnum<SectionType>;

