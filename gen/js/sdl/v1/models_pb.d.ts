// protos/sdl/v1/models.proto

// @generated by protoc-gen-es v2.5.2
// @generated from file sdl/v1/models.proto (package sdl.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file sdl/v1/models.proto.
 */
export declare const file_sdl_v1_models: GenFile;

/**
 * @generated from message sdl.v1.Pagination
 */
export declare type Pagination = Message<"sdl.v1.Pagination"> & {
  /**
   * *
   * Instead of an offset an abstract  "page" key is provided that offers
   * an opaque "pointer" into some offset in a result set.
   *
   * @generated from field: string page_key = 1;
   */
  pageKey: string;

  /**
   * *
   * If a pagekey is not supported we can also support a direct integer offset
   * for cases where it makes sense.
   *
   * @generated from field: int32 page_offset = 2;
   */
  pageOffset: number;

  /**
   * *
   * Number of results to return.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;
};

/**
 * Describes the message sdl.v1.Pagination.
 * Use `create(PaginationSchema)` to create a new message.
 */
export declare const PaginationSchema: GenMessage<Pagination>;

/**
 * @generated from message sdl.v1.PaginationResponse
 */
export declare type PaginationResponse = Message<"sdl.v1.PaginationResponse"> & {
  /**
   * *
   * The key/pointer string that subsequent List requests should pass to
   * continue the pagination.
   *
   * @generated from field: string next_page_key = 2;
   */
  nextPageKey: string;

  /**
   * *
   * Also support an integer offset if possible
   *
   * @generated from field: int32 next_page_offset = 3;
   */
  nextPageOffset: number;

  /**
   * *
   * Whether theere are more results.
   *
   * @generated from field: bool has_more = 4;
   */
  hasMore: boolean;

  /**
   * *
   * Total number of results.
   *
   * @generated from field: int32 total_results = 5;
   */
  totalResults: number;
};

/**
 * Describes the message sdl.v1.PaginationResponse.
 * Use `create(PaginationResponseSchema)` to create a new message.
 */
export declare const PaginationResponseSchema: GenMessage<PaginationResponse>;

/**
 * @generated from message sdl.v1.Canvas
 */
export declare type Canvas = Message<"sdl.v1.Canvas"> & {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * Unique ID for the canvas
   *
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * Active system being observed
   *
   * @generated from field: string active_system = 4;
   */
  activeSystem: string;

  /**
   * Files that have been loaded so far
   *
   * @generated from field: repeated string loaded_files = 5;
   */
  loadedFiles: string[];

  /**
   * Registered generators for this canvas
   *
   * @generated from field: repeated sdl.v1.Generator generators = 6;
   */
  generators: Generator[];

  /**
   * Registered live metrics for this canvas
   *
   * @generated from field: repeated sdl.v1.Metric metrics = 7;
   */
  metrics: Metric[];
};

/**
 * Describes the message sdl.v1.Canvas.
 * Use `create(CanvasSchema)` to create a new message.
 */
export declare const CanvasSchema: GenMessage<Canvas>;

/**
 * @generated from message sdl.v1.Generator
 */
export declare type Generator = Message<"sdl.v1.Generator"> & {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * ID of the generator
   *
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * Canvas this generator is sending traffic to
   *
   * @generated from field: string canvas_id = 4;
   */
  canvasId: string;

  /**
   * A descriptive label
   *
   * @generated from field: string name = 5;
   */
  name: string;

  /**
   * Name of the target component to generate traffic on. This component should be defined in the System,
   * eg "server"
   *
   * @generated from field: string component = 6;
   */
  component: string;

  /**
   * Method in the target component to generate traffic on.
   *
   * @generated from field: string method = 7;
   */
  method: string;

  /**
   * Traffic rate in RPS (>= 1).  Does not support < 1 yet
   *
   * @generated from field: double rate = 8;
   */
  rate: number;

  /**
   * Duration in seconds over which the genarator is run. 0 => For ever
   *
   * @generated from field: double duration = 9;
   */
  duration: number;

  /**
   * whether it is enabled or not
   *
   * @generated from field: bool enabled = 10;
   */
  enabled: boolean;
};

/**
 * Describes the message sdl.v1.Generator.
 * Use `create(GeneratorSchema)` to create a new message.
 */
export declare const GeneratorSchema: GenMessage<Generator>;

/**
 * @generated from message sdl.v1.Metric
 */
export declare type Metric = Message<"sdl.v1.Metric"> & {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * @generated from field: string canvas_id = 4;
   */
  canvasId: string;

  /**
   * A descriptive label
   *
   * @generated from field: string name = 5;
   */
  name: string;

  /**
   * Name of the target component to monitor
   * eg "server"
   *
   * @generated from field: string component = 6;
   */
  component: string;

  /**
   * Method in the target component to generate traffic on.
   *
   * @generated from field: repeated string methods = 7;
   */
  methods: string[];

  /**
   * whether it is enabled or not
   *
   * @generated from field: bool enabled = 8;
   */
  enabled: boolean;

  /**
   * Type of metric "count" or "latency"
   *
   * @generated from field: string metric_type = 9;
   */
  metricType: string;

  /**
   * Type of aggregation on the metric
   *
   * @generated from field: string aggregation = 10;
   */
  aggregation: string;

  /**
   * Aggregation window (in seconds) to match on
   *
   * @generated from field: double aggregation_window = 11;
   */
  aggregationWindow: number;

  /**
   * Result value to match
   *
   * @generated from field: string match_result = 12;
   */
  matchResult: string;

  /**
   * The result "type" if a matching result is provided
   * This will be parsed into a type declaration so we know how to treat
   * the match_result value provided
   *
   * @generated from field: string match_result_type = 13;
   */
  matchResultType: string;
};

/**
 * Describes the message sdl.v1.Metric.
 * Use `create(MetricSchema)` to create a new message.
 */
export declare const MetricSchema: GenMessage<Metric>;

