// protos/sdl/v1/canvas.proto

// @generated by protoc-gen-connect-web v0.8.6
// @generated from file sdl/v1/canvas.proto (package sdl.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AddGeneratorRequest, AddGeneratorResponse, AddMetricRequest, AddMetricResponse, AggregateMetricsRequest, AggregateMetricsResponse, CreateCanvasRequest, CreateCanvasResponse, DeleteCanvasRequest, DeleteCanvasResponse, DeleteGeneratorRequest, DeleteGeneratorResponse, DeleteMetricRequest, DeleteMetricResponse, ExecuteTraceRequest, ExecuteTraceResponse, GetCanvasRequest, GetCanvasResponse, GetGeneratorRequest, GetGeneratorResponse, ListCanvasesRequest, ListCanvasesResponse, ListGeneratorsRequest, ListGeneratorsResponse, ListMetricsRequest, ListMetricsResponse, LiveMetricsRequest, LiveMetricsResponse, LoadFileRequest, LoadFileResponse, PauseGeneratorRequest, PauseGeneratorResponse, QueryMetricsRequest, QueryMetricsResponse, ResumeGeneratorRequest, ResumeGeneratorResponse, StartAllGeneratorsRequest, StartAllGeneratorsResponse, StopAllGeneratorsRequest, StopAllGeneratorsResponse, UpdateGeneratorRequest, UpdateGeneratorResponse, UseSystemRequest, UseSystemResponse } from "./canvas_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * *
 * Service for interacting with a canvas.
 *
 * @generated from service sdl.v1.CanvasService
 */
export const CanvasService = {
  typeName: "sdl.v1.CanvasService",
  methods: {
    /**
     * *
     * Create a new canvas sesssion.
     *
     * @generated from rpc sdl.v1.CanvasService.CreateCanvas
     */
    createCanvas: {
      name: "CreateCanvas",
      I: CreateCanvasRequest,
      O: CreateCanvasResponse,
      kind: MethodKind.Unary,
    },
    /**
     * *
     * List all canvases from a user.
     *
     * @generated from rpc sdl.v1.CanvasService.ListCanvases
     */
    listCanvases: {
      name: "ListCanvases",
      I: ListCanvasesRequest,
      O: ListCanvasesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * *
     * Get details/stats for a particular canvas
     *
     * @generated from rpc sdl.v1.CanvasService.GetCanvas
     */
    getCanvas: {
      name: "GetCanvas",
      I: GetCanvasRequest,
      O: GetCanvasResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc sdl.v1.CanvasService.LoadFile
     */
    loadFile: {
      name: "LoadFile",
      I: LoadFileRequest,
      O: LoadFileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc sdl.v1.CanvasService.UseSystem
     */
    useSystem: {
      name: "UseSystem",
      I: UseSystemRequest,
      O: UseSystemResponse,
      kind: MethodKind.Unary,
    },
    /**
     * *
     * Delete a particular canvas.  Frees up resources used by it and all the connections
     *
     * @generated from rpc sdl.v1.CanvasService.DeleteCanvas
     */
    deleteCanvas: {
      name: "DeleteCanvas",
      I: DeleteCanvasRequest,
      O: DeleteCanvasResponse,
      kind: MethodKind.Unary,
    },
    /**
     *  ----- Generator Operations -----
     * Adds a generator to a canvas's generator_ids list and creates the generator resource.
     *
     * @generated from rpc sdl.v1.CanvasService.AddGenerator
     */
    addGenerator: {
      name: "AddGenerator",
      I: AddGeneratorRequest,
      O: AddGeneratorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Request to start all generators
     *
     * @generated from rpc sdl.v1.CanvasService.StartAllGenerators
     */
    startAllGenerators: {
      name: "StartAllGenerators",
      I: StartAllGeneratorsRequest,
      O: StartAllGeneratorsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Request to start all generators
     *
     * @generated from rpc sdl.v1.CanvasService.StopAllGenerators
     */
    stopAllGenerators: {
      name: "StopAllGenerators",
      I: StopAllGeneratorsRequest,
      O: StopAllGeneratorsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc sdl.v1.CanvasService.ListGenerators
     */
    listGenerators: {
      name: "ListGenerators",
      I: ListGeneratorsRequest,
      O: ListGeneratorsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc sdl.v1.CanvasService.GetGenerator
     */
    getGenerator: {
      name: "GetGenerator",
      I: GetGeneratorRequest,
      O: GetGeneratorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Use PATCH for partial updates to a generator (title, content)
     *
     * @generated from rpc sdl.v1.CanvasService.UpdateGenerator
     */
    updateGenerator: {
      name: "UpdateGenerator",
      I: UpdateGeneratorRequest,
      O: UpdateGeneratorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc sdl.v1.CanvasService.PauseGenerator
     */
    pauseGenerator: {
      name: "PauseGenerator",
      I: PauseGeneratorRequest,
      O: PauseGeneratorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc sdl.v1.CanvasService.ResumeGenerator
     */
    resumeGenerator: {
      name: "ResumeGenerator",
      I: ResumeGeneratorRequest,
      O: ResumeGeneratorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc sdl.v1.CanvasService.DeleteGenerator
     */
    deleteGenerator: {
      name: "DeleteGenerator",
      I: DeleteGeneratorRequest,
      O: DeleteGeneratorResponse,
      kind: MethodKind.Unary,
    },
    /**
     *  ----- Generator Operations -----
     * Adds a metric to live plot
     *
     * @generated from rpc sdl.v1.CanvasService.AddMetric
     */
    addMetric: {
      name: "AddMetric",
      I: AddMetricRequest,
      O: AddMetricResponse,
      kind: MethodKind.Unary,
    },
    /**
     * *
     * Delete a particular metriccanvas.  Frees up resources used by it and all the connections
     *
     * @generated from rpc sdl.v1.CanvasService.DeleteMetric
     */
    deleteMetric: {
      name: "DeleteMetric",
      I: DeleteMetricRequest,
      O: DeleteMetricResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc sdl.v1.CanvasService.LiveMetric
     */
    liveMetric: {
      name: "LiveMetric",
      I: LiveMetricsRequest,
      O: LiveMetricsResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Execute a single trace for debugging/analysis
     *
     * @generated from rpc sdl.v1.CanvasService.ExecuteTrace
     */
    executeTrace: {
      name: "ExecuteTrace",
      I: ExecuteTraceRequest,
      O: ExecuteTraceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List all available metrics
     *
     * @generated from rpc sdl.v1.CanvasService.ListMetrics
     */
    listMetrics: {
      name: "ListMetrics",
      I: ListMetricsRequest,
      O: ListMetricsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Query raw metric data points
     *
     * @generated from rpc sdl.v1.CanvasService.QueryMetrics
     */
    queryMetrics: {
      name: "QueryMetrics",
      I: QueryMetricsRequest,
      O: QueryMetricsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get aggregated metric data
     *
     * @generated from rpc sdl.v1.CanvasService.AggregateMetrics
     */
    aggregateMetrics: {
      name: "AggregateMetrics",
      I: AggregateMetricsRequest,
      O: AggregateMetricsResponse,
      kind: MethodKind.Unary,
    },
  }
};

