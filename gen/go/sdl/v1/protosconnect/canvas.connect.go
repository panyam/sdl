// protos/sdl/v1/canvas.proto

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sdl/v1/canvas.proto

package protosconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	protos "github.com/sdl/protos"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CanvasServiceName is the fully-qualified name of the CanvasService service.
	CanvasServiceName = "sdl.v1.CanvasService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CanvasServiceCreateCanvasProcedure is the fully-qualified name of the CanvasService's
	// CreateCanvas RPC.
	CanvasServiceCreateCanvasProcedure = "/sdl.v1.CanvasService/CreateCanvas"
	// CanvasServiceListCanvasesProcedure is the fully-qualified name of the CanvasService's
	// ListCanvases RPC.
	CanvasServiceListCanvasesProcedure = "/sdl.v1.CanvasService/ListCanvases"
	// CanvasServiceGetCanvasProcedure is the fully-qualified name of the CanvasService's GetCanvas RPC.
	CanvasServiceGetCanvasProcedure = "/sdl.v1.CanvasService/GetCanvas"
	// CanvasServiceLoadFileProcedure is the fully-qualified name of the CanvasService's LoadFile RPC.
	CanvasServiceLoadFileProcedure = "/sdl.v1.CanvasService/LoadFile"
	// CanvasServiceUseSystemProcedure is the fully-qualified name of the CanvasService's UseSystem RPC.
	CanvasServiceUseSystemProcedure = "/sdl.v1.CanvasService/UseSystem"
	// CanvasServiceDeleteCanvasProcedure is the fully-qualified name of the CanvasService's
	// DeleteCanvas RPC.
	CanvasServiceDeleteCanvasProcedure = "/sdl.v1.CanvasService/DeleteCanvas"
	// CanvasServiceAddGeneratorProcedure is the fully-qualified name of the CanvasService's
	// AddGenerator RPC.
	CanvasServiceAddGeneratorProcedure = "/sdl.v1.CanvasService/AddGenerator"
	// CanvasServiceStartAllGeneratorsProcedure is the fully-qualified name of the CanvasService's
	// StartAllGenerators RPC.
	CanvasServiceStartAllGeneratorsProcedure = "/sdl.v1.CanvasService/StartAllGenerators"
	// CanvasServiceStopAllGeneratorsProcedure is the fully-qualified name of the CanvasService's
	// StopAllGenerators RPC.
	CanvasServiceStopAllGeneratorsProcedure = "/sdl.v1.CanvasService/StopAllGenerators"
	// CanvasServiceListGeneratorsProcedure is the fully-qualified name of the CanvasService's
	// ListGenerators RPC.
	CanvasServiceListGeneratorsProcedure = "/sdl.v1.CanvasService/ListGenerators"
	// CanvasServiceGetGeneratorProcedure is the fully-qualified name of the CanvasService's
	// GetGenerator RPC.
	CanvasServiceGetGeneratorProcedure = "/sdl.v1.CanvasService/GetGenerator"
	// CanvasServiceUpdateGeneratorProcedure is the fully-qualified name of the CanvasService's
	// UpdateGenerator RPC.
	CanvasServiceUpdateGeneratorProcedure = "/sdl.v1.CanvasService/UpdateGenerator"
	// CanvasServicePauseGeneratorProcedure is the fully-qualified name of the CanvasService's
	// PauseGenerator RPC.
	CanvasServicePauseGeneratorProcedure = "/sdl.v1.CanvasService/PauseGenerator"
	// CanvasServiceResumeGeneratorProcedure is the fully-qualified name of the CanvasService's
	// ResumeGenerator RPC.
	CanvasServiceResumeGeneratorProcedure = "/sdl.v1.CanvasService/ResumeGenerator"
	// CanvasServiceDeleteGeneratorProcedure is the fully-qualified name of the CanvasService's
	// DeleteGenerator RPC.
	CanvasServiceDeleteGeneratorProcedure = "/sdl.v1.CanvasService/DeleteGenerator"
	// CanvasServiceExecuteTraceProcedure is the fully-qualified name of the CanvasService's
	// ExecuteTrace RPC.
	CanvasServiceExecuteTraceProcedure = "/sdl.v1.CanvasService/ExecuteTrace"
	// CanvasServiceSetParameterProcedure is the fully-qualified name of the CanvasService's
	// SetParameter RPC.
	CanvasServiceSetParameterProcedure = "/sdl.v1.CanvasService/SetParameter"
	// CanvasServiceGetParametersProcedure is the fully-qualified name of the CanvasService's
	// GetParameters RPC.
	CanvasServiceGetParametersProcedure = "/sdl.v1.CanvasService/GetParameters"
	// CanvasServiceAddMetricProcedure is the fully-qualified name of the CanvasService's AddMetric RPC.
	CanvasServiceAddMetricProcedure = "/sdl.v1.CanvasService/AddMetric"
	// CanvasServiceDeleteMetricProcedure is the fully-qualified name of the CanvasService's
	// DeleteMetric RPC.
	CanvasServiceDeleteMetricProcedure = "/sdl.v1.CanvasService/DeleteMetric"
	// CanvasServiceLiveMetricsProcedure is the fully-qualified name of the CanvasService's LiveMetrics
	// RPC.
	CanvasServiceLiveMetricsProcedure = "/sdl.v1.CanvasService/LiveMetrics"
	// CanvasServiceListMetricsProcedure is the fully-qualified name of the CanvasService's ListMetrics
	// RPC.
	CanvasServiceListMetricsProcedure = "/sdl.v1.CanvasService/ListMetrics"
	// CanvasServiceQueryMetricsProcedure is the fully-qualified name of the CanvasService's
	// QueryMetrics RPC.
	CanvasServiceQueryMetricsProcedure = "/sdl.v1.CanvasService/QueryMetrics"
	// CanvasServiceAggregateMetricsProcedure is the fully-qualified name of the CanvasService's
	// AggregateMetrics RPC.
	CanvasServiceAggregateMetricsProcedure = "/sdl.v1.CanvasService/AggregateMetrics"
	// CanvasServiceGetSystemDiagramProcedure is the fully-qualified name of the CanvasService's
	// GetSystemDiagram RPC.
	CanvasServiceGetSystemDiagramProcedure = "/sdl.v1.CanvasService/GetSystemDiagram"
)

// CanvasServiceClient is a client for the sdl.v1.CanvasService service.
type CanvasServiceClient interface {
	// *
	// Create a new canvas sesssion.
	CreateCanvas(context.Context, *connect.Request[protos.CreateCanvasRequest]) (*connect.Response[protos.CreateCanvasResponse], error)
	// *
	// List all canvases from a user.
	ListCanvases(context.Context, *connect.Request[protos.ListCanvasesRequest]) (*connect.Response[protos.ListCanvasesResponse], error)
	// *
	// Get details/stats for a particular canvas
	GetCanvas(context.Context, *connect.Request[protos.GetCanvasRequest]) (*connect.Response[protos.GetCanvasResponse], error)
	LoadFile(context.Context, *connect.Request[protos.LoadFileRequest]) (*connect.Response[protos.LoadFileResponse], error)
	UseSystem(context.Context, *connect.Request[protos.UseSystemRequest]) (*connect.Response[protos.UseSystemResponse], error)
	// *
	// Delete a particular canvas.  Frees up resources used by it and all the connections
	DeleteCanvas(context.Context, *connect.Request[protos.DeleteCanvasRequest]) (*connect.Response[protos.DeleteCanvasResponse], error)
	//	----- Generator Operations -----
	//
	// Adds a generator to a canvas's generator_ids list and creates the generator resource.
	AddGenerator(context.Context, *connect.Request[protos.AddGeneratorRequest]) (*connect.Response[protos.AddGeneratorResponse], error)
	// Request to start all generators
	StartAllGenerators(context.Context, *connect.Request[protos.StartAllGeneratorsRequest]) (*connect.Response[protos.StartAllGeneratorsResponse], error)
	// Request to start all generators
	StopAllGenerators(context.Context, *connect.Request[protos.StopAllGeneratorsRequest]) (*connect.Response[protos.StopAllGeneratorsResponse], error)
	ListGenerators(context.Context, *connect.Request[protos.ListGeneratorsRequest]) (*connect.Response[protos.ListGeneratorsResponse], error)
	GetGenerator(context.Context, *connect.Request[protos.GetGeneratorRequest]) (*connect.Response[protos.GetGeneratorResponse], error)
	// Use PATCH for partial updates to a generator (title, content)
	UpdateGenerator(context.Context, *connect.Request[protos.UpdateGeneratorRequest]) (*connect.Response[protos.UpdateGeneratorResponse], error)
	PauseGenerator(context.Context, *connect.Request[protos.PauseGeneratorRequest]) (*connect.Response[protos.PauseGeneratorResponse], error)
	ResumeGenerator(context.Context, *connect.Request[protos.ResumeGeneratorRequest]) (*connect.Response[protos.ResumeGeneratorResponse], error)
	DeleteGenerator(context.Context, *connect.Request[protos.DeleteGeneratorRequest]) (*connect.Response[protos.DeleteGeneratorResponse], error)
	// Execute a single trace for debugging/analysis
	ExecuteTrace(context.Context, *connect.Request[protos.ExecuteTraceRequest]) (*connect.Response[protos.ExecuteTraceResponse], error)
	// ----- Parameter Operations -----
	// Set a component parameter value
	SetParameter(context.Context, *connect.Request[protos.SetParameterRequest]) (*connect.Response[protos.SetParameterResponse], error)
	// Get parameter values
	GetParameters(context.Context, *connect.Request[protos.GetParametersRequest]) (*connect.Response[protos.GetParametersResponse], error)
	//	----- Generator Operations -----
	//
	// Adds a metric to live plot
	AddMetric(context.Context, *connect.Request[protos.AddMetricRequest]) (*connect.Response[protos.AddMetricResponse], error)
	// *
	// Delete a particular metriccanvas.  Frees up resources used by it and all the connections
	DeleteMetric(context.Context, *connect.Request[protos.DeleteMetricRequest]) (*connect.Response[protos.DeleteMetricResponse], error)
	LiveMetrics(context.Context, *connect.Request[protos.LiveMetricsRequest]) (*connect.ServerStreamForClient[protos.LiveMetricsResponse], error)
	// List all available metrics
	ListMetrics(context.Context, *connect.Request[protos.ListMetricsRequest]) (*connect.Response[protos.ListMetricsResponse], error)
	// Query raw metric data points
	QueryMetrics(context.Context, *connect.Request[protos.QueryMetricsRequest]) (*connect.Response[protos.QueryMetricsResponse], error)
	// Get aggregated metric data
	AggregateMetrics(context.Context, *connect.Request[protos.AggregateMetricsRequest]) (*connect.Response[protos.AggregateMetricsResponse], error)
	// Get the system diagram for visualization
	GetSystemDiagram(context.Context, *connect.Request[protos.GetSystemDiagramRequest]) (*connect.Response[protos.GetSystemDiagramResponse], error)
}

// NewCanvasServiceClient constructs a client for the sdl.v1.CanvasService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCanvasServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CanvasServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	canvasServiceMethods := protos.File_sdl_v1_canvas_proto.Services().ByName("CanvasService").Methods()
	return &canvasServiceClient{
		createCanvas: connect.NewClient[protos.CreateCanvasRequest, protos.CreateCanvasResponse](
			httpClient,
			baseURL+CanvasServiceCreateCanvasProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("CreateCanvas")),
			connect.WithClientOptions(opts...),
		),
		listCanvases: connect.NewClient[protos.ListCanvasesRequest, protos.ListCanvasesResponse](
			httpClient,
			baseURL+CanvasServiceListCanvasesProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("ListCanvases")),
			connect.WithClientOptions(opts...),
		),
		getCanvas: connect.NewClient[protos.GetCanvasRequest, protos.GetCanvasResponse](
			httpClient,
			baseURL+CanvasServiceGetCanvasProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("GetCanvas")),
			connect.WithClientOptions(opts...),
		),
		loadFile: connect.NewClient[protos.LoadFileRequest, protos.LoadFileResponse](
			httpClient,
			baseURL+CanvasServiceLoadFileProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("LoadFile")),
			connect.WithClientOptions(opts...),
		),
		useSystem: connect.NewClient[protos.UseSystemRequest, protos.UseSystemResponse](
			httpClient,
			baseURL+CanvasServiceUseSystemProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("UseSystem")),
			connect.WithClientOptions(opts...),
		),
		deleteCanvas: connect.NewClient[protos.DeleteCanvasRequest, protos.DeleteCanvasResponse](
			httpClient,
			baseURL+CanvasServiceDeleteCanvasProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("DeleteCanvas")),
			connect.WithClientOptions(opts...),
		),
		addGenerator: connect.NewClient[protos.AddGeneratorRequest, protos.AddGeneratorResponse](
			httpClient,
			baseURL+CanvasServiceAddGeneratorProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("AddGenerator")),
			connect.WithClientOptions(opts...),
		),
		startAllGenerators: connect.NewClient[protos.StartAllGeneratorsRequest, protos.StartAllGeneratorsResponse](
			httpClient,
			baseURL+CanvasServiceStartAllGeneratorsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("StartAllGenerators")),
			connect.WithClientOptions(opts...),
		),
		stopAllGenerators: connect.NewClient[protos.StopAllGeneratorsRequest, protos.StopAllGeneratorsResponse](
			httpClient,
			baseURL+CanvasServiceStopAllGeneratorsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("StopAllGenerators")),
			connect.WithClientOptions(opts...),
		),
		listGenerators: connect.NewClient[protos.ListGeneratorsRequest, protos.ListGeneratorsResponse](
			httpClient,
			baseURL+CanvasServiceListGeneratorsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("ListGenerators")),
			connect.WithClientOptions(opts...),
		),
		getGenerator: connect.NewClient[protos.GetGeneratorRequest, protos.GetGeneratorResponse](
			httpClient,
			baseURL+CanvasServiceGetGeneratorProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("GetGenerator")),
			connect.WithClientOptions(opts...),
		),
		updateGenerator: connect.NewClient[protos.UpdateGeneratorRequest, protos.UpdateGeneratorResponse](
			httpClient,
			baseURL+CanvasServiceUpdateGeneratorProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("UpdateGenerator")),
			connect.WithClientOptions(opts...),
		),
		pauseGenerator: connect.NewClient[protos.PauseGeneratorRequest, protos.PauseGeneratorResponse](
			httpClient,
			baseURL+CanvasServicePauseGeneratorProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("PauseGenerator")),
			connect.WithClientOptions(opts...),
		),
		resumeGenerator: connect.NewClient[protos.ResumeGeneratorRequest, protos.ResumeGeneratorResponse](
			httpClient,
			baseURL+CanvasServiceResumeGeneratorProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("ResumeGenerator")),
			connect.WithClientOptions(opts...),
		),
		deleteGenerator: connect.NewClient[protos.DeleteGeneratorRequest, protos.DeleteGeneratorResponse](
			httpClient,
			baseURL+CanvasServiceDeleteGeneratorProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("DeleteGenerator")),
			connect.WithClientOptions(opts...),
		),
		executeTrace: connect.NewClient[protos.ExecuteTraceRequest, protos.ExecuteTraceResponse](
			httpClient,
			baseURL+CanvasServiceExecuteTraceProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("ExecuteTrace")),
			connect.WithClientOptions(opts...),
		),
		setParameter: connect.NewClient[protos.SetParameterRequest, protos.SetParameterResponse](
			httpClient,
			baseURL+CanvasServiceSetParameterProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("SetParameter")),
			connect.WithClientOptions(opts...),
		),
		getParameters: connect.NewClient[protos.GetParametersRequest, protos.GetParametersResponse](
			httpClient,
			baseURL+CanvasServiceGetParametersProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("GetParameters")),
			connect.WithClientOptions(opts...),
		),
		addMetric: connect.NewClient[protos.AddMetricRequest, protos.AddMetricResponse](
			httpClient,
			baseURL+CanvasServiceAddMetricProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("AddMetric")),
			connect.WithClientOptions(opts...),
		),
		deleteMetric: connect.NewClient[protos.DeleteMetricRequest, protos.DeleteMetricResponse](
			httpClient,
			baseURL+CanvasServiceDeleteMetricProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("DeleteMetric")),
			connect.WithClientOptions(opts...),
		),
		liveMetrics: connect.NewClient[protos.LiveMetricsRequest, protos.LiveMetricsResponse](
			httpClient,
			baseURL+CanvasServiceLiveMetricsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("LiveMetrics")),
			connect.WithClientOptions(opts...),
		),
		listMetrics: connect.NewClient[protos.ListMetricsRequest, protos.ListMetricsResponse](
			httpClient,
			baseURL+CanvasServiceListMetricsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("ListMetrics")),
			connect.WithClientOptions(opts...),
		),
		queryMetrics: connect.NewClient[protos.QueryMetricsRequest, protos.QueryMetricsResponse](
			httpClient,
			baseURL+CanvasServiceQueryMetricsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("QueryMetrics")),
			connect.WithClientOptions(opts...),
		),
		aggregateMetrics: connect.NewClient[protos.AggregateMetricsRequest, protos.AggregateMetricsResponse](
			httpClient,
			baseURL+CanvasServiceAggregateMetricsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("AggregateMetrics")),
			connect.WithClientOptions(opts...),
		),
		getSystemDiagram: connect.NewClient[protos.GetSystemDiagramRequest, protos.GetSystemDiagramResponse](
			httpClient,
			baseURL+CanvasServiceGetSystemDiagramProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("GetSystemDiagram")),
			connect.WithClientOptions(opts...),
		),
	}
}

// canvasServiceClient implements CanvasServiceClient.
type canvasServiceClient struct {
	createCanvas       *connect.Client[protos.CreateCanvasRequest, protos.CreateCanvasResponse]
	listCanvases       *connect.Client[protos.ListCanvasesRequest, protos.ListCanvasesResponse]
	getCanvas          *connect.Client[protos.GetCanvasRequest, protos.GetCanvasResponse]
	loadFile           *connect.Client[protos.LoadFileRequest, protos.LoadFileResponse]
	useSystem          *connect.Client[protos.UseSystemRequest, protos.UseSystemResponse]
	deleteCanvas       *connect.Client[protos.DeleteCanvasRequest, protos.DeleteCanvasResponse]
	addGenerator       *connect.Client[protos.AddGeneratorRequest, protos.AddGeneratorResponse]
	startAllGenerators *connect.Client[protos.StartAllGeneratorsRequest, protos.StartAllGeneratorsResponse]
	stopAllGenerators  *connect.Client[protos.StopAllGeneratorsRequest, protos.StopAllGeneratorsResponse]
	listGenerators     *connect.Client[protos.ListGeneratorsRequest, protos.ListGeneratorsResponse]
	getGenerator       *connect.Client[protos.GetGeneratorRequest, protos.GetGeneratorResponse]
	updateGenerator    *connect.Client[protos.UpdateGeneratorRequest, protos.UpdateGeneratorResponse]
	pauseGenerator     *connect.Client[protos.PauseGeneratorRequest, protos.PauseGeneratorResponse]
	resumeGenerator    *connect.Client[protos.ResumeGeneratorRequest, protos.ResumeGeneratorResponse]
	deleteGenerator    *connect.Client[protos.DeleteGeneratorRequest, protos.DeleteGeneratorResponse]
	executeTrace       *connect.Client[protos.ExecuteTraceRequest, protos.ExecuteTraceResponse]
	setParameter       *connect.Client[protos.SetParameterRequest, protos.SetParameterResponse]
	getParameters      *connect.Client[protos.GetParametersRequest, protos.GetParametersResponse]
	addMetric          *connect.Client[protos.AddMetricRequest, protos.AddMetricResponse]
	deleteMetric       *connect.Client[protos.DeleteMetricRequest, protos.DeleteMetricResponse]
	liveMetrics        *connect.Client[protos.LiveMetricsRequest, protos.LiveMetricsResponse]
	listMetrics        *connect.Client[protos.ListMetricsRequest, protos.ListMetricsResponse]
	queryMetrics       *connect.Client[protos.QueryMetricsRequest, protos.QueryMetricsResponse]
	aggregateMetrics   *connect.Client[protos.AggregateMetricsRequest, protos.AggregateMetricsResponse]
	getSystemDiagram   *connect.Client[protos.GetSystemDiagramRequest, protos.GetSystemDiagramResponse]
}

// CreateCanvas calls sdl.v1.CanvasService.CreateCanvas.
func (c *canvasServiceClient) CreateCanvas(ctx context.Context, req *connect.Request[protos.CreateCanvasRequest]) (*connect.Response[protos.CreateCanvasResponse], error) {
	return c.createCanvas.CallUnary(ctx, req)
}

// ListCanvases calls sdl.v1.CanvasService.ListCanvases.
func (c *canvasServiceClient) ListCanvases(ctx context.Context, req *connect.Request[protos.ListCanvasesRequest]) (*connect.Response[protos.ListCanvasesResponse], error) {
	return c.listCanvases.CallUnary(ctx, req)
}

// GetCanvas calls sdl.v1.CanvasService.GetCanvas.
func (c *canvasServiceClient) GetCanvas(ctx context.Context, req *connect.Request[protos.GetCanvasRequest]) (*connect.Response[protos.GetCanvasResponse], error) {
	return c.getCanvas.CallUnary(ctx, req)
}

// LoadFile calls sdl.v1.CanvasService.LoadFile.
func (c *canvasServiceClient) LoadFile(ctx context.Context, req *connect.Request[protos.LoadFileRequest]) (*connect.Response[protos.LoadFileResponse], error) {
	return c.loadFile.CallUnary(ctx, req)
}

// UseSystem calls sdl.v1.CanvasService.UseSystem.
func (c *canvasServiceClient) UseSystem(ctx context.Context, req *connect.Request[protos.UseSystemRequest]) (*connect.Response[protos.UseSystemResponse], error) {
	return c.useSystem.CallUnary(ctx, req)
}

// DeleteCanvas calls sdl.v1.CanvasService.DeleteCanvas.
func (c *canvasServiceClient) DeleteCanvas(ctx context.Context, req *connect.Request[protos.DeleteCanvasRequest]) (*connect.Response[protos.DeleteCanvasResponse], error) {
	return c.deleteCanvas.CallUnary(ctx, req)
}

// AddGenerator calls sdl.v1.CanvasService.AddGenerator.
func (c *canvasServiceClient) AddGenerator(ctx context.Context, req *connect.Request[protos.AddGeneratorRequest]) (*connect.Response[protos.AddGeneratorResponse], error) {
	return c.addGenerator.CallUnary(ctx, req)
}

// StartAllGenerators calls sdl.v1.CanvasService.StartAllGenerators.
func (c *canvasServiceClient) StartAllGenerators(ctx context.Context, req *connect.Request[protos.StartAllGeneratorsRequest]) (*connect.Response[protos.StartAllGeneratorsResponse], error) {
	return c.startAllGenerators.CallUnary(ctx, req)
}

// StopAllGenerators calls sdl.v1.CanvasService.StopAllGenerators.
func (c *canvasServiceClient) StopAllGenerators(ctx context.Context, req *connect.Request[protos.StopAllGeneratorsRequest]) (*connect.Response[protos.StopAllGeneratorsResponse], error) {
	return c.stopAllGenerators.CallUnary(ctx, req)
}

// ListGenerators calls sdl.v1.CanvasService.ListGenerators.
func (c *canvasServiceClient) ListGenerators(ctx context.Context, req *connect.Request[protos.ListGeneratorsRequest]) (*connect.Response[protos.ListGeneratorsResponse], error) {
	return c.listGenerators.CallUnary(ctx, req)
}

// GetGenerator calls sdl.v1.CanvasService.GetGenerator.
func (c *canvasServiceClient) GetGenerator(ctx context.Context, req *connect.Request[protos.GetGeneratorRequest]) (*connect.Response[protos.GetGeneratorResponse], error) {
	return c.getGenerator.CallUnary(ctx, req)
}

// UpdateGenerator calls sdl.v1.CanvasService.UpdateGenerator.
func (c *canvasServiceClient) UpdateGenerator(ctx context.Context, req *connect.Request[protos.UpdateGeneratorRequest]) (*connect.Response[protos.UpdateGeneratorResponse], error) {
	return c.updateGenerator.CallUnary(ctx, req)
}

// PauseGenerator calls sdl.v1.CanvasService.PauseGenerator.
func (c *canvasServiceClient) PauseGenerator(ctx context.Context, req *connect.Request[protos.PauseGeneratorRequest]) (*connect.Response[protos.PauseGeneratorResponse], error) {
	return c.pauseGenerator.CallUnary(ctx, req)
}

// ResumeGenerator calls sdl.v1.CanvasService.ResumeGenerator.
func (c *canvasServiceClient) ResumeGenerator(ctx context.Context, req *connect.Request[protos.ResumeGeneratorRequest]) (*connect.Response[protos.ResumeGeneratorResponse], error) {
	return c.resumeGenerator.CallUnary(ctx, req)
}

// DeleteGenerator calls sdl.v1.CanvasService.DeleteGenerator.
func (c *canvasServiceClient) DeleteGenerator(ctx context.Context, req *connect.Request[protos.DeleteGeneratorRequest]) (*connect.Response[protos.DeleteGeneratorResponse], error) {
	return c.deleteGenerator.CallUnary(ctx, req)
}

// ExecuteTrace calls sdl.v1.CanvasService.ExecuteTrace.
func (c *canvasServiceClient) ExecuteTrace(ctx context.Context, req *connect.Request[protos.ExecuteTraceRequest]) (*connect.Response[protos.ExecuteTraceResponse], error) {
	return c.executeTrace.CallUnary(ctx, req)
}

// SetParameter calls sdl.v1.CanvasService.SetParameter.
func (c *canvasServiceClient) SetParameter(ctx context.Context, req *connect.Request[protos.SetParameterRequest]) (*connect.Response[protos.SetParameterResponse], error) {
	return c.setParameter.CallUnary(ctx, req)
}

// GetParameters calls sdl.v1.CanvasService.GetParameters.
func (c *canvasServiceClient) GetParameters(ctx context.Context, req *connect.Request[protos.GetParametersRequest]) (*connect.Response[protos.GetParametersResponse], error) {
	return c.getParameters.CallUnary(ctx, req)
}

// AddMetric calls sdl.v1.CanvasService.AddMetric.
func (c *canvasServiceClient) AddMetric(ctx context.Context, req *connect.Request[protos.AddMetricRequest]) (*connect.Response[protos.AddMetricResponse], error) {
	return c.addMetric.CallUnary(ctx, req)
}

// DeleteMetric calls sdl.v1.CanvasService.DeleteMetric.
func (c *canvasServiceClient) DeleteMetric(ctx context.Context, req *connect.Request[protos.DeleteMetricRequest]) (*connect.Response[protos.DeleteMetricResponse], error) {
	return c.deleteMetric.CallUnary(ctx, req)
}

// LiveMetrics calls sdl.v1.CanvasService.LiveMetrics.
func (c *canvasServiceClient) LiveMetrics(ctx context.Context, req *connect.Request[protos.LiveMetricsRequest]) (*connect.ServerStreamForClient[protos.LiveMetricsResponse], error) {
	return c.liveMetrics.CallServerStream(ctx, req)
}

// ListMetrics calls sdl.v1.CanvasService.ListMetrics.
func (c *canvasServiceClient) ListMetrics(ctx context.Context, req *connect.Request[protos.ListMetricsRequest]) (*connect.Response[protos.ListMetricsResponse], error) {
	return c.listMetrics.CallUnary(ctx, req)
}

// QueryMetrics calls sdl.v1.CanvasService.QueryMetrics.
func (c *canvasServiceClient) QueryMetrics(ctx context.Context, req *connect.Request[protos.QueryMetricsRequest]) (*connect.Response[protos.QueryMetricsResponse], error) {
	return c.queryMetrics.CallUnary(ctx, req)
}

// AggregateMetrics calls sdl.v1.CanvasService.AggregateMetrics.
func (c *canvasServiceClient) AggregateMetrics(ctx context.Context, req *connect.Request[protos.AggregateMetricsRequest]) (*connect.Response[protos.AggregateMetricsResponse], error) {
	return c.aggregateMetrics.CallUnary(ctx, req)
}

// GetSystemDiagram calls sdl.v1.CanvasService.GetSystemDiagram.
func (c *canvasServiceClient) GetSystemDiagram(ctx context.Context, req *connect.Request[protos.GetSystemDiagramRequest]) (*connect.Response[protos.GetSystemDiagramResponse], error) {
	return c.getSystemDiagram.CallUnary(ctx, req)
}

// CanvasServiceHandler is an implementation of the sdl.v1.CanvasService service.
type CanvasServiceHandler interface {
	// *
	// Create a new canvas sesssion.
	CreateCanvas(context.Context, *connect.Request[protos.CreateCanvasRequest]) (*connect.Response[protos.CreateCanvasResponse], error)
	// *
	// List all canvases from a user.
	ListCanvases(context.Context, *connect.Request[protos.ListCanvasesRequest]) (*connect.Response[protos.ListCanvasesResponse], error)
	// *
	// Get details/stats for a particular canvas
	GetCanvas(context.Context, *connect.Request[protos.GetCanvasRequest]) (*connect.Response[protos.GetCanvasResponse], error)
	LoadFile(context.Context, *connect.Request[protos.LoadFileRequest]) (*connect.Response[protos.LoadFileResponse], error)
	UseSystem(context.Context, *connect.Request[protos.UseSystemRequest]) (*connect.Response[protos.UseSystemResponse], error)
	// *
	// Delete a particular canvas.  Frees up resources used by it and all the connections
	DeleteCanvas(context.Context, *connect.Request[protos.DeleteCanvasRequest]) (*connect.Response[protos.DeleteCanvasResponse], error)
	//	----- Generator Operations -----
	//
	// Adds a generator to a canvas's generator_ids list and creates the generator resource.
	AddGenerator(context.Context, *connect.Request[protos.AddGeneratorRequest]) (*connect.Response[protos.AddGeneratorResponse], error)
	// Request to start all generators
	StartAllGenerators(context.Context, *connect.Request[protos.StartAllGeneratorsRequest]) (*connect.Response[protos.StartAllGeneratorsResponse], error)
	// Request to start all generators
	StopAllGenerators(context.Context, *connect.Request[protos.StopAllGeneratorsRequest]) (*connect.Response[protos.StopAllGeneratorsResponse], error)
	ListGenerators(context.Context, *connect.Request[protos.ListGeneratorsRequest]) (*connect.Response[protos.ListGeneratorsResponse], error)
	GetGenerator(context.Context, *connect.Request[protos.GetGeneratorRequest]) (*connect.Response[protos.GetGeneratorResponse], error)
	// Use PATCH for partial updates to a generator (title, content)
	UpdateGenerator(context.Context, *connect.Request[protos.UpdateGeneratorRequest]) (*connect.Response[protos.UpdateGeneratorResponse], error)
	PauseGenerator(context.Context, *connect.Request[protos.PauseGeneratorRequest]) (*connect.Response[protos.PauseGeneratorResponse], error)
	ResumeGenerator(context.Context, *connect.Request[protos.ResumeGeneratorRequest]) (*connect.Response[protos.ResumeGeneratorResponse], error)
	DeleteGenerator(context.Context, *connect.Request[protos.DeleteGeneratorRequest]) (*connect.Response[protos.DeleteGeneratorResponse], error)
	// Execute a single trace for debugging/analysis
	ExecuteTrace(context.Context, *connect.Request[protos.ExecuteTraceRequest]) (*connect.Response[protos.ExecuteTraceResponse], error)
	// ----- Parameter Operations -----
	// Set a component parameter value
	SetParameter(context.Context, *connect.Request[protos.SetParameterRequest]) (*connect.Response[protos.SetParameterResponse], error)
	// Get parameter values
	GetParameters(context.Context, *connect.Request[protos.GetParametersRequest]) (*connect.Response[protos.GetParametersResponse], error)
	//	----- Generator Operations -----
	//
	// Adds a metric to live plot
	AddMetric(context.Context, *connect.Request[protos.AddMetricRequest]) (*connect.Response[protos.AddMetricResponse], error)
	// *
	// Delete a particular metriccanvas.  Frees up resources used by it and all the connections
	DeleteMetric(context.Context, *connect.Request[protos.DeleteMetricRequest]) (*connect.Response[protos.DeleteMetricResponse], error)
	LiveMetrics(context.Context, *connect.Request[protos.LiveMetricsRequest], *connect.ServerStream[protos.LiveMetricsResponse]) error
	// List all available metrics
	ListMetrics(context.Context, *connect.Request[protos.ListMetricsRequest]) (*connect.Response[protos.ListMetricsResponse], error)
	// Query raw metric data points
	QueryMetrics(context.Context, *connect.Request[protos.QueryMetricsRequest]) (*connect.Response[protos.QueryMetricsResponse], error)
	// Get aggregated metric data
	AggregateMetrics(context.Context, *connect.Request[protos.AggregateMetricsRequest]) (*connect.Response[protos.AggregateMetricsResponse], error)
	// Get the system diagram for visualization
	GetSystemDiagram(context.Context, *connect.Request[protos.GetSystemDiagramRequest]) (*connect.Response[protos.GetSystemDiagramResponse], error)
}

// NewCanvasServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCanvasServiceHandler(svc CanvasServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	canvasServiceMethods := protos.File_sdl_v1_canvas_proto.Services().ByName("CanvasService").Methods()
	canvasServiceCreateCanvasHandler := connect.NewUnaryHandler(
		CanvasServiceCreateCanvasProcedure,
		svc.CreateCanvas,
		connect.WithSchema(canvasServiceMethods.ByName("CreateCanvas")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceListCanvasesHandler := connect.NewUnaryHandler(
		CanvasServiceListCanvasesProcedure,
		svc.ListCanvases,
		connect.WithSchema(canvasServiceMethods.ByName("ListCanvases")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceGetCanvasHandler := connect.NewUnaryHandler(
		CanvasServiceGetCanvasProcedure,
		svc.GetCanvas,
		connect.WithSchema(canvasServiceMethods.ByName("GetCanvas")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceLoadFileHandler := connect.NewUnaryHandler(
		CanvasServiceLoadFileProcedure,
		svc.LoadFile,
		connect.WithSchema(canvasServiceMethods.ByName("LoadFile")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceUseSystemHandler := connect.NewUnaryHandler(
		CanvasServiceUseSystemProcedure,
		svc.UseSystem,
		connect.WithSchema(canvasServiceMethods.ByName("UseSystem")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceDeleteCanvasHandler := connect.NewUnaryHandler(
		CanvasServiceDeleteCanvasProcedure,
		svc.DeleteCanvas,
		connect.WithSchema(canvasServiceMethods.ByName("DeleteCanvas")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceAddGeneratorHandler := connect.NewUnaryHandler(
		CanvasServiceAddGeneratorProcedure,
		svc.AddGenerator,
		connect.WithSchema(canvasServiceMethods.ByName("AddGenerator")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceStartAllGeneratorsHandler := connect.NewUnaryHandler(
		CanvasServiceStartAllGeneratorsProcedure,
		svc.StartAllGenerators,
		connect.WithSchema(canvasServiceMethods.ByName("StartAllGenerators")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceStopAllGeneratorsHandler := connect.NewUnaryHandler(
		CanvasServiceStopAllGeneratorsProcedure,
		svc.StopAllGenerators,
		connect.WithSchema(canvasServiceMethods.ByName("StopAllGenerators")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceListGeneratorsHandler := connect.NewUnaryHandler(
		CanvasServiceListGeneratorsProcedure,
		svc.ListGenerators,
		connect.WithSchema(canvasServiceMethods.ByName("ListGenerators")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceGetGeneratorHandler := connect.NewUnaryHandler(
		CanvasServiceGetGeneratorProcedure,
		svc.GetGenerator,
		connect.WithSchema(canvasServiceMethods.ByName("GetGenerator")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceUpdateGeneratorHandler := connect.NewUnaryHandler(
		CanvasServiceUpdateGeneratorProcedure,
		svc.UpdateGenerator,
		connect.WithSchema(canvasServiceMethods.ByName("UpdateGenerator")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServicePauseGeneratorHandler := connect.NewUnaryHandler(
		CanvasServicePauseGeneratorProcedure,
		svc.PauseGenerator,
		connect.WithSchema(canvasServiceMethods.ByName("PauseGenerator")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceResumeGeneratorHandler := connect.NewUnaryHandler(
		CanvasServiceResumeGeneratorProcedure,
		svc.ResumeGenerator,
		connect.WithSchema(canvasServiceMethods.ByName("ResumeGenerator")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceDeleteGeneratorHandler := connect.NewUnaryHandler(
		CanvasServiceDeleteGeneratorProcedure,
		svc.DeleteGenerator,
		connect.WithSchema(canvasServiceMethods.ByName("DeleteGenerator")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceExecuteTraceHandler := connect.NewUnaryHandler(
		CanvasServiceExecuteTraceProcedure,
		svc.ExecuteTrace,
		connect.WithSchema(canvasServiceMethods.ByName("ExecuteTrace")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceSetParameterHandler := connect.NewUnaryHandler(
		CanvasServiceSetParameterProcedure,
		svc.SetParameter,
		connect.WithSchema(canvasServiceMethods.ByName("SetParameter")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceGetParametersHandler := connect.NewUnaryHandler(
		CanvasServiceGetParametersProcedure,
		svc.GetParameters,
		connect.WithSchema(canvasServiceMethods.ByName("GetParameters")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceAddMetricHandler := connect.NewUnaryHandler(
		CanvasServiceAddMetricProcedure,
		svc.AddMetric,
		connect.WithSchema(canvasServiceMethods.ByName("AddMetric")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceDeleteMetricHandler := connect.NewUnaryHandler(
		CanvasServiceDeleteMetricProcedure,
		svc.DeleteMetric,
		connect.WithSchema(canvasServiceMethods.ByName("DeleteMetric")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceLiveMetricsHandler := connect.NewServerStreamHandler(
		CanvasServiceLiveMetricsProcedure,
		svc.LiveMetrics,
		connect.WithSchema(canvasServiceMethods.ByName("LiveMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceListMetricsHandler := connect.NewUnaryHandler(
		CanvasServiceListMetricsProcedure,
		svc.ListMetrics,
		connect.WithSchema(canvasServiceMethods.ByName("ListMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceQueryMetricsHandler := connect.NewUnaryHandler(
		CanvasServiceQueryMetricsProcedure,
		svc.QueryMetrics,
		connect.WithSchema(canvasServiceMethods.ByName("QueryMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceAggregateMetricsHandler := connect.NewUnaryHandler(
		CanvasServiceAggregateMetricsProcedure,
		svc.AggregateMetrics,
		connect.WithSchema(canvasServiceMethods.ByName("AggregateMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceGetSystemDiagramHandler := connect.NewUnaryHandler(
		CanvasServiceGetSystemDiagramProcedure,
		svc.GetSystemDiagram,
		connect.WithSchema(canvasServiceMethods.ByName("GetSystemDiagram")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sdl.v1.CanvasService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CanvasServiceCreateCanvasProcedure:
			canvasServiceCreateCanvasHandler.ServeHTTP(w, r)
		case CanvasServiceListCanvasesProcedure:
			canvasServiceListCanvasesHandler.ServeHTTP(w, r)
		case CanvasServiceGetCanvasProcedure:
			canvasServiceGetCanvasHandler.ServeHTTP(w, r)
		case CanvasServiceLoadFileProcedure:
			canvasServiceLoadFileHandler.ServeHTTP(w, r)
		case CanvasServiceUseSystemProcedure:
			canvasServiceUseSystemHandler.ServeHTTP(w, r)
		case CanvasServiceDeleteCanvasProcedure:
			canvasServiceDeleteCanvasHandler.ServeHTTP(w, r)
		case CanvasServiceAddGeneratorProcedure:
			canvasServiceAddGeneratorHandler.ServeHTTP(w, r)
		case CanvasServiceStartAllGeneratorsProcedure:
			canvasServiceStartAllGeneratorsHandler.ServeHTTP(w, r)
		case CanvasServiceStopAllGeneratorsProcedure:
			canvasServiceStopAllGeneratorsHandler.ServeHTTP(w, r)
		case CanvasServiceListGeneratorsProcedure:
			canvasServiceListGeneratorsHandler.ServeHTTP(w, r)
		case CanvasServiceGetGeneratorProcedure:
			canvasServiceGetGeneratorHandler.ServeHTTP(w, r)
		case CanvasServiceUpdateGeneratorProcedure:
			canvasServiceUpdateGeneratorHandler.ServeHTTP(w, r)
		case CanvasServicePauseGeneratorProcedure:
			canvasServicePauseGeneratorHandler.ServeHTTP(w, r)
		case CanvasServiceResumeGeneratorProcedure:
			canvasServiceResumeGeneratorHandler.ServeHTTP(w, r)
		case CanvasServiceDeleteGeneratorProcedure:
			canvasServiceDeleteGeneratorHandler.ServeHTTP(w, r)
		case CanvasServiceExecuteTraceProcedure:
			canvasServiceExecuteTraceHandler.ServeHTTP(w, r)
		case CanvasServiceSetParameterProcedure:
			canvasServiceSetParameterHandler.ServeHTTP(w, r)
		case CanvasServiceGetParametersProcedure:
			canvasServiceGetParametersHandler.ServeHTTP(w, r)
		case CanvasServiceAddMetricProcedure:
			canvasServiceAddMetricHandler.ServeHTTP(w, r)
		case CanvasServiceDeleteMetricProcedure:
			canvasServiceDeleteMetricHandler.ServeHTTP(w, r)
		case CanvasServiceLiveMetricsProcedure:
			canvasServiceLiveMetricsHandler.ServeHTTP(w, r)
		case CanvasServiceListMetricsProcedure:
			canvasServiceListMetricsHandler.ServeHTTP(w, r)
		case CanvasServiceQueryMetricsProcedure:
			canvasServiceQueryMetricsHandler.ServeHTTP(w, r)
		case CanvasServiceAggregateMetricsProcedure:
			canvasServiceAggregateMetricsHandler.ServeHTTP(w, r)
		case CanvasServiceGetSystemDiagramProcedure:
			canvasServiceGetSystemDiagramHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCanvasServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCanvasServiceHandler struct{}

func (UnimplementedCanvasServiceHandler) CreateCanvas(context.Context, *connect.Request[protos.CreateCanvasRequest]) (*connect.Response[protos.CreateCanvasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.CreateCanvas is not implemented"))
}

func (UnimplementedCanvasServiceHandler) ListCanvases(context.Context, *connect.Request[protos.ListCanvasesRequest]) (*connect.Response[protos.ListCanvasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.ListCanvases is not implemented"))
}

func (UnimplementedCanvasServiceHandler) GetCanvas(context.Context, *connect.Request[protos.GetCanvasRequest]) (*connect.Response[protos.GetCanvasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.GetCanvas is not implemented"))
}

func (UnimplementedCanvasServiceHandler) LoadFile(context.Context, *connect.Request[protos.LoadFileRequest]) (*connect.Response[protos.LoadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.LoadFile is not implemented"))
}

func (UnimplementedCanvasServiceHandler) UseSystem(context.Context, *connect.Request[protos.UseSystemRequest]) (*connect.Response[protos.UseSystemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.UseSystem is not implemented"))
}

func (UnimplementedCanvasServiceHandler) DeleteCanvas(context.Context, *connect.Request[protos.DeleteCanvasRequest]) (*connect.Response[protos.DeleteCanvasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.DeleteCanvas is not implemented"))
}

func (UnimplementedCanvasServiceHandler) AddGenerator(context.Context, *connect.Request[protos.AddGeneratorRequest]) (*connect.Response[protos.AddGeneratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.AddGenerator is not implemented"))
}

func (UnimplementedCanvasServiceHandler) StartAllGenerators(context.Context, *connect.Request[protos.StartAllGeneratorsRequest]) (*connect.Response[protos.StartAllGeneratorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.StartAllGenerators is not implemented"))
}

func (UnimplementedCanvasServiceHandler) StopAllGenerators(context.Context, *connect.Request[protos.StopAllGeneratorsRequest]) (*connect.Response[protos.StopAllGeneratorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.StopAllGenerators is not implemented"))
}

func (UnimplementedCanvasServiceHandler) ListGenerators(context.Context, *connect.Request[protos.ListGeneratorsRequest]) (*connect.Response[protos.ListGeneratorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.ListGenerators is not implemented"))
}

func (UnimplementedCanvasServiceHandler) GetGenerator(context.Context, *connect.Request[protos.GetGeneratorRequest]) (*connect.Response[protos.GetGeneratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.GetGenerator is not implemented"))
}

func (UnimplementedCanvasServiceHandler) UpdateGenerator(context.Context, *connect.Request[protos.UpdateGeneratorRequest]) (*connect.Response[protos.UpdateGeneratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.UpdateGenerator is not implemented"))
}

func (UnimplementedCanvasServiceHandler) PauseGenerator(context.Context, *connect.Request[protos.PauseGeneratorRequest]) (*connect.Response[protos.PauseGeneratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.PauseGenerator is not implemented"))
}

func (UnimplementedCanvasServiceHandler) ResumeGenerator(context.Context, *connect.Request[protos.ResumeGeneratorRequest]) (*connect.Response[protos.ResumeGeneratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.ResumeGenerator is not implemented"))
}

func (UnimplementedCanvasServiceHandler) DeleteGenerator(context.Context, *connect.Request[protos.DeleteGeneratorRequest]) (*connect.Response[protos.DeleteGeneratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.DeleteGenerator is not implemented"))
}

func (UnimplementedCanvasServiceHandler) ExecuteTrace(context.Context, *connect.Request[protos.ExecuteTraceRequest]) (*connect.Response[protos.ExecuteTraceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.ExecuteTrace is not implemented"))
}

func (UnimplementedCanvasServiceHandler) SetParameter(context.Context, *connect.Request[protos.SetParameterRequest]) (*connect.Response[protos.SetParameterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.SetParameter is not implemented"))
}

func (UnimplementedCanvasServiceHandler) GetParameters(context.Context, *connect.Request[protos.GetParametersRequest]) (*connect.Response[protos.GetParametersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.GetParameters is not implemented"))
}

func (UnimplementedCanvasServiceHandler) AddMetric(context.Context, *connect.Request[protos.AddMetricRequest]) (*connect.Response[protos.AddMetricResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.AddMetric is not implemented"))
}

func (UnimplementedCanvasServiceHandler) DeleteMetric(context.Context, *connect.Request[protos.DeleteMetricRequest]) (*connect.Response[protos.DeleteMetricResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.DeleteMetric is not implemented"))
}

func (UnimplementedCanvasServiceHandler) LiveMetrics(context.Context, *connect.Request[protos.LiveMetricsRequest], *connect.ServerStream[protos.LiveMetricsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.LiveMetrics is not implemented"))
}

func (UnimplementedCanvasServiceHandler) ListMetrics(context.Context, *connect.Request[protos.ListMetricsRequest]) (*connect.Response[protos.ListMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.ListMetrics is not implemented"))
}

func (UnimplementedCanvasServiceHandler) QueryMetrics(context.Context, *connect.Request[protos.QueryMetricsRequest]) (*connect.Response[protos.QueryMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.QueryMetrics is not implemented"))
}

func (UnimplementedCanvasServiceHandler) AggregateMetrics(context.Context, *connect.Request[protos.AggregateMetricsRequest]) (*connect.Response[protos.AggregateMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.AggregateMetrics is not implemented"))
}

func (UnimplementedCanvasServiceHandler) GetSystemDiagram(context.Context, *connect.Request[protos.GetSystemDiagramRequest]) (*connect.Response[protos.GetSystemDiagramResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.GetSystemDiagram is not implemented"))
}
