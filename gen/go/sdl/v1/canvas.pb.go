// protos/sdl/v1/canvas.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: sdl/v1/canvas.proto

package protos

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Canvas creation request object
type CreateCanvasRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Canvas being updated
	Canvas        *Canvas `protobuf:"bytes,1,opt,name=canvas,proto3" json:"canvas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCanvasRequest) Reset() {
	*x = CreateCanvasRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCanvasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCanvasRequest) ProtoMessage() {}

func (x *CreateCanvasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCanvasRequest.ProtoReflect.Descriptor instead.
func (*CreateCanvasRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCanvasRequest) GetCanvas() *Canvas {
	if x != nil {
		return x.Canvas
	}
	return nil
}

// *
// Response of an canvas creation.
type CreateCanvasResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Canvas being created
	Canvas *Canvas `protobuf:"bytes,1,opt,name=canvas,proto3" json:"canvas,omitempty"`
	// *
	// Error specific to a field if there are any errors.
	FieldErrors   map[string]string `protobuf:"bytes,2,rep,name=field_errors,json=fieldErrors,proto3" json:"field_errors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCanvasResponse) Reset() {
	*x = CreateCanvasResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCanvasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCanvasResponse) ProtoMessage() {}

func (x *CreateCanvasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCanvasResponse.ProtoReflect.Descriptor instead.
func (*CreateCanvasResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCanvasResponse) GetCanvas() *Canvas {
	if x != nil {
		return x.Canvas
	}
	return nil
}

func (x *CreateCanvasResponse) GetFieldErrors() map[string]string {
	if x != nil {
		return x.FieldErrors
	}
	return nil
}

// *
// An canvas search request.  For now only paginations params are provided.
type ListCanvasesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pagination info
	Pagination    *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCanvasesRequest) Reset() {
	*x = ListCanvasesRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCanvasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCanvasesRequest) ProtoMessage() {}

func (x *ListCanvasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCanvasesRequest.ProtoReflect.Descriptor instead.
func (*ListCanvasesRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{2}
}

func (x *ListCanvasesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// *
// Response of a canvas search/listing.
type ListCanvasesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The list of canvases found as part of this response.
	Canvases      []*Canvas           `protobuf:"bytes,1,rep,name=canvases,proto3" json:"canvases,omitempty"`
	Pagination    *PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCanvasesResponse) Reset() {
	*x = ListCanvasesResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCanvasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCanvasesResponse) ProtoMessage() {}

func (x *ListCanvasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCanvasesResponse.ProtoReflect.Descriptor instead.
func (*ListCanvasesResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{3}
}

func (x *ListCanvasesResponse) GetCanvases() []*Canvas {
	if x != nil {
		return x.Canvases
	}
	return nil
}

func (x *ListCanvasesResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// *
// Request to get a canvas.
type GetCanvasRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// ID of the canvas to be fetched
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCanvasRequest) Reset() {
	*x = GetCanvasRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCanvasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCanvasRequest) ProtoMessage() {}

func (x *GetCanvasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCanvasRequest.ProtoReflect.Descriptor instead.
func (*GetCanvasRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{4}
}

func (x *GetCanvasRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// *
// Canvas get response
type GetCanvasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Canvas        *Canvas                `protobuf:"bytes,1,opt,name=canvas,proto3" json:"canvas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCanvasResponse) Reset() {
	*x = GetCanvasResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCanvasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCanvasResponse) ProtoMessage() {}

func (x *GetCanvasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCanvasResponse.ProtoReflect.Descriptor instead.
func (*GetCanvasResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{5}
}

func (x *GetCanvasResponse) GetCanvas() *Canvas {
	if x != nil {
		return x.Canvas
	}
	return nil
}

// *
// Request to delete an canvas.
type DeleteCanvasRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// ID of the canvas to be deleted.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCanvasRequest) Reset() {
	*x = DeleteCanvasRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCanvasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCanvasRequest) ProtoMessage() {}

func (x *DeleteCanvasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCanvasRequest.ProtoReflect.Descriptor instead.
func (*DeleteCanvasRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCanvasRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// *
// Canvas deletion response
type DeleteCanvasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCanvasResponse) Reset() {
	*x = DeleteCanvasResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCanvasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCanvasResponse) ProtoMessage() {}

func (x *DeleteCanvasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCanvasResponse.ProtoReflect.Descriptor instead.
func (*DeleteCanvasResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{7}
}

type AddGeneratorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generator     *Generator             `protobuf:"bytes,1,opt,name=generator,proto3" json:"generator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddGeneratorRequest) Reset() {
	*x = AddGeneratorRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGeneratorRequest) ProtoMessage() {}

func (x *AddGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGeneratorRequest.ProtoReflect.Descriptor instead.
func (*AddGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{8}
}

func (x *AddGeneratorRequest) GetGenerator() *Generator {
	if x != nil {
		return x.Generator
	}
	return nil
}

type AddGeneratorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generator     *Generator             `protobuf:"bytes,1,opt,name=generator,proto3" json:"generator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddGeneratorResponse) Reset() {
	*x = AddGeneratorResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGeneratorResponse) ProtoMessage() {}

func (x *AddGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGeneratorResponse.ProtoReflect.Descriptor instead.
func (*AddGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{9}
}

func (x *AddGeneratorResponse) GetGenerator() *Generator {
	if x != nil {
		return x.Generator
	}
	return nil
}

type StartAllGeneratorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartAllGeneratorsRequest) Reset() {
	*x = StartAllGeneratorsRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartAllGeneratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAllGeneratorsRequest) ProtoMessage() {}

func (x *StartAllGeneratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAllGeneratorsRequest.ProtoReflect.Descriptor instead.
func (*StartAllGeneratorsRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{10}
}

func (x *StartAllGeneratorsRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type StartAllGeneratorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartAllGeneratorsResponse) Reset() {
	*x = StartAllGeneratorsResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartAllGeneratorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAllGeneratorsResponse) ProtoMessage() {}

func (x *StartAllGeneratorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAllGeneratorsResponse.ProtoReflect.Descriptor instead.
func (*StartAllGeneratorsResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{11}
}

type StopAllGeneratorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopAllGeneratorsRequest) Reset() {
	*x = StopAllGeneratorsRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAllGeneratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAllGeneratorsRequest) ProtoMessage() {}

func (x *StopAllGeneratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAllGeneratorsRequest.ProtoReflect.Descriptor instead.
func (*StopAllGeneratorsRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{12}
}

func (x *StopAllGeneratorsRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type StopAllGeneratorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopAllGeneratorsResponse) Reset() {
	*x = StopAllGeneratorsResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAllGeneratorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAllGeneratorsResponse) ProtoMessage() {}

func (x *StopAllGeneratorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAllGeneratorsResponse.ProtoReflect.Descriptor instead.
func (*StopAllGeneratorsResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{13}
}

type GetGeneratorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	GeneratorId   string                 `protobuf:"bytes,2,opt,name=generator_id,json=generatorId,proto3" json:"generator_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGeneratorRequest) Reset() {
	*x = GetGeneratorRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGeneratorRequest) ProtoMessage() {}

func (x *GetGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGeneratorRequest.ProtoReflect.Descriptor instead.
func (*GetGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{14}
}

func (x *GetGeneratorRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *GetGeneratorRequest) GetGeneratorId() string {
	if x != nil {
		return x.GeneratorId
	}
	return ""
}

type GetGeneratorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generator     *Generator             `protobuf:"bytes,1,opt,name=generator,proto3" json:"generator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGeneratorResponse) Reset() {
	*x = GetGeneratorResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGeneratorResponse) ProtoMessage() {}

func (x *GetGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGeneratorResponse.ProtoReflect.Descriptor instead.
func (*GetGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{15}
}

func (x *GetGeneratorResponse) GetGenerator() *Generator {
	if x != nil {
		return x.Generator
	}
	return nil
}

// Consolidate generator updates into one RPC using PATCH and FieldMask
type UpdateGeneratorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Generator object containing *only* the fields to be updated.
	// The server will use the update_mask to know which fields from
	// this 'generator' message to apply to the stored generator.
	Generator     *Generator             `protobuf:"bytes,1,opt,name=generator,proto3" json:"generator,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"` // e.g., paths: "title", paths: "text_content"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateGeneratorRequest) Reset() {
	*x = UpdateGeneratorRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGeneratorRequest) ProtoMessage() {}

func (x *UpdateGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGeneratorRequest.ProtoReflect.Descriptor instead.
func (*UpdateGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateGeneratorRequest) GetGenerator() *Generator {
	if x != nil {
		return x.Generator
	}
	return nil
}

func (x *UpdateGeneratorRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateGeneratorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generator     *Generator             `protobuf:"bytes,1,opt,name=generator,proto3" json:"generator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateGeneratorResponse) Reset() {
	*x = UpdateGeneratorResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGeneratorResponse) ProtoMessage() {}

func (x *UpdateGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGeneratorResponse.ProtoReflect.Descriptor instead.
func (*UpdateGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateGeneratorResponse) GetGenerator() *Generator {
	if x != nil {
		return x.Generator
	}
	return nil
}

type ResumeGeneratorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	GeneratorId   string                 `protobuf:"bytes,2,opt,name=generator_id,json=generatorId,proto3" json:"generator_id,omitempty"` // The generator being moved
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeGeneratorRequest) Reset() {
	*x = ResumeGeneratorRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeGeneratorRequest) ProtoMessage() {}

func (x *ResumeGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeGeneratorRequest.ProtoReflect.Descriptor instead.
func (*ResumeGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{18}
}

func (x *ResumeGeneratorRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *ResumeGeneratorRequest) GetGeneratorId() string {
	if x != nil {
		return x.GeneratorId
	}
	return ""
}

type ResumeGeneratorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeGeneratorResponse) Reset() {
	*x = ResumeGeneratorResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeGeneratorResponse) ProtoMessage() {}

func (x *ResumeGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeGeneratorResponse.ProtoReflect.Descriptor instead.
func (*ResumeGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{19}
}

type PauseGeneratorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	GeneratorId   string                 `protobuf:"bytes,2,opt,name=generator_id,json=generatorId,proto3" json:"generator_id,omitempty"` // The generator being moved
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseGeneratorRequest) Reset() {
	*x = PauseGeneratorRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseGeneratorRequest) ProtoMessage() {}

func (x *PauseGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseGeneratorRequest.ProtoReflect.Descriptor instead.
func (*PauseGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{20}
}

func (x *PauseGeneratorRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *PauseGeneratorRequest) GetGeneratorId() string {
	if x != nil {
		return x.GeneratorId
	}
	return ""
}

type PauseGeneratorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseGeneratorResponse) Reset() {
	*x = PauseGeneratorResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseGeneratorResponse) ProtoMessage() {}

func (x *PauseGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseGeneratorResponse.ProtoReflect.Descriptor instead.
func (*PauseGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{21}
}

type DeleteGeneratorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	GeneratorId   string                 `protobuf:"bytes,2,opt,name=generator_id,json=generatorId,proto3" json:"generator_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteGeneratorRequest) Reset() {
	*x = DeleteGeneratorRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGeneratorRequest) ProtoMessage() {}

func (x *DeleteGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGeneratorRequest.ProtoReflect.Descriptor instead.
func (*DeleteGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteGeneratorRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *DeleteGeneratorRequest) GetGeneratorId() string {
	if x != nil {
		return x.GeneratorId
	}
	return ""
}

type DeleteGeneratorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteGeneratorResponse) Reset() {
	*x = DeleteGeneratorResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGeneratorResponse) ProtoMessage() {}

func (x *DeleteGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGeneratorResponse.ProtoReflect.Descriptor instead.
func (*DeleteGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{23}
}

type LoadFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	SdlFilePath   string                 `protobuf:"bytes,2,opt,name=sdl_file_path,json=sdlFilePath,proto3" json:"sdl_file_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadFileRequest) Reset() {
	*x = LoadFileRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadFileRequest) ProtoMessage() {}

func (x *LoadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadFileRequest.ProtoReflect.Descriptor instead.
func (*LoadFileRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{24}
}

func (x *LoadFileRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *LoadFileRequest) GetSdlFilePath() string {
	if x != nil {
		return x.SdlFilePath
	}
	return ""
}

type LoadFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadFileResponse) Reset() {
	*x = LoadFileResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadFileResponse) ProtoMessage() {}

func (x *LoadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadFileResponse.ProtoReflect.Descriptor instead.
func (*LoadFileResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{25}
}

type UseSystemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	SystemName    string                 `protobuf:"bytes,2,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UseSystemRequest) Reset() {
	*x = UseSystemRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseSystemRequest) ProtoMessage() {}

func (x *UseSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseSystemRequest.ProtoReflect.Descriptor instead.
func (*UseSystemRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{26}
}

func (x *UseSystemRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *UseSystemRequest) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

type UseSystemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UseSystemResponse) Reset() {
	*x = UseSystemResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseSystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseSystemResponse) ProtoMessage() {}

func (x *UseSystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseSystemResponse.ProtoReflect.Descriptor instead.
func (*UseSystemResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{27}
}

var File_sdl_v1_canvas_proto protoreflect.FileDescriptor

var file_sdl_v1_canvas_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x73, 0x64, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x73, 0x64, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x22, 0xd0, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x7e, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x46, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x64, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x47, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x38, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x70,
	0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49,
	0x64, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x86,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x4a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x19, 0x0a,
	0x17, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x15, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x61, 0x75, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x52, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x64, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x64, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x55, 0x73,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xbc, 0x0e, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x62, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0x71, 0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x17, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x64, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22,
	0x27, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x73, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x3d, 0x2a,
	0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x75, 0x73, 0x65, 0x12, 0x66, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x12, 0x1b, 0x2e,
	0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x64, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x2a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x3a, 0x01, 0x2a, 0x1a, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x53,
	0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x20, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c,
	0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a,
	0x1a, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x74,
	0x6f, 0x70, 0x61, 0x6c, 0x6c, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9b, 0x01,
	0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1e, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x32, 0x3c, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x9c, 0x01, 0x0a, 0x0e,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d,
	0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a, 0x22, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e,
	0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x3a, 0x01, 0x2a, 0x22, 0x41, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x7b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x8e, 0x01,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1e, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a, 0x32, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x7b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x69,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x15, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x64, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x53, 0x64, 0x6c, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x06, 0x53, 0x64, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12, 0x53, 0x64, 0x6c,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x07, 0x53, 0x64, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_sdl_v1_canvas_proto_rawDescOnce sync.Once
	file_sdl_v1_canvas_proto_rawDescData []byte
)

func file_sdl_v1_canvas_proto_rawDescGZIP() []byte {
	file_sdl_v1_canvas_proto_rawDescOnce.Do(func() {
		file_sdl_v1_canvas_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sdl_v1_canvas_proto_rawDesc), len(file_sdl_v1_canvas_proto_rawDesc)))
	})
	return file_sdl_v1_canvas_proto_rawDescData
}

var file_sdl_v1_canvas_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_sdl_v1_canvas_proto_goTypes = []any{
	(*CreateCanvasRequest)(nil),        // 0: sdl.v1.CreateCanvasRequest
	(*CreateCanvasResponse)(nil),       // 1: sdl.v1.CreateCanvasResponse
	(*ListCanvasesRequest)(nil),        // 2: sdl.v1.ListCanvasesRequest
	(*ListCanvasesResponse)(nil),       // 3: sdl.v1.ListCanvasesResponse
	(*GetCanvasRequest)(nil),           // 4: sdl.v1.GetCanvasRequest
	(*GetCanvasResponse)(nil),          // 5: sdl.v1.GetCanvasResponse
	(*DeleteCanvasRequest)(nil),        // 6: sdl.v1.DeleteCanvasRequest
	(*DeleteCanvasResponse)(nil),       // 7: sdl.v1.DeleteCanvasResponse
	(*AddGeneratorRequest)(nil),        // 8: sdl.v1.AddGeneratorRequest
	(*AddGeneratorResponse)(nil),       // 9: sdl.v1.AddGeneratorResponse
	(*StartAllGeneratorsRequest)(nil),  // 10: sdl.v1.StartAllGeneratorsRequest
	(*StartAllGeneratorsResponse)(nil), // 11: sdl.v1.StartAllGeneratorsResponse
	(*StopAllGeneratorsRequest)(nil),   // 12: sdl.v1.StopAllGeneratorsRequest
	(*StopAllGeneratorsResponse)(nil),  // 13: sdl.v1.StopAllGeneratorsResponse
	(*GetGeneratorRequest)(nil),        // 14: sdl.v1.GetGeneratorRequest
	(*GetGeneratorResponse)(nil),       // 15: sdl.v1.GetGeneratorResponse
	(*UpdateGeneratorRequest)(nil),     // 16: sdl.v1.UpdateGeneratorRequest
	(*UpdateGeneratorResponse)(nil),    // 17: sdl.v1.UpdateGeneratorResponse
	(*ResumeGeneratorRequest)(nil),     // 18: sdl.v1.ResumeGeneratorRequest
	(*ResumeGeneratorResponse)(nil),    // 19: sdl.v1.ResumeGeneratorResponse
	(*PauseGeneratorRequest)(nil),      // 20: sdl.v1.PauseGeneratorRequest
	(*PauseGeneratorResponse)(nil),     // 21: sdl.v1.PauseGeneratorResponse
	(*DeleteGeneratorRequest)(nil),     // 22: sdl.v1.DeleteGeneratorRequest
	(*DeleteGeneratorResponse)(nil),    // 23: sdl.v1.DeleteGeneratorResponse
	(*LoadFileRequest)(nil),            // 24: sdl.v1.LoadFileRequest
	(*LoadFileResponse)(nil),           // 25: sdl.v1.LoadFileResponse
	(*UseSystemRequest)(nil),           // 26: sdl.v1.UseSystemRequest
	(*UseSystemResponse)(nil),          // 27: sdl.v1.UseSystemResponse
	nil,                                // 28: sdl.v1.CreateCanvasResponse.FieldErrorsEntry
	(*Canvas)(nil),                     // 29: sdl.v1.Canvas
	(*Pagination)(nil),                 // 30: sdl.v1.Pagination
	(*PaginationResponse)(nil),         // 31: sdl.v1.PaginationResponse
	(*Generator)(nil),                  // 32: sdl.v1.Generator
	(*fieldmaskpb.FieldMask)(nil),      // 33: google.protobuf.FieldMask
}
var file_sdl_v1_canvas_proto_depIdxs = []int32{
	29, // 0: sdl.v1.CreateCanvasRequest.canvas:type_name -> sdl.v1.Canvas
	29, // 1: sdl.v1.CreateCanvasResponse.canvas:type_name -> sdl.v1.Canvas
	28, // 2: sdl.v1.CreateCanvasResponse.field_errors:type_name -> sdl.v1.CreateCanvasResponse.FieldErrorsEntry
	30, // 3: sdl.v1.ListCanvasesRequest.pagination:type_name -> sdl.v1.Pagination
	29, // 4: sdl.v1.ListCanvasesResponse.canvases:type_name -> sdl.v1.Canvas
	31, // 5: sdl.v1.ListCanvasesResponse.pagination:type_name -> sdl.v1.PaginationResponse
	29, // 6: sdl.v1.GetCanvasResponse.canvas:type_name -> sdl.v1.Canvas
	32, // 7: sdl.v1.AddGeneratorRequest.generator:type_name -> sdl.v1.Generator
	32, // 8: sdl.v1.AddGeneratorResponse.generator:type_name -> sdl.v1.Generator
	32, // 9: sdl.v1.GetGeneratorResponse.generator:type_name -> sdl.v1.Generator
	32, // 10: sdl.v1.UpdateGeneratorRequest.generator:type_name -> sdl.v1.Generator
	33, // 11: sdl.v1.UpdateGeneratorRequest.update_mask:type_name -> google.protobuf.FieldMask
	32, // 12: sdl.v1.UpdateGeneratorResponse.generator:type_name -> sdl.v1.Generator
	0,  // 13: sdl.v1.CanvasService.CreateCanvas:input_type -> sdl.v1.CreateCanvasRequest
	2,  // 14: sdl.v1.CanvasService.ListCanvases:input_type -> sdl.v1.ListCanvasesRequest
	4,  // 15: sdl.v1.CanvasService.GetCanvas:input_type -> sdl.v1.GetCanvasRequest
	24, // 16: sdl.v1.CanvasService.LoadFile:input_type -> sdl.v1.LoadFileRequest
	26, // 17: sdl.v1.CanvasService.UseSystem:input_type -> sdl.v1.UseSystemRequest
	6,  // 18: sdl.v1.CanvasService.DeleteCanvas:input_type -> sdl.v1.DeleteCanvasRequest
	8,  // 19: sdl.v1.CanvasService.AddGenerator:input_type -> sdl.v1.AddGeneratorRequest
	10, // 20: sdl.v1.CanvasService.StartAllGenerators:input_type -> sdl.v1.StartAllGeneratorsRequest
	12, // 21: sdl.v1.CanvasService.StopAllGenerators:input_type -> sdl.v1.StopAllGeneratorsRequest
	14, // 22: sdl.v1.CanvasService.GetGenerator:input_type -> sdl.v1.GetGeneratorRequest
	16, // 23: sdl.v1.CanvasService.UpdateGenerator:input_type -> sdl.v1.UpdateGeneratorRequest
	20, // 24: sdl.v1.CanvasService.PauseGenerator:input_type -> sdl.v1.PauseGeneratorRequest
	18, // 25: sdl.v1.CanvasService.ResumeGenerator:input_type -> sdl.v1.ResumeGeneratorRequest
	22, // 26: sdl.v1.CanvasService.DeleteGenerator:input_type -> sdl.v1.DeleteGeneratorRequest
	1,  // 27: sdl.v1.CanvasService.CreateCanvas:output_type -> sdl.v1.CreateCanvasResponse
	3,  // 28: sdl.v1.CanvasService.ListCanvases:output_type -> sdl.v1.ListCanvasesResponse
	5,  // 29: sdl.v1.CanvasService.GetCanvas:output_type -> sdl.v1.GetCanvasResponse
	25, // 30: sdl.v1.CanvasService.LoadFile:output_type -> sdl.v1.LoadFileResponse
	27, // 31: sdl.v1.CanvasService.UseSystem:output_type -> sdl.v1.UseSystemResponse
	7,  // 32: sdl.v1.CanvasService.DeleteCanvas:output_type -> sdl.v1.DeleteCanvasResponse
	9,  // 33: sdl.v1.CanvasService.AddGenerator:output_type -> sdl.v1.AddGeneratorResponse
	11, // 34: sdl.v1.CanvasService.StartAllGenerators:output_type -> sdl.v1.StartAllGeneratorsResponse
	13, // 35: sdl.v1.CanvasService.StopAllGenerators:output_type -> sdl.v1.StopAllGeneratorsResponse
	15, // 36: sdl.v1.CanvasService.GetGenerator:output_type -> sdl.v1.GetGeneratorResponse
	17, // 37: sdl.v1.CanvasService.UpdateGenerator:output_type -> sdl.v1.UpdateGeneratorResponse
	21, // 38: sdl.v1.CanvasService.PauseGenerator:output_type -> sdl.v1.PauseGeneratorResponse
	19, // 39: sdl.v1.CanvasService.ResumeGenerator:output_type -> sdl.v1.ResumeGeneratorResponse
	23, // 40: sdl.v1.CanvasService.DeleteGenerator:output_type -> sdl.v1.DeleteGeneratorResponse
	27, // [27:41] is the sub-list for method output_type
	13, // [13:27] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_sdl_v1_canvas_proto_init() }
func file_sdl_v1_canvas_proto_init() {
	if File_sdl_v1_canvas_proto != nil {
		return
	}
	file_sdl_v1_models_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sdl_v1_canvas_proto_rawDesc), len(file_sdl_v1_canvas_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sdl_v1_canvas_proto_goTypes,
		DependencyIndexes: file_sdl_v1_canvas_proto_depIdxs,
		MessageInfos:      file_sdl_v1_canvas_proto_msgTypes,
	}.Build()
	File_sdl_v1_canvas_proto = out.File
	file_sdl_v1_canvas_proto_goTypes = nil
	file_sdl_v1_canvas_proto_depIdxs = nil
}
