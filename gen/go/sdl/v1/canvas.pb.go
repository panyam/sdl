// protos/sdl/v1/canvas.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: sdl/v1/canvas.proto

package protos

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Canvas creation request object
type CreateCanvasRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Canvas being updated
	Canvas        *Canvas `protobuf:"bytes,1,opt,name=canvas,proto3" json:"canvas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCanvasRequest) Reset() {
	*x = CreateCanvasRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCanvasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCanvasRequest) ProtoMessage() {}

func (x *CreateCanvasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCanvasRequest.ProtoReflect.Descriptor instead.
func (*CreateCanvasRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCanvasRequest) GetCanvas() *Canvas {
	if x != nil {
		return x.Canvas
	}
	return nil
}

// *
// Response of an canvas creation.
type CreateCanvasResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Canvas being created
	Canvas *Canvas `protobuf:"bytes,1,opt,name=canvas,proto3" json:"canvas,omitempty"`
	// *
	// Error specific to a field if there are any errors.
	FieldErrors   map[string]string `protobuf:"bytes,2,rep,name=field_errors,json=fieldErrors,proto3" json:"field_errors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCanvasResponse) Reset() {
	*x = CreateCanvasResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCanvasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCanvasResponse) ProtoMessage() {}

func (x *CreateCanvasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCanvasResponse.ProtoReflect.Descriptor instead.
func (*CreateCanvasResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCanvasResponse) GetCanvas() *Canvas {
	if x != nil {
		return x.Canvas
	}
	return nil
}

func (x *CreateCanvasResponse) GetFieldErrors() map[string]string {
	if x != nil {
		return x.FieldErrors
	}
	return nil
}

// *
// An canvas search request.  For now only paginations params are provided.
type ListCanvasesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pagination info
	Pagination    *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCanvasesRequest) Reset() {
	*x = ListCanvasesRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCanvasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCanvasesRequest) ProtoMessage() {}

func (x *ListCanvasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCanvasesRequest.ProtoReflect.Descriptor instead.
func (*ListCanvasesRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{2}
}

func (x *ListCanvasesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// *
// Response of a canvas search/listing.
type ListCanvasesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The list of canvases found as part of this response.
	Canvases      []*Canvas           `protobuf:"bytes,1,rep,name=canvases,proto3" json:"canvases,omitempty"`
	Pagination    *PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCanvasesResponse) Reset() {
	*x = ListCanvasesResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCanvasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCanvasesResponse) ProtoMessage() {}

func (x *ListCanvasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCanvasesResponse.ProtoReflect.Descriptor instead.
func (*ListCanvasesResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{3}
}

func (x *ListCanvasesResponse) GetCanvases() []*Canvas {
	if x != nil {
		return x.Canvases
	}
	return nil
}

func (x *ListCanvasesResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// *
// Request to get a canvas.
type GetCanvasRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// ID of the canvas to be fetched
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCanvasRequest) Reset() {
	*x = GetCanvasRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCanvasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCanvasRequest) ProtoMessage() {}

func (x *GetCanvasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCanvasRequest.ProtoReflect.Descriptor instead.
func (*GetCanvasRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{4}
}

func (x *GetCanvasRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// *
// Canvas get response
type GetCanvasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Canvas        *Canvas                `protobuf:"bytes,1,opt,name=canvas,proto3" json:"canvas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCanvasResponse) Reset() {
	*x = GetCanvasResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCanvasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCanvasResponse) ProtoMessage() {}

func (x *GetCanvasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCanvasResponse.ProtoReflect.Descriptor instead.
func (*GetCanvasResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{5}
}

func (x *GetCanvasResponse) GetCanvas() *Canvas {
	if x != nil {
		return x.Canvas
	}
	return nil
}

// *
// Request to delete an canvas.
type DeleteCanvasRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// ID of the canvas to be deleted.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCanvasRequest) Reset() {
	*x = DeleteCanvasRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCanvasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCanvasRequest) ProtoMessage() {}

func (x *DeleteCanvasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCanvasRequest.ProtoReflect.Descriptor instead.
func (*DeleteCanvasRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCanvasRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// *
// Canvas deletion response
type DeleteCanvasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCanvasResponse) Reset() {
	*x = DeleteCanvasResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCanvasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCanvasResponse) ProtoMessage() {}

func (x *DeleteCanvasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCanvasResponse.ProtoReflect.Descriptor instead.
func (*DeleteCanvasResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{7}
}

type AddGeneratorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generator     *Generator             `protobuf:"bytes,1,opt,name=generator,proto3" json:"generator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddGeneratorRequest) Reset() {
	*x = AddGeneratorRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGeneratorRequest) ProtoMessage() {}

func (x *AddGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGeneratorRequest.ProtoReflect.Descriptor instead.
func (*AddGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{8}
}

func (x *AddGeneratorRequest) GetGenerator() *Generator {
	if x != nil {
		return x.Generator
	}
	return nil
}

type AddGeneratorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generator     *Generator             `protobuf:"bytes,1,opt,name=generator,proto3" json:"generator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddGeneratorResponse) Reset() {
	*x = AddGeneratorResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGeneratorResponse) ProtoMessage() {}

func (x *AddGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGeneratorResponse.ProtoReflect.Descriptor instead.
func (*AddGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{9}
}

func (x *AddGeneratorResponse) GetGenerator() *Generator {
	if x != nil {
		return x.Generator
	}
	return nil
}

type ListGeneratorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGeneratorsRequest) Reset() {
	*x = ListGeneratorsRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGeneratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGeneratorsRequest) ProtoMessage() {}

func (x *ListGeneratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGeneratorsRequest.ProtoReflect.Descriptor instead.
func (*ListGeneratorsRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{10}
}

func (x *ListGeneratorsRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type ListGeneratorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generators    []*Generator           `protobuf:"bytes,1,rep,name=generators,proto3" json:"generators,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGeneratorsResponse) Reset() {
	*x = ListGeneratorsResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGeneratorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGeneratorsResponse) ProtoMessage() {}

func (x *ListGeneratorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGeneratorsResponse.ProtoReflect.Descriptor instead.
func (*ListGeneratorsResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{11}
}

func (x *ListGeneratorsResponse) GetGenerators() []*Generator {
	if x != nil {
		return x.Generators
	}
	return nil
}

type StartAllGeneratorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartAllGeneratorsRequest) Reset() {
	*x = StartAllGeneratorsRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartAllGeneratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAllGeneratorsRequest) ProtoMessage() {}

func (x *StartAllGeneratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAllGeneratorsRequest.ProtoReflect.Descriptor instead.
func (*StartAllGeneratorsRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{12}
}

func (x *StartAllGeneratorsRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type StartAllGeneratorsResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TotalGenerators     int32                  `protobuf:"varint,1,opt,name=total_generators,json=totalGenerators,proto3" json:"total_generators,omitempty"`               // Total number of generators
	StartedCount        int32                  `protobuf:"varint,2,opt,name=started_count,json=startedCount,proto3" json:"started_count,omitempty"`                        // Number successfully started
	AlreadyRunningCount int32                  `protobuf:"varint,3,opt,name=already_running_count,json=alreadyRunningCount,proto3" json:"already_running_count,omitempty"` // Number already running
	FailedCount         int32                  `protobuf:"varint,4,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`                           // Number that failed to start
	FailedIds           []string               `protobuf:"bytes,5,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"`                                  // IDs of generators that failed
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StartAllGeneratorsResponse) Reset() {
	*x = StartAllGeneratorsResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartAllGeneratorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAllGeneratorsResponse) ProtoMessage() {}

func (x *StartAllGeneratorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAllGeneratorsResponse.ProtoReflect.Descriptor instead.
func (*StartAllGeneratorsResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{13}
}

func (x *StartAllGeneratorsResponse) GetTotalGenerators() int32 {
	if x != nil {
		return x.TotalGenerators
	}
	return 0
}

func (x *StartAllGeneratorsResponse) GetStartedCount() int32 {
	if x != nil {
		return x.StartedCount
	}
	return 0
}

func (x *StartAllGeneratorsResponse) GetAlreadyRunningCount() int32 {
	if x != nil {
		return x.AlreadyRunningCount
	}
	return 0
}

func (x *StartAllGeneratorsResponse) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *StartAllGeneratorsResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

type StopAllGeneratorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopAllGeneratorsRequest) Reset() {
	*x = StopAllGeneratorsRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAllGeneratorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAllGeneratorsRequest) ProtoMessage() {}

func (x *StopAllGeneratorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAllGeneratorsRequest.ProtoReflect.Descriptor instead.
func (*StopAllGeneratorsRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{14}
}

func (x *StopAllGeneratorsRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type StopAllGeneratorsResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TotalGenerators     int32                  `protobuf:"varint,1,opt,name=total_generators,json=totalGenerators,proto3" json:"total_generators,omitempty"`               // Total number of generators
	StoppedCount        int32                  `protobuf:"varint,2,opt,name=stopped_count,json=stoppedCount,proto3" json:"stopped_count,omitempty"`                        // Number successfully stopped
	AlreadyStoppedCount int32                  `protobuf:"varint,3,opt,name=already_stopped_count,json=alreadyStoppedCount,proto3" json:"already_stopped_count,omitempty"` // Number already stopped
	FailedCount         int32                  `protobuf:"varint,4,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`                           // Number that failed to stop
	FailedIds           []string               `protobuf:"bytes,5,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"`                                  // IDs of generators that failed
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StopAllGeneratorsResponse) Reset() {
	*x = StopAllGeneratorsResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAllGeneratorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAllGeneratorsResponse) ProtoMessage() {}

func (x *StopAllGeneratorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAllGeneratorsResponse.ProtoReflect.Descriptor instead.
func (*StopAllGeneratorsResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{15}
}

func (x *StopAllGeneratorsResponse) GetTotalGenerators() int32 {
	if x != nil {
		return x.TotalGenerators
	}
	return 0
}

func (x *StopAllGeneratorsResponse) GetStoppedCount() int32 {
	if x != nil {
		return x.StoppedCount
	}
	return 0
}

func (x *StopAllGeneratorsResponse) GetAlreadyStoppedCount() int32 {
	if x != nil {
		return x.AlreadyStoppedCount
	}
	return 0
}

func (x *StopAllGeneratorsResponse) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *StopAllGeneratorsResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

type GetGeneratorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	GeneratorId   string                 `protobuf:"bytes,2,opt,name=generator_id,json=generatorId,proto3" json:"generator_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGeneratorRequest) Reset() {
	*x = GetGeneratorRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGeneratorRequest) ProtoMessage() {}

func (x *GetGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGeneratorRequest.ProtoReflect.Descriptor instead.
func (*GetGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{16}
}

func (x *GetGeneratorRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *GetGeneratorRequest) GetGeneratorId() string {
	if x != nil {
		return x.GeneratorId
	}
	return ""
}

type GetGeneratorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generator     *Generator             `protobuf:"bytes,1,opt,name=generator,proto3" json:"generator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGeneratorResponse) Reset() {
	*x = GetGeneratorResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGeneratorResponse) ProtoMessage() {}

func (x *GetGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGeneratorResponse.ProtoReflect.Descriptor instead.
func (*GetGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{17}
}

func (x *GetGeneratorResponse) GetGenerator() *Generator {
	if x != nil {
		return x.Generator
	}
	return nil
}

// Consolidate generator updates into one RPC using PATCH and FieldMask
type UpdateGeneratorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Generator object containing *only* the fields to be updated.
	// The server will use the update_mask to know which fields from
	// this 'generator' message to apply to the stored generator.
	Generator     *Generator             `protobuf:"bytes,1,opt,name=generator,proto3" json:"generator,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"` // e.g., paths: "title", paths: "text_content"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateGeneratorRequest) Reset() {
	*x = UpdateGeneratorRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGeneratorRequest) ProtoMessage() {}

func (x *UpdateGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGeneratorRequest.ProtoReflect.Descriptor instead.
func (*UpdateGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateGeneratorRequest) GetGenerator() *Generator {
	if x != nil {
		return x.Generator
	}
	return nil
}

func (x *UpdateGeneratorRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateGeneratorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generator     *Generator             `protobuf:"bytes,1,opt,name=generator,proto3" json:"generator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateGeneratorResponse) Reset() {
	*x = UpdateGeneratorResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGeneratorResponse) ProtoMessage() {}

func (x *UpdateGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGeneratorResponse.ProtoReflect.Descriptor instead.
func (*UpdateGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateGeneratorResponse) GetGenerator() *Generator {
	if x != nil {
		return x.Generator
	}
	return nil
}

type ResumeGeneratorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	GeneratorId   string                 `protobuf:"bytes,2,opt,name=generator_id,json=generatorId,proto3" json:"generator_id,omitempty"` // The generator being moved
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeGeneratorRequest) Reset() {
	*x = ResumeGeneratorRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeGeneratorRequest) ProtoMessage() {}

func (x *ResumeGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeGeneratorRequest.ProtoReflect.Descriptor instead.
func (*ResumeGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{20}
}

func (x *ResumeGeneratorRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *ResumeGeneratorRequest) GetGeneratorId() string {
	if x != nil {
		return x.GeneratorId
	}
	return ""
}

type ResumeGeneratorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeGeneratorResponse) Reset() {
	*x = ResumeGeneratorResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeGeneratorResponse) ProtoMessage() {}

func (x *ResumeGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeGeneratorResponse.ProtoReflect.Descriptor instead.
func (*ResumeGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{21}
}

type PauseGeneratorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	GeneratorId   string                 `protobuf:"bytes,2,opt,name=generator_id,json=generatorId,proto3" json:"generator_id,omitempty"` // The generator being moved
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseGeneratorRequest) Reset() {
	*x = PauseGeneratorRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseGeneratorRequest) ProtoMessage() {}

func (x *PauseGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseGeneratorRequest.ProtoReflect.Descriptor instead.
func (*PauseGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{22}
}

func (x *PauseGeneratorRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *PauseGeneratorRequest) GetGeneratorId() string {
	if x != nil {
		return x.GeneratorId
	}
	return ""
}

type PauseGeneratorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseGeneratorResponse) Reset() {
	*x = PauseGeneratorResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseGeneratorResponse) ProtoMessage() {}

func (x *PauseGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseGeneratorResponse.ProtoReflect.Descriptor instead.
func (*PauseGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{23}
}

type DeleteGeneratorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	GeneratorId   string                 `protobuf:"bytes,2,opt,name=generator_id,json=generatorId,proto3" json:"generator_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteGeneratorRequest) Reset() {
	*x = DeleteGeneratorRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGeneratorRequest) ProtoMessage() {}

func (x *DeleteGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGeneratorRequest.ProtoReflect.Descriptor instead.
func (*DeleteGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteGeneratorRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *DeleteGeneratorRequest) GetGeneratorId() string {
	if x != nil {
		return x.GeneratorId
	}
	return ""
}

type DeleteGeneratorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteGeneratorResponse) Reset() {
	*x = DeleteGeneratorResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGeneratorResponse) ProtoMessage() {}

func (x *DeleteGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGeneratorResponse.ProtoReflect.Descriptor instead.
func (*DeleteGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{25}
}

type LoadFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	SdlFilePath   string                 `protobuf:"bytes,2,opt,name=sdl_file_path,json=sdlFilePath,proto3" json:"sdl_file_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadFileRequest) Reset() {
	*x = LoadFileRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadFileRequest) ProtoMessage() {}

func (x *LoadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadFileRequest.ProtoReflect.Descriptor instead.
func (*LoadFileRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{26}
}

func (x *LoadFileRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *LoadFileRequest) GetSdlFilePath() string {
	if x != nil {
		return x.SdlFilePath
	}
	return ""
}

type LoadFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadFileResponse) Reset() {
	*x = LoadFileResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadFileResponse) ProtoMessage() {}

func (x *LoadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadFileResponse.ProtoReflect.Descriptor instead.
func (*LoadFileResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{27}
}

type UseSystemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	SystemName    string                 `protobuf:"bytes,2,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UseSystemRequest) Reset() {
	*x = UseSystemRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseSystemRequest) ProtoMessage() {}

func (x *UseSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseSystemRequest.ProtoReflect.Descriptor instead.
func (*UseSystemRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{28}
}

func (x *UseSystemRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *UseSystemRequest) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

type UseSystemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UseSystemResponse) Reset() {
	*x = UseSystemResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseSystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseSystemResponse) ProtoMessage() {}

func (x *UseSystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseSystemResponse.ProtoReflect.Descriptor instead.
func (*UseSystemResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{29}
}

type AddMetricRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metric        *Metric                `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddMetricRequest) Reset() {
	*x = AddMetricRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMetricRequest) ProtoMessage() {}

func (x *AddMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMetricRequest.ProtoReflect.Descriptor instead.
func (*AddMetricRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{30}
}

func (x *AddMetricRequest) GetMetric() *Metric {
	if x != nil {
		return x.Metric
	}
	return nil
}

type AddMetricResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metric        *Metric                `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddMetricResponse) Reset() {
	*x = AddMetricResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMetricResponse) ProtoMessage() {}

func (x *AddMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMetricResponse.ProtoReflect.Descriptor instead.
func (*AddMetricResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{31}
}

func (x *AddMetricResponse) GetMetric() *Metric {
	if x != nil {
		return x.Metric
	}
	return nil
}

type DeleteMetricRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	MetricId      string                 `protobuf:"bytes,2,opt,name=metric_id,json=metricId,proto3" json:"metric_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMetricRequest) Reset() {
	*x = DeleteMetricRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMetricRequest) ProtoMessage() {}

func (x *DeleteMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMetricRequest.ProtoReflect.Descriptor instead.
func (*DeleteMetricRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteMetricRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *DeleteMetricRequest) GetMetricId() string {
	if x != nil {
		return x.MetricId
	}
	return ""
}

type DeleteMetricResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMetricResponse) Reset() {
	*x = DeleteMetricResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMetricResponse) ProtoMessage() {}

func (x *DeleteMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMetricResponse.ProtoReflect.Descriptor instead.
func (*DeleteMetricResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{33}
}

type LiveMetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveMetricsRequest) Reset() {
	*x = LiveMetricsRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveMetricsRequest) ProtoMessage() {}

func (x *LiveMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveMetricsRequest.ProtoReflect.Descriptor instead.
func (*LiveMetricsRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{34}
}

func (x *LiveMetricsRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type LiveMetricsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveMetricsResponse) Reset() {
	*x = LiveMetricsResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveMetricsResponse) ProtoMessage() {}

func (x *LiveMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveMetricsResponse.ProtoReflect.Descriptor instead.
func (*LiveMetricsResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{35}
}

type QueryMetricsRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	CanvasId string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	// Metric identifier (component.method.type)
	MetricId string `protobuf:"bytes,2,opt,name=metric_id,json=metricId,proto3" json:"metric_id,omitempty"`
	// Time range for the query
	StartTime float64 `protobuf:"fixed64,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // Unix timestamp in seconds
	EndTime   float64 `protobuf:"fixed64,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // Unix timestamp in seconds
	// Optional: limit number of points returned
	Limit         int32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryMetricsRequest) Reset() {
	*x = QueryMetricsRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMetricsRequest) ProtoMessage() {}

func (x *QueryMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMetricsRequest.ProtoReflect.Descriptor instead.
func (*QueryMetricsRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{36}
}

func (x *QueryMetricsRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *QueryMetricsRequest) GetMetricId() string {
	if x != nil {
		return x.MetricId
	}
	return ""
}

func (x *QueryMetricsRequest) GetStartTime() float64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *QueryMetricsRequest) GetEndTime() float64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *QueryMetricsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type QueryMetricsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Points        []*MetricPoint         `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryMetricsResponse) Reset() {
	*x = QueryMetricsResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMetricsResponse) ProtoMessage() {}

func (x *QueryMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMetricsResponse.ProtoReflect.Descriptor instead.
func (*QueryMetricsResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{37}
}

func (x *QueryMetricsResponse) GetPoints() []*MetricPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

type MetricPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     float64                `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Unix timestamp in seconds
	Value         float64                `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricPoint) Reset() {
	*x = MetricPoint{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricPoint) ProtoMessage() {}

func (x *MetricPoint) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricPoint.ProtoReflect.Descriptor instead.
func (*MetricPoint) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{38}
}

func (x *MetricPoint) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MetricPoint) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AggregateMetricsRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	CanvasId  string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	MetricId  string                 `protobuf:"bytes,2,opt,name=metric_id,json=metricId,proto3" json:"metric_id,omitempty"`
	StartTime float64                `protobuf:"fixed64,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   float64                `protobuf:"fixed64,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Aggregation function: "count", "sum", "avg", "min", "max", "p50", "p90", "p95", "p99"
	Function string `protobuf:"bytes,5,opt,name=function,proto3" json:"function,omitempty"`
	// Optional: window size for time-based aggregation (in seconds)
	WindowSize    float64 `protobuf:"fixed64,6,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AggregateMetricsRequest) Reset() {
	*x = AggregateMetricsRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateMetricsRequest) ProtoMessage() {}

func (x *AggregateMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateMetricsRequest.ProtoReflect.Descriptor instead.
func (*AggregateMetricsRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{39}
}

func (x *AggregateMetricsRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *AggregateMetricsRequest) GetMetricId() string {
	if x != nil {
		return x.MetricId
	}
	return ""
}

func (x *AggregateMetricsRequest) GetStartTime() float64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AggregateMetricsRequest) GetEndTime() float64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AggregateMetricsRequest) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *AggregateMetricsRequest) GetWindowSize() float64 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

type AggregateMetricsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Single value if no windowing, multiple if windowed
	Results       []*AggregateResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AggregateMetricsResponse) Reset() {
	*x = AggregateMetricsResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateMetricsResponse) ProtoMessage() {}

func (x *AggregateMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateMetricsResponse.ProtoReflect.Descriptor instead.
func (*AggregateMetricsResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{40}
}

func (x *AggregateMetricsResponse) GetResults() []*AggregateResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type AggregateResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     float64                `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Start of window (if windowed)
	Value         float64                `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AggregateResult) Reset() {
	*x = AggregateResult{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateResult) ProtoMessage() {}

func (x *AggregateResult) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateResult.ProtoReflect.Descriptor instead.
func (*AggregateResult) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{41}
}

func (x *AggregateResult) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AggregateResult) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// List all available metrics
type ListMetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMetricsRequest) Reset() {
	*x = ListMetricsRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricsRequest) ProtoMessage() {}

func (x *ListMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricsRequest.ProtoReflect.Descriptor instead.
func (*ListMetricsRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{42}
}

func (x *ListMetricsRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type ListMetricsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metrics       []*MetricInfo          `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMetricsResponse) Reset() {
	*x = ListMetricsResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetricsResponse) ProtoMessage() {}

func (x *ListMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetricsResponse.ProtoReflect.Descriptor instead.
func (*ListMetricsResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{43}
}

func (x *ListMetricsResponse) GetMetrics() []*MetricInfo {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type MetricInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // component.method.type
	Component       string                 `protobuf:"bytes,2,opt,name=component,proto3" json:"component,omitempty"`
	Method          string                 `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	MetricType      string                 `protobuf:"bytes,4,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	DataPoints      int64                  `protobuf:"varint,5,opt,name=data_points,json=dataPoints,proto3" json:"data_points,omitempty"` // Number of data points stored
	OldestTimestamp float64                `protobuf:"fixed64,6,opt,name=oldest_timestamp,json=oldestTimestamp,proto3" json:"oldest_timestamp,omitempty"`
	NewestTimestamp float64                `protobuf:"fixed64,7,opt,name=newest_timestamp,json=newestTimestamp,proto3" json:"newest_timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MetricInfo) Reset() {
	*x = MetricInfo{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricInfo) ProtoMessage() {}

func (x *MetricInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricInfo.ProtoReflect.Descriptor instead.
func (*MetricInfo) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{44}
}

func (x *MetricInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MetricInfo) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *MetricInfo) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *MetricInfo) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

func (x *MetricInfo) GetDataPoints() int64 {
	if x != nil {
		return x.DataPoints
	}
	return 0
}

func (x *MetricInfo) GetOldestTimestamp() float64 {
	if x != nil {
		return x.OldestTimestamp
	}
	return 0
}

func (x *MetricInfo) GetNewestTimestamp() float64 {
	if x != nil {
		return x.NewestTimestamp
	}
	return 0
}

type ExecuteTraceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	Component     string                 `protobuf:"bytes,2,opt,name=component,proto3" json:"component,omitempty"`
	Method        string                 `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteTraceRequest) Reset() {
	*x = ExecuteTraceRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTraceRequest) ProtoMessage() {}

func (x *ExecuteTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTraceRequest.ProtoReflect.Descriptor instead.
func (*ExecuteTraceRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{45}
}

func (x *ExecuteTraceRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *ExecuteTraceRequest) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *ExecuteTraceRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type ExecuteTraceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The complete trace data
	TraceData     *TraceData `protobuf:"bytes,1,opt,name=trace_data,json=traceData,proto3" json:"trace_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteTraceResponse) Reset() {
	*x = ExecuteTraceResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteTraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTraceResponse) ProtoMessage() {}

func (x *ExecuteTraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTraceResponse.ProtoReflect.Descriptor instead.
func (*ExecuteTraceResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{46}
}

func (x *ExecuteTraceResponse) GetTraceData() *TraceData {
	if x != nil {
		return x.TraceData
	}
	return nil
}

// TraceData matches the runtime.TraceData structure
type TraceData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	System        string                 `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	EntryPoint    string                 `protobuf:"bytes,2,opt,name=entry_point,json=entryPoint,proto3" json:"entry_point,omitempty"`
	Events        []*TraceEvent          `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceData) Reset() {
	*x = TraceData{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceData) ProtoMessage() {}

func (x *TraceData) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceData.ProtoReflect.Descriptor instead.
func (*TraceData) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{47}
}

func (x *TraceData) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *TraceData) GetEntryPoint() string {
	if x != nil {
		return x.EntryPoint
	}
	return ""
}

func (x *TraceData) GetEvents() []*TraceEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// TraceEvent matches the runtime.TraceEvent structure
type TraceEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          string                 `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"` // "enter", "exit", "go", "wait"
	Id            int64                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ParentId      int64                  `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Timestamp     float64                `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Virtual time in seconds
	Duration      float64                `protobuf:"fixed64,5,opt,name=duration,proto3" json:"duration,omitempty"`   // Duration in seconds (for exit events)
	Component     string                 `protobuf:"bytes,6,opt,name=component,proto3" json:"component,omitempty"`
	Method        string                 `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
	Args          []string               `protobuf:"bytes,8,rep,name=args,proto3" json:"args,omitempty"`
	ReturnValue   string                 `protobuf:"bytes,9,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,10,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceEvent) Reset() {
	*x = TraceEvent{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEvent) ProtoMessage() {}

func (x *TraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEvent.ProtoReflect.Descriptor instead.
func (*TraceEvent) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{48}
}

func (x *TraceEvent) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *TraceEvent) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TraceEvent) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *TraceEvent) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TraceEvent) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TraceEvent) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *TraceEvent) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *TraceEvent) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TraceEvent) GetReturnValue() string {
	if x != nil {
		return x.ReturnValue
	}
	return ""
}

func (x *TraceEvent) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Request to set a parameter value
type SetParameterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                         // dot-separated path like "server.cache.HitRate"
	NewValue      string                 `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"` // SDL expression string (e.g., "42", "true", "'hello'", "[1,2,3]", etc.)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetParameterRequest) Reset() {
	*x = SetParameterRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetParameterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetParameterRequest) ProtoMessage() {}

func (x *SetParameterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetParameterRequest.ProtoReflect.Descriptor instead.
func (*SetParameterRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{49}
}

func (x *SetParameterRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *SetParameterRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SetParameterRequest) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

// Response from setting a parameter
type SetParameterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Set if success is false
	NewValue      string                 `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`             // SDL expression string (e.g., "42", "true", "'hello'", "[1,2,3]", etc.)
	OldValue      string                 `protobuf:"bytes,4,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetParameterResponse) Reset() {
	*x = SetParameterResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetParameterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetParameterResponse) ProtoMessage() {}

func (x *SetParameterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetParameterResponse.ProtoReflect.Descriptor instead.
func (*SetParameterResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{50}
}

func (x *SetParameterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetParameterResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SetParameterResponse) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

func (x *SetParameterResponse) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

// Request to get parameter values
type GetParametersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"` // Optional: if empty, return all parameters
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetParametersRequest) Reset() {
	*x = GetParametersRequest{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParametersRequest) ProtoMessage() {}

func (x *GetParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParametersRequest.ProtoReflect.Descriptor instead.
func (*GetParametersRequest) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{51}
}

func (x *GetParametersRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *GetParametersRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Response containing parameter values
type GetParametersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Parameters    map[string]string      `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Values as SDL expression strings
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetParametersResponse) Reset() {
	*x = GetParametersResponse{}
	mi := &file_sdl_v1_canvas_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParametersResponse) ProtoMessage() {}

func (x *GetParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdl_v1_canvas_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParametersResponse.ProtoReflect.Descriptor instead.
func (*GetParametersResponse) Descriptor() ([]byte, []int) {
	return file_sdl_v1_canvas_proto_rawDescGZIP(), []int{52}
}

func (x *GetParametersResponse) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

var File_sdl_v1_canvas_proto protoreflect.FileDescriptor

var file_sdl_v1_canvas_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x73, 0x64, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x73, 0x64, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x22, 0xd0, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x7e, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x46, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x64, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x47, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x34, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0x38, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0xe2, 0x01,
	0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49,
	0x64, 0x73, 0x22, 0x37, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x19,
	0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22,
	0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x86, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x4a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x19,
	0x0a, 0x17, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x15, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x61, 0x75, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x52, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x64, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x64, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3a, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x3b, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x4f, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x0a, 0x12, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x43,
	0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x17, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x4d, 0x0a, 0x18, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x45, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0xea, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6e,
	0x65, 0x77, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x68,
	0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x48, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x70, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x63, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0xa5, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xc7, 0x18, 0x0a, 0x0d, 0x43, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a,
	0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x12, 0x5f,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1b,
	0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x64,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x12, 0x18, 0x2e, 0x73,
	0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0x71,
	0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x73, 0x64, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69,
	0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x73, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x18,
	0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x75, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0x83,
	0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x1b, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73,
	0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x7b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c,
	0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x64,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x6c,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x1a, 0x34, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x61, 0x6c, 0x6c, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x64, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x64,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x1a, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x74, 0x6f, 0x70, 0x61, 0x6c, 0x6c, 0x12, 0x7c,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x1d, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x85, 0x01, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x2e,
	0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x64, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34,
	0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x41, 0x3a, 0x01, 0x2a, 0x32, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x65, 0x73, 0x2f, 0x7b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x69,
	0x64, 0x7d, 0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a, 0x22,
	0x40, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x3a, 0x01,
	0x2a, 0x22, 0x41, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f,
	0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x2a, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f,
	0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x7d, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x7d, 0x12, 0x80,
	0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x1b, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73,
	0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x1a, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x74, 0x68,
	0x7d, 0x12, 0x79, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x18, 0x2e, 0x73, 0x64, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x7f, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x2a, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x7b, 0x0a, 0x0a, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x1a, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x30, 0x01,
	0x12, 0x70, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x1a, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x64,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x1f, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x42, 0x69, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x64, 0x6c, 0x2e, 0x76, 0x31,
	0x42, 0x0b, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x15, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x64, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x53,
	0x64, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x06, 0x53, 0x64, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x12, 0x53, 0x64, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x53, 0x64, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_sdl_v1_canvas_proto_rawDescOnce sync.Once
	file_sdl_v1_canvas_proto_rawDescData []byte
)

func file_sdl_v1_canvas_proto_rawDescGZIP() []byte {
	file_sdl_v1_canvas_proto_rawDescOnce.Do(func() {
		file_sdl_v1_canvas_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sdl_v1_canvas_proto_rawDesc), len(file_sdl_v1_canvas_proto_rawDesc)))
	})
	return file_sdl_v1_canvas_proto_rawDescData
}

var file_sdl_v1_canvas_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_sdl_v1_canvas_proto_goTypes = []any{
	(*CreateCanvasRequest)(nil),        // 0: sdl.v1.CreateCanvasRequest
	(*CreateCanvasResponse)(nil),       // 1: sdl.v1.CreateCanvasResponse
	(*ListCanvasesRequest)(nil),        // 2: sdl.v1.ListCanvasesRequest
	(*ListCanvasesResponse)(nil),       // 3: sdl.v1.ListCanvasesResponse
	(*GetCanvasRequest)(nil),           // 4: sdl.v1.GetCanvasRequest
	(*GetCanvasResponse)(nil),          // 5: sdl.v1.GetCanvasResponse
	(*DeleteCanvasRequest)(nil),        // 6: sdl.v1.DeleteCanvasRequest
	(*DeleteCanvasResponse)(nil),       // 7: sdl.v1.DeleteCanvasResponse
	(*AddGeneratorRequest)(nil),        // 8: sdl.v1.AddGeneratorRequest
	(*AddGeneratorResponse)(nil),       // 9: sdl.v1.AddGeneratorResponse
	(*ListGeneratorsRequest)(nil),      // 10: sdl.v1.ListGeneratorsRequest
	(*ListGeneratorsResponse)(nil),     // 11: sdl.v1.ListGeneratorsResponse
	(*StartAllGeneratorsRequest)(nil),  // 12: sdl.v1.StartAllGeneratorsRequest
	(*StartAllGeneratorsResponse)(nil), // 13: sdl.v1.StartAllGeneratorsResponse
	(*StopAllGeneratorsRequest)(nil),   // 14: sdl.v1.StopAllGeneratorsRequest
	(*StopAllGeneratorsResponse)(nil),  // 15: sdl.v1.StopAllGeneratorsResponse
	(*GetGeneratorRequest)(nil),        // 16: sdl.v1.GetGeneratorRequest
	(*GetGeneratorResponse)(nil),       // 17: sdl.v1.GetGeneratorResponse
	(*UpdateGeneratorRequest)(nil),     // 18: sdl.v1.UpdateGeneratorRequest
	(*UpdateGeneratorResponse)(nil),    // 19: sdl.v1.UpdateGeneratorResponse
	(*ResumeGeneratorRequest)(nil),     // 20: sdl.v1.ResumeGeneratorRequest
	(*ResumeGeneratorResponse)(nil),    // 21: sdl.v1.ResumeGeneratorResponse
	(*PauseGeneratorRequest)(nil),      // 22: sdl.v1.PauseGeneratorRequest
	(*PauseGeneratorResponse)(nil),     // 23: sdl.v1.PauseGeneratorResponse
	(*DeleteGeneratorRequest)(nil),     // 24: sdl.v1.DeleteGeneratorRequest
	(*DeleteGeneratorResponse)(nil),    // 25: sdl.v1.DeleteGeneratorResponse
	(*LoadFileRequest)(nil),            // 26: sdl.v1.LoadFileRequest
	(*LoadFileResponse)(nil),           // 27: sdl.v1.LoadFileResponse
	(*UseSystemRequest)(nil),           // 28: sdl.v1.UseSystemRequest
	(*UseSystemResponse)(nil),          // 29: sdl.v1.UseSystemResponse
	(*AddMetricRequest)(nil),           // 30: sdl.v1.AddMetricRequest
	(*AddMetricResponse)(nil),          // 31: sdl.v1.AddMetricResponse
	(*DeleteMetricRequest)(nil),        // 32: sdl.v1.DeleteMetricRequest
	(*DeleteMetricResponse)(nil),       // 33: sdl.v1.DeleteMetricResponse
	(*LiveMetricsRequest)(nil),         // 34: sdl.v1.LiveMetricsRequest
	(*LiveMetricsResponse)(nil),        // 35: sdl.v1.LiveMetricsResponse
	(*QueryMetricsRequest)(nil),        // 36: sdl.v1.QueryMetricsRequest
	(*QueryMetricsResponse)(nil),       // 37: sdl.v1.QueryMetricsResponse
	(*MetricPoint)(nil),                // 38: sdl.v1.MetricPoint
	(*AggregateMetricsRequest)(nil),    // 39: sdl.v1.AggregateMetricsRequest
	(*AggregateMetricsResponse)(nil),   // 40: sdl.v1.AggregateMetricsResponse
	(*AggregateResult)(nil),            // 41: sdl.v1.AggregateResult
	(*ListMetricsRequest)(nil),         // 42: sdl.v1.ListMetricsRequest
	(*ListMetricsResponse)(nil),        // 43: sdl.v1.ListMetricsResponse
	(*MetricInfo)(nil),                 // 44: sdl.v1.MetricInfo
	(*ExecuteTraceRequest)(nil),        // 45: sdl.v1.ExecuteTraceRequest
	(*ExecuteTraceResponse)(nil),       // 46: sdl.v1.ExecuteTraceResponse
	(*TraceData)(nil),                  // 47: sdl.v1.TraceData
	(*TraceEvent)(nil),                 // 48: sdl.v1.TraceEvent
	(*SetParameterRequest)(nil),        // 49: sdl.v1.SetParameterRequest
	(*SetParameterResponse)(nil),       // 50: sdl.v1.SetParameterResponse
	(*GetParametersRequest)(nil),       // 51: sdl.v1.GetParametersRequest
	(*GetParametersResponse)(nil),      // 52: sdl.v1.GetParametersResponse
	nil,                                // 53: sdl.v1.CreateCanvasResponse.FieldErrorsEntry
	nil,                                // 54: sdl.v1.GetParametersResponse.ParametersEntry
	(*Canvas)(nil),                     // 55: sdl.v1.Canvas
	(*Pagination)(nil),                 // 56: sdl.v1.Pagination
	(*PaginationResponse)(nil),         // 57: sdl.v1.PaginationResponse
	(*Generator)(nil),                  // 58: sdl.v1.Generator
	(*fieldmaskpb.FieldMask)(nil),      // 59: google.protobuf.FieldMask
	(*Metric)(nil),                     // 60: sdl.v1.Metric
}
var file_sdl_v1_canvas_proto_depIdxs = []int32{
	55, // 0: sdl.v1.CreateCanvasRequest.canvas:type_name -> sdl.v1.Canvas
	55, // 1: sdl.v1.CreateCanvasResponse.canvas:type_name -> sdl.v1.Canvas
	53, // 2: sdl.v1.CreateCanvasResponse.field_errors:type_name -> sdl.v1.CreateCanvasResponse.FieldErrorsEntry
	56, // 3: sdl.v1.ListCanvasesRequest.pagination:type_name -> sdl.v1.Pagination
	55, // 4: sdl.v1.ListCanvasesResponse.canvases:type_name -> sdl.v1.Canvas
	57, // 5: sdl.v1.ListCanvasesResponse.pagination:type_name -> sdl.v1.PaginationResponse
	55, // 6: sdl.v1.GetCanvasResponse.canvas:type_name -> sdl.v1.Canvas
	58, // 7: sdl.v1.AddGeneratorRequest.generator:type_name -> sdl.v1.Generator
	58, // 8: sdl.v1.AddGeneratorResponse.generator:type_name -> sdl.v1.Generator
	58, // 9: sdl.v1.ListGeneratorsResponse.generators:type_name -> sdl.v1.Generator
	58, // 10: sdl.v1.GetGeneratorResponse.generator:type_name -> sdl.v1.Generator
	58, // 11: sdl.v1.UpdateGeneratorRequest.generator:type_name -> sdl.v1.Generator
	59, // 12: sdl.v1.UpdateGeneratorRequest.update_mask:type_name -> google.protobuf.FieldMask
	58, // 13: sdl.v1.UpdateGeneratorResponse.generator:type_name -> sdl.v1.Generator
	60, // 14: sdl.v1.AddMetricRequest.metric:type_name -> sdl.v1.Metric
	60, // 15: sdl.v1.AddMetricResponse.metric:type_name -> sdl.v1.Metric
	38, // 16: sdl.v1.QueryMetricsResponse.points:type_name -> sdl.v1.MetricPoint
	41, // 17: sdl.v1.AggregateMetricsResponse.results:type_name -> sdl.v1.AggregateResult
	44, // 18: sdl.v1.ListMetricsResponse.metrics:type_name -> sdl.v1.MetricInfo
	47, // 19: sdl.v1.ExecuteTraceResponse.trace_data:type_name -> sdl.v1.TraceData
	48, // 20: sdl.v1.TraceData.events:type_name -> sdl.v1.TraceEvent
	54, // 21: sdl.v1.GetParametersResponse.parameters:type_name -> sdl.v1.GetParametersResponse.ParametersEntry
	0,  // 22: sdl.v1.CanvasService.CreateCanvas:input_type -> sdl.v1.CreateCanvasRequest
	2,  // 23: sdl.v1.CanvasService.ListCanvases:input_type -> sdl.v1.ListCanvasesRequest
	4,  // 24: sdl.v1.CanvasService.GetCanvas:input_type -> sdl.v1.GetCanvasRequest
	26, // 25: sdl.v1.CanvasService.LoadFile:input_type -> sdl.v1.LoadFileRequest
	28, // 26: sdl.v1.CanvasService.UseSystem:input_type -> sdl.v1.UseSystemRequest
	6,  // 27: sdl.v1.CanvasService.DeleteCanvas:input_type -> sdl.v1.DeleteCanvasRequest
	8,  // 28: sdl.v1.CanvasService.AddGenerator:input_type -> sdl.v1.AddGeneratorRequest
	12, // 29: sdl.v1.CanvasService.StartAllGenerators:input_type -> sdl.v1.StartAllGeneratorsRequest
	14, // 30: sdl.v1.CanvasService.StopAllGenerators:input_type -> sdl.v1.StopAllGeneratorsRequest
	10, // 31: sdl.v1.CanvasService.ListGenerators:input_type -> sdl.v1.ListGeneratorsRequest
	16, // 32: sdl.v1.CanvasService.GetGenerator:input_type -> sdl.v1.GetGeneratorRequest
	18, // 33: sdl.v1.CanvasService.UpdateGenerator:input_type -> sdl.v1.UpdateGeneratorRequest
	22, // 34: sdl.v1.CanvasService.PauseGenerator:input_type -> sdl.v1.PauseGeneratorRequest
	20, // 35: sdl.v1.CanvasService.ResumeGenerator:input_type -> sdl.v1.ResumeGeneratorRequest
	24, // 36: sdl.v1.CanvasService.DeleteGenerator:input_type -> sdl.v1.DeleteGeneratorRequest
	45, // 37: sdl.v1.CanvasService.ExecuteTrace:input_type -> sdl.v1.ExecuteTraceRequest
	49, // 38: sdl.v1.CanvasService.SetParameter:input_type -> sdl.v1.SetParameterRequest
	51, // 39: sdl.v1.CanvasService.GetParameters:input_type -> sdl.v1.GetParametersRequest
	30, // 40: sdl.v1.CanvasService.AddMetric:input_type -> sdl.v1.AddMetricRequest
	32, // 41: sdl.v1.CanvasService.DeleteMetric:input_type -> sdl.v1.DeleteMetricRequest
	34, // 42: sdl.v1.CanvasService.LiveMetric:input_type -> sdl.v1.LiveMetricsRequest
	42, // 43: sdl.v1.CanvasService.ListMetrics:input_type -> sdl.v1.ListMetricsRequest
	36, // 44: sdl.v1.CanvasService.QueryMetrics:input_type -> sdl.v1.QueryMetricsRequest
	39, // 45: sdl.v1.CanvasService.AggregateMetrics:input_type -> sdl.v1.AggregateMetricsRequest
	1,  // 46: sdl.v1.CanvasService.CreateCanvas:output_type -> sdl.v1.CreateCanvasResponse
	3,  // 47: sdl.v1.CanvasService.ListCanvases:output_type -> sdl.v1.ListCanvasesResponse
	5,  // 48: sdl.v1.CanvasService.GetCanvas:output_type -> sdl.v1.GetCanvasResponse
	27, // 49: sdl.v1.CanvasService.LoadFile:output_type -> sdl.v1.LoadFileResponse
	29, // 50: sdl.v1.CanvasService.UseSystem:output_type -> sdl.v1.UseSystemResponse
	7,  // 51: sdl.v1.CanvasService.DeleteCanvas:output_type -> sdl.v1.DeleteCanvasResponse
	9,  // 52: sdl.v1.CanvasService.AddGenerator:output_type -> sdl.v1.AddGeneratorResponse
	13, // 53: sdl.v1.CanvasService.StartAllGenerators:output_type -> sdl.v1.StartAllGeneratorsResponse
	15, // 54: sdl.v1.CanvasService.StopAllGenerators:output_type -> sdl.v1.StopAllGeneratorsResponse
	11, // 55: sdl.v1.CanvasService.ListGenerators:output_type -> sdl.v1.ListGeneratorsResponse
	17, // 56: sdl.v1.CanvasService.GetGenerator:output_type -> sdl.v1.GetGeneratorResponse
	19, // 57: sdl.v1.CanvasService.UpdateGenerator:output_type -> sdl.v1.UpdateGeneratorResponse
	23, // 58: sdl.v1.CanvasService.PauseGenerator:output_type -> sdl.v1.PauseGeneratorResponse
	21, // 59: sdl.v1.CanvasService.ResumeGenerator:output_type -> sdl.v1.ResumeGeneratorResponse
	25, // 60: sdl.v1.CanvasService.DeleteGenerator:output_type -> sdl.v1.DeleteGeneratorResponse
	46, // 61: sdl.v1.CanvasService.ExecuteTrace:output_type -> sdl.v1.ExecuteTraceResponse
	50, // 62: sdl.v1.CanvasService.SetParameter:output_type -> sdl.v1.SetParameterResponse
	52, // 63: sdl.v1.CanvasService.GetParameters:output_type -> sdl.v1.GetParametersResponse
	31, // 64: sdl.v1.CanvasService.AddMetric:output_type -> sdl.v1.AddMetricResponse
	33, // 65: sdl.v1.CanvasService.DeleteMetric:output_type -> sdl.v1.DeleteMetricResponse
	35, // 66: sdl.v1.CanvasService.LiveMetric:output_type -> sdl.v1.LiveMetricsResponse
	43, // 67: sdl.v1.CanvasService.ListMetrics:output_type -> sdl.v1.ListMetricsResponse
	37, // 68: sdl.v1.CanvasService.QueryMetrics:output_type -> sdl.v1.QueryMetricsResponse
	40, // 69: sdl.v1.CanvasService.AggregateMetrics:output_type -> sdl.v1.AggregateMetricsResponse
	46, // [46:70] is the sub-list for method output_type
	22, // [22:46] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_sdl_v1_canvas_proto_init() }
func file_sdl_v1_canvas_proto_init() {
	if File_sdl_v1_canvas_proto != nil {
		return
	}
	file_sdl_v1_models_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sdl_v1_canvas_proto_rawDesc), len(file_sdl_v1_canvas_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sdl_v1_canvas_proto_goTypes,
		DependencyIndexes: file_sdl_v1_canvas_proto_depIdxs,
		MessageInfos:      file_sdl_v1_canvas_proto_msgTypes,
	}.Build()
	File_sdl_v1_canvas_proto = out.File
	file_sdl_v1_canvas_proto_goTypes = nil
	file_sdl_v1_canvas_proto_depIdxs = nil
}
