// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sdl/v1/systems.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SystemsService_ListSystems_FullMethodName      = "/sdl.v1.SystemsService/ListSystems"
	SystemsService_GetSystem_FullMethodName        = "/sdl.v1.SystemsService/GetSystem"
	SystemsService_GetSystemContent_FullMethodName = "/sdl.v1.SystemsService/GetSystemContent"
)

// SystemsServiceClient is the client API for SystemsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SystemsService manages the system examples catalog
type SystemsServiceClient interface {
	// ListSystems returns all available systems
	ListSystems(ctx context.Context, in *ListSystemsRequest, opts ...grpc.CallOption) (*ListSystemsResponse, error)
	// GetSystem returns a specific system with metadata
	GetSystem(ctx context.Context, in *GetSystemRequest, opts ...grpc.CallOption) (*GetSystemResponse, error)
	// GetSystemContent returns the SDL and recipe content for a system
	GetSystemContent(ctx context.Context, in *GetSystemContentRequest, opts ...grpc.CallOption) (*GetSystemContentResponse, error)
}

type systemsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemsServiceClient(cc grpc.ClientConnInterface) SystemsServiceClient {
	return &systemsServiceClient{cc}
}

func (c *systemsServiceClient) ListSystems(ctx context.Context, in *ListSystemsRequest, opts ...grpc.CallOption) (*ListSystemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSystemsResponse)
	err := c.cc.Invoke(ctx, SystemsService_ListSystems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsServiceClient) GetSystem(ctx context.Context, in *GetSystemRequest, opts ...grpc.CallOption) (*GetSystemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemResponse)
	err := c.cc.Invoke(ctx, SystemsService_GetSystem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsServiceClient) GetSystemContent(ctx context.Context, in *GetSystemContentRequest, opts ...grpc.CallOption) (*GetSystemContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemContentResponse)
	err := c.cc.Invoke(ctx, SystemsService_GetSystemContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemsServiceServer is the server API for SystemsService service.
// All implementations should embed UnimplementedSystemsServiceServer
// for forward compatibility.
//
// SystemsService manages the system examples catalog
type SystemsServiceServer interface {
	// ListSystems returns all available systems
	ListSystems(context.Context, *ListSystemsRequest) (*ListSystemsResponse, error)
	// GetSystem returns a specific system with metadata
	GetSystem(context.Context, *GetSystemRequest) (*GetSystemResponse, error)
	// GetSystemContent returns the SDL and recipe content for a system
	GetSystemContent(context.Context, *GetSystemContentRequest) (*GetSystemContentResponse, error)
}

// UnimplementedSystemsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemsServiceServer struct{}

func (UnimplementedSystemsServiceServer) ListSystems(context.Context, *ListSystemsRequest) (*ListSystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystems not implemented")
}
func (UnimplementedSystemsServiceServer) GetSystem(context.Context, *GetSystemRequest) (*GetSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}
func (UnimplementedSystemsServiceServer) GetSystemContent(context.Context, *GetSystemContentRequest) (*GetSystemContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemContent not implemented")
}
func (UnimplementedSystemsServiceServer) testEmbeddedByValue() {}

// UnsafeSystemsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemsServiceServer will
// result in compilation errors.
type UnsafeSystemsServiceServer interface {
	mustEmbedUnimplementedSystemsServiceServer()
}

func RegisterSystemsServiceServer(s grpc.ServiceRegistrar, srv SystemsServiceServer) {
	// If the following call pancis, it indicates UnimplementedSystemsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemsService_ServiceDesc, srv)
}

func _SystemsService_ListSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServiceServer).ListSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemsService_ListSystems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServiceServer).ListSystems(ctx, req.(*ListSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemsService_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServiceServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemsService_GetSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServiceServer).GetSystem(ctx, req.(*GetSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemsService_GetSystemContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServiceServer).GetSystemContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemsService_GetSystemContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServiceServer).GetSystemContent(ctx, req.(*GetSystemContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemsService_ServiceDesc is the grpc.ServiceDesc for SystemsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdl.v1.SystemsService",
	HandlerType: (*SystemsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSystems",
			Handler:    _SystemsService_ListSystems_Handler,
		},
		{
			MethodName: "GetSystem",
			Handler:    _SystemsService_GetSystem_Handler,
		},
		{
			MethodName: "GetSystemContent",
			Handler:    _SystemsService_GetSystemContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdl/v1/systems.proto",
}
