// protos/sdl/v1/canvas.proto

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sdl/v1/canvas.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/panyam/sdl/gen/go/sdl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CanvasServiceName is the fully-qualified name of the CanvasService service.
	CanvasServiceName = "sdl.v1.CanvasService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CanvasServiceCreateCanvasProcedure is the fully-qualified name of the CanvasService's
	// CreateCanvas RPC.
	CanvasServiceCreateCanvasProcedure = "/sdl.v1.CanvasService/CreateCanvas"
	// CanvasServiceListCanvasesProcedure is the fully-qualified name of the CanvasService's
	// ListCanvases RPC.
	CanvasServiceListCanvasesProcedure = "/sdl.v1.CanvasService/ListCanvases"
	// CanvasServiceGetCanvasProcedure is the fully-qualified name of the CanvasService's GetCanvas RPC.
	CanvasServiceGetCanvasProcedure = "/sdl.v1.CanvasService/GetCanvas"
	// CanvasServiceLoadFileProcedure is the fully-qualified name of the CanvasService's LoadFile RPC.
	CanvasServiceLoadFileProcedure = "/sdl.v1.CanvasService/LoadFile"
	// CanvasServiceUseSystemProcedure is the fully-qualified name of the CanvasService's UseSystem RPC.
	CanvasServiceUseSystemProcedure = "/sdl.v1.CanvasService/UseSystem"
	// CanvasServiceDeleteCanvasProcedure is the fully-qualified name of the CanvasService's
	// DeleteCanvas RPC.
	CanvasServiceDeleteCanvasProcedure = "/sdl.v1.CanvasService/DeleteCanvas"
	// CanvasServiceResetCanvasProcedure is the fully-qualified name of the CanvasService's ResetCanvas
	// RPC.
	CanvasServiceResetCanvasProcedure = "/sdl.v1.CanvasService/ResetCanvas"
	// CanvasServiceAddGeneratorProcedure is the fully-qualified name of the CanvasService's
	// AddGenerator RPC.
	CanvasServiceAddGeneratorProcedure = "/sdl.v1.CanvasService/AddGenerator"
	// CanvasServiceStartAllGeneratorsProcedure is the fully-qualified name of the CanvasService's
	// StartAllGenerators RPC.
	CanvasServiceStartAllGeneratorsProcedure = "/sdl.v1.CanvasService/StartAllGenerators"
	// CanvasServiceStopAllGeneratorsProcedure is the fully-qualified name of the CanvasService's
	// StopAllGenerators RPC.
	CanvasServiceStopAllGeneratorsProcedure = "/sdl.v1.CanvasService/StopAllGenerators"
	// CanvasServiceListGeneratorsProcedure is the fully-qualified name of the CanvasService's
	// ListGenerators RPC.
	CanvasServiceListGeneratorsProcedure = "/sdl.v1.CanvasService/ListGenerators"
	// CanvasServiceGetGeneratorProcedure is the fully-qualified name of the CanvasService's
	// GetGenerator RPC.
	CanvasServiceGetGeneratorProcedure = "/sdl.v1.CanvasService/GetGenerator"
	// CanvasServiceUpdateGeneratorProcedure is the fully-qualified name of the CanvasService's
	// UpdateGenerator RPC.
	CanvasServiceUpdateGeneratorProcedure = "/sdl.v1.CanvasService/UpdateGenerator"
	// CanvasServiceStopGeneratorProcedure is the fully-qualified name of the CanvasService's
	// StopGenerator RPC.
	CanvasServiceStopGeneratorProcedure = "/sdl.v1.CanvasService/StopGenerator"
	// CanvasServiceStartGeneratorProcedure is the fully-qualified name of the CanvasService's
	// StartGenerator RPC.
	CanvasServiceStartGeneratorProcedure = "/sdl.v1.CanvasService/StartGenerator"
	// CanvasServiceDeleteGeneratorProcedure is the fully-qualified name of the CanvasService's
	// DeleteGenerator RPC.
	CanvasServiceDeleteGeneratorProcedure = "/sdl.v1.CanvasService/DeleteGenerator"
	// CanvasServiceExecuteTraceProcedure is the fully-qualified name of the CanvasService's
	// ExecuteTrace RPC.
	CanvasServiceExecuteTraceProcedure = "/sdl.v1.CanvasService/ExecuteTrace"
	// CanvasServiceTraceAllPathsProcedure is the fully-qualified name of the CanvasService's
	// TraceAllPaths RPC.
	CanvasServiceTraceAllPathsProcedure = "/sdl.v1.CanvasService/TraceAllPaths"
	// CanvasServiceSetParameterProcedure is the fully-qualified name of the CanvasService's
	// SetParameter RPC.
	CanvasServiceSetParameterProcedure = "/sdl.v1.CanvasService/SetParameter"
	// CanvasServiceGetParametersProcedure is the fully-qualified name of the CanvasService's
	// GetParameters RPC.
	CanvasServiceGetParametersProcedure = "/sdl.v1.CanvasService/GetParameters"
	// CanvasServiceBatchSetParametersProcedure is the fully-qualified name of the CanvasService's
	// BatchSetParameters RPC.
	CanvasServiceBatchSetParametersProcedure = "/sdl.v1.CanvasService/BatchSetParameters"
	// CanvasServiceEvaluateFlowsProcedure is the fully-qualified name of the CanvasService's
	// EvaluateFlows RPC.
	CanvasServiceEvaluateFlowsProcedure = "/sdl.v1.CanvasService/EvaluateFlows"
	// CanvasServiceGetFlowStateProcedure is the fully-qualified name of the CanvasService's
	// GetFlowState RPC.
	CanvasServiceGetFlowStateProcedure = "/sdl.v1.CanvasService/GetFlowState"
	// CanvasServiceAddMetricProcedure is the fully-qualified name of the CanvasService's AddMetric RPC.
	CanvasServiceAddMetricProcedure = "/sdl.v1.CanvasService/AddMetric"
	// CanvasServiceDeleteMetricProcedure is the fully-qualified name of the CanvasService's
	// DeleteMetric RPC.
	CanvasServiceDeleteMetricProcedure = "/sdl.v1.CanvasService/DeleteMetric"
	// CanvasServiceListMetricsProcedure is the fully-qualified name of the CanvasService's ListMetrics
	// RPC.
	CanvasServiceListMetricsProcedure = "/sdl.v1.CanvasService/ListMetrics"
	// CanvasServiceQueryMetricsProcedure is the fully-qualified name of the CanvasService's
	// QueryMetrics RPC.
	CanvasServiceQueryMetricsProcedure = "/sdl.v1.CanvasService/QueryMetrics"
	// CanvasServiceStreamMetricsProcedure is the fully-qualified name of the CanvasService's
	// StreamMetrics RPC.
	CanvasServiceStreamMetricsProcedure = "/sdl.v1.CanvasService/StreamMetrics"
	// CanvasServiceGetSystemDiagramProcedure is the fully-qualified name of the CanvasService's
	// GetSystemDiagram RPC.
	CanvasServiceGetSystemDiagramProcedure = "/sdl.v1.CanvasService/GetSystemDiagram"
	// CanvasServiceGetUtilizationProcedure is the fully-qualified name of the CanvasService's
	// GetUtilization RPC.
	CanvasServiceGetUtilizationProcedure = "/sdl.v1.CanvasService/GetUtilization"
)

// CanvasServiceClient is a client for the sdl.v1.CanvasService service.
type CanvasServiceClient interface {
	// *
	// Create a new canvas sesssion.
	CreateCanvas(context.Context, *connect.Request[v1.CreateCanvasRequest]) (*connect.Response[v1.CreateCanvasResponse], error)
	// *
	// List all canvases from a user.
	ListCanvases(context.Context, *connect.Request[v1.ListCanvasesRequest]) (*connect.Response[v1.ListCanvasesResponse], error)
	// *
	// Get details/stats for a particular canvas
	GetCanvas(context.Context, *connect.Request[v1.GetCanvasRequest]) (*connect.Response[v1.GetCanvasResponse], error)
	LoadFile(context.Context, *connect.Request[v1.LoadFileRequest]) (*connect.Response[v1.LoadFileResponse], error)
	UseSystem(context.Context, *connect.Request[v1.UseSystemRequest]) (*connect.Response[v1.UseSystemResponse], error)
	// *
	// Delete a particular canvas.  Frees up resources used by it and all the connections
	DeleteCanvas(context.Context, *connect.Request[v1.DeleteCanvasRequest]) (*connect.Response[v1.DeleteCanvasResponse], error)
	// *
	// Reset a canvas - clears all state, generators, and metrics
	ResetCanvas(context.Context, *connect.Request[v1.ResetCanvasRequest]) (*connect.Response[v1.ResetCanvasResponse], error)
	//	----- Generator Operations -----
	//
	// Adds a generator to a canvas's generator_ids list and creates the generator resource.
	AddGenerator(context.Context, *connect.Request[v1.AddGeneratorRequest]) (*connect.Response[v1.AddGeneratorResponse], error)
	// Request to start all generators
	StartAllGenerators(context.Context, *connect.Request[v1.StartAllGeneratorsRequest]) (*connect.Response[v1.StartAllGeneratorsResponse], error)
	// Request to start all generators
	StopAllGenerators(context.Context, *connect.Request[v1.StopAllGeneratorsRequest]) (*connect.Response[v1.StopAllGeneratorsResponse], error)
	ListGenerators(context.Context, *connect.Request[v1.ListGeneratorsRequest]) (*connect.Response[v1.ListGeneratorsResponse], error)
	GetGenerator(context.Context, *connect.Request[v1.GetGeneratorRequest]) (*connect.Response[v1.GetGeneratorResponse], error)
	// Use PATCH for partial updates to a generator (title, content)
	UpdateGenerator(context.Context, *connect.Request[v1.UpdateGeneratorRequest]) (*connect.Response[v1.UpdateGeneratorResponse], error)
	StopGenerator(context.Context, *connect.Request[v1.StopGeneratorRequest]) (*connect.Response[v1.StopGeneratorResponse], error)
	StartGenerator(context.Context, *connect.Request[v1.StartGeneratorRequest]) (*connect.Response[v1.StartGeneratorResponse], error)
	DeleteGenerator(context.Context, *connect.Request[v1.DeleteGeneratorRequest]) (*connect.Response[v1.DeleteGeneratorResponse], error)
	// Execute a single trace for debugging/analysis
	ExecuteTrace(context.Context, *connect.Request[v1.ExecuteTraceRequest]) (*connect.Response[v1.ExecuteTraceResponse], error)
	// Execute breadth-first traversal to find all possible execution paths
	TraceAllPaths(context.Context, *connect.Request[v1.TraceAllPathsRequest]) (*connect.Response[v1.TraceAllPathsResponse], error)
	// ----- Parameter Operations -----
	// Set a component parameter value
	SetParameter(context.Context, *connect.Request[v1.SetParameterRequest]) (*connect.Response[v1.SetParameterResponse], error)
	// Get parameter values
	GetParameters(context.Context, *connect.Request[v1.GetParametersRequest]) (*connect.Response[v1.GetParametersResponse], error)
	// Batch set multiple parameters atomically
	BatchSetParameters(context.Context, *connect.Request[v1.BatchSetParametersRequest]) (*connect.Response[v1.BatchSetParametersResponse], error)
	// ----- Flow Analysis Operations -----
	// Evaluate system flows using specified strategy
	EvaluateFlows(context.Context, *connect.Request[v1.EvaluateFlowsRequest]) (*connect.Response[v1.EvaluateFlowsResponse], error)
	// Get current flow state
	GetFlowState(context.Context, *connect.Request[v1.GetFlowStateRequest]) (*connect.Response[v1.GetFlowStateResponse], error)
	//	----- Generator Operations -----
	//
	// Adds a metric to live plot
	AddMetric(context.Context, *connect.Request[v1.AddMetricRequest]) (*connect.Response[v1.AddMetricResponse], error)
	// *
	// Delete a particular metriccanvas.  Frees up resources used by it and all the connections
	DeleteMetric(context.Context, *connect.Request[v1.DeleteMetricRequest]) (*connect.Response[v1.DeleteMetricResponse], error)
	// List all available metrics
	ListMetrics(context.Context, *connect.Request[v1.ListMetricsRequest]) (*connect.Response[v1.ListMetricsResponse], error)
	// Query raw metric data points
	QueryMetrics(context.Context, *connect.Request[v1.QueryMetricsRequest]) (*connect.Response[v1.QueryMetricsResponse], error)
	// Stream real-time metric updates
	StreamMetrics(context.Context, *connect.Request[v1.StreamMetricsRequest]) (*connect.ServerStreamForClient[v1.StreamMetricsResponse], error)
	// Get the system diagram for visualization
	GetSystemDiagram(context.Context, *connect.Request[v1.GetSystemDiagramRequest]) (*connect.Response[v1.GetSystemDiagramResponse], error)
	// Get resource utilization information
	GetUtilization(context.Context, *connect.Request[v1.GetUtilizationRequest]) (*connect.Response[v1.GetUtilizationResponse], error)
}

// NewCanvasServiceClient constructs a client for the sdl.v1.CanvasService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCanvasServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CanvasServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	canvasServiceMethods := v1.File_sdl_v1_canvas_proto.Services().ByName("CanvasService").Methods()
	return &canvasServiceClient{
		createCanvas: connect.NewClient[v1.CreateCanvasRequest, v1.CreateCanvasResponse](
			httpClient,
			baseURL+CanvasServiceCreateCanvasProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("CreateCanvas")),
			connect.WithClientOptions(opts...),
		),
		listCanvases: connect.NewClient[v1.ListCanvasesRequest, v1.ListCanvasesResponse](
			httpClient,
			baseURL+CanvasServiceListCanvasesProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("ListCanvases")),
			connect.WithClientOptions(opts...),
		),
		getCanvas: connect.NewClient[v1.GetCanvasRequest, v1.GetCanvasResponse](
			httpClient,
			baseURL+CanvasServiceGetCanvasProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("GetCanvas")),
			connect.WithClientOptions(opts...),
		),
		loadFile: connect.NewClient[v1.LoadFileRequest, v1.LoadFileResponse](
			httpClient,
			baseURL+CanvasServiceLoadFileProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("LoadFile")),
			connect.WithClientOptions(opts...),
		),
		useSystem: connect.NewClient[v1.UseSystemRequest, v1.UseSystemResponse](
			httpClient,
			baseURL+CanvasServiceUseSystemProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("UseSystem")),
			connect.WithClientOptions(opts...),
		),
		deleteCanvas: connect.NewClient[v1.DeleteCanvasRequest, v1.DeleteCanvasResponse](
			httpClient,
			baseURL+CanvasServiceDeleteCanvasProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("DeleteCanvas")),
			connect.WithClientOptions(opts...),
		),
		resetCanvas: connect.NewClient[v1.ResetCanvasRequest, v1.ResetCanvasResponse](
			httpClient,
			baseURL+CanvasServiceResetCanvasProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("ResetCanvas")),
			connect.WithClientOptions(opts...),
		),
		addGenerator: connect.NewClient[v1.AddGeneratorRequest, v1.AddGeneratorResponse](
			httpClient,
			baseURL+CanvasServiceAddGeneratorProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("AddGenerator")),
			connect.WithClientOptions(opts...),
		),
		startAllGenerators: connect.NewClient[v1.StartAllGeneratorsRequest, v1.StartAllGeneratorsResponse](
			httpClient,
			baseURL+CanvasServiceStartAllGeneratorsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("StartAllGenerators")),
			connect.WithClientOptions(opts...),
		),
		stopAllGenerators: connect.NewClient[v1.StopAllGeneratorsRequest, v1.StopAllGeneratorsResponse](
			httpClient,
			baseURL+CanvasServiceStopAllGeneratorsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("StopAllGenerators")),
			connect.WithClientOptions(opts...),
		),
		listGenerators: connect.NewClient[v1.ListGeneratorsRequest, v1.ListGeneratorsResponse](
			httpClient,
			baseURL+CanvasServiceListGeneratorsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("ListGenerators")),
			connect.WithClientOptions(opts...),
		),
		getGenerator: connect.NewClient[v1.GetGeneratorRequest, v1.GetGeneratorResponse](
			httpClient,
			baseURL+CanvasServiceGetGeneratorProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("GetGenerator")),
			connect.WithClientOptions(opts...),
		),
		updateGenerator: connect.NewClient[v1.UpdateGeneratorRequest, v1.UpdateGeneratorResponse](
			httpClient,
			baseURL+CanvasServiceUpdateGeneratorProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("UpdateGenerator")),
			connect.WithClientOptions(opts...),
		),
		stopGenerator: connect.NewClient[v1.StopGeneratorRequest, v1.StopGeneratorResponse](
			httpClient,
			baseURL+CanvasServiceStopGeneratorProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("StopGenerator")),
			connect.WithClientOptions(opts...),
		),
		startGenerator: connect.NewClient[v1.StartGeneratorRequest, v1.StartGeneratorResponse](
			httpClient,
			baseURL+CanvasServiceStartGeneratorProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("StartGenerator")),
			connect.WithClientOptions(opts...),
		),
		deleteGenerator: connect.NewClient[v1.DeleteGeneratorRequest, v1.DeleteGeneratorResponse](
			httpClient,
			baseURL+CanvasServiceDeleteGeneratorProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("DeleteGenerator")),
			connect.WithClientOptions(opts...),
		),
		executeTrace: connect.NewClient[v1.ExecuteTraceRequest, v1.ExecuteTraceResponse](
			httpClient,
			baseURL+CanvasServiceExecuteTraceProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("ExecuteTrace")),
			connect.WithClientOptions(opts...),
		),
		traceAllPaths: connect.NewClient[v1.TraceAllPathsRequest, v1.TraceAllPathsResponse](
			httpClient,
			baseURL+CanvasServiceTraceAllPathsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("TraceAllPaths")),
			connect.WithClientOptions(opts...),
		),
		setParameter: connect.NewClient[v1.SetParameterRequest, v1.SetParameterResponse](
			httpClient,
			baseURL+CanvasServiceSetParameterProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("SetParameter")),
			connect.WithClientOptions(opts...),
		),
		getParameters: connect.NewClient[v1.GetParametersRequest, v1.GetParametersResponse](
			httpClient,
			baseURL+CanvasServiceGetParametersProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("GetParameters")),
			connect.WithClientOptions(opts...),
		),
		batchSetParameters: connect.NewClient[v1.BatchSetParametersRequest, v1.BatchSetParametersResponse](
			httpClient,
			baseURL+CanvasServiceBatchSetParametersProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("BatchSetParameters")),
			connect.WithClientOptions(opts...),
		),
		evaluateFlows: connect.NewClient[v1.EvaluateFlowsRequest, v1.EvaluateFlowsResponse](
			httpClient,
			baseURL+CanvasServiceEvaluateFlowsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("EvaluateFlows")),
			connect.WithClientOptions(opts...),
		),
		getFlowState: connect.NewClient[v1.GetFlowStateRequest, v1.GetFlowStateResponse](
			httpClient,
			baseURL+CanvasServiceGetFlowStateProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("GetFlowState")),
			connect.WithClientOptions(opts...),
		),
		addMetric: connect.NewClient[v1.AddMetricRequest, v1.AddMetricResponse](
			httpClient,
			baseURL+CanvasServiceAddMetricProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("AddMetric")),
			connect.WithClientOptions(opts...),
		),
		deleteMetric: connect.NewClient[v1.DeleteMetricRequest, v1.DeleteMetricResponse](
			httpClient,
			baseURL+CanvasServiceDeleteMetricProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("DeleteMetric")),
			connect.WithClientOptions(opts...),
		),
		listMetrics: connect.NewClient[v1.ListMetricsRequest, v1.ListMetricsResponse](
			httpClient,
			baseURL+CanvasServiceListMetricsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("ListMetrics")),
			connect.WithClientOptions(opts...),
		),
		queryMetrics: connect.NewClient[v1.QueryMetricsRequest, v1.QueryMetricsResponse](
			httpClient,
			baseURL+CanvasServiceQueryMetricsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("QueryMetrics")),
			connect.WithClientOptions(opts...),
		),
		streamMetrics: connect.NewClient[v1.StreamMetricsRequest, v1.StreamMetricsResponse](
			httpClient,
			baseURL+CanvasServiceStreamMetricsProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("StreamMetrics")),
			connect.WithClientOptions(opts...),
		),
		getSystemDiagram: connect.NewClient[v1.GetSystemDiagramRequest, v1.GetSystemDiagramResponse](
			httpClient,
			baseURL+CanvasServiceGetSystemDiagramProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("GetSystemDiagram")),
			connect.WithClientOptions(opts...),
		),
		getUtilization: connect.NewClient[v1.GetUtilizationRequest, v1.GetUtilizationResponse](
			httpClient,
			baseURL+CanvasServiceGetUtilizationProcedure,
			connect.WithSchema(canvasServiceMethods.ByName("GetUtilization")),
			connect.WithClientOptions(opts...),
		),
	}
}

// canvasServiceClient implements CanvasServiceClient.
type canvasServiceClient struct {
	createCanvas       *connect.Client[v1.CreateCanvasRequest, v1.CreateCanvasResponse]
	listCanvases       *connect.Client[v1.ListCanvasesRequest, v1.ListCanvasesResponse]
	getCanvas          *connect.Client[v1.GetCanvasRequest, v1.GetCanvasResponse]
	loadFile           *connect.Client[v1.LoadFileRequest, v1.LoadFileResponse]
	useSystem          *connect.Client[v1.UseSystemRequest, v1.UseSystemResponse]
	deleteCanvas       *connect.Client[v1.DeleteCanvasRequest, v1.DeleteCanvasResponse]
	resetCanvas        *connect.Client[v1.ResetCanvasRequest, v1.ResetCanvasResponse]
	addGenerator       *connect.Client[v1.AddGeneratorRequest, v1.AddGeneratorResponse]
	startAllGenerators *connect.Client[v1.StartAllGeneratorsRequest, v1.StartAllGeneratorsResponse]
	stopAllGenerators  *connect.Client[v1.StopAllGeneratorsRequest, v1.StopAllGeneratorsResponse]
	listGenerators     *connect.Client[v1.ListGeneratorsRequest, v1.ListGeneratorsResponse]
	getGenerator       *connect.Client[v1.GetGeneratorRequest, v1.GetGeneratorResponse]
	updateGenerator    *connect.Client[v1.UpdateGeneratorRequest, v1.UpdateGeneratorResponse]
	stopGenerator      *connect.Client[v1.StopGeneratorRequest, v1.StopGeneratorResponse]
	startGenerator     *connect.Client[v1.StartGeneratorRequest, v1.StartGeneratorResponse]
	deleteGenerator    *connect.Client[v1.DeleteGeneratorRequest, v1.DeleteGeneratorResponse]
	executeTrace       *connect.Client[v1.ExecuteTraceRequest, v1.ExecuteTraceResponse]
	traceAllPaths      *connect.Client[v1.TraceAllPathsRequest, v1.TraceAllPathsResponse]
	setParameter       *connect.Client[v1.SetParameterRequest, v1.SetParameterResponse]
	getParameters      *connect.Client[v1.GetParametersRequest, v1.GetParametersResponse]
	batchSetParameters *connect.Client[v1.BatchSetParametersRequest, v1.BatchSetParametersResponse]
	evaluateFlows      *connect.Client[v1.EvaluateFlowsRequest, v1.EvaluateFlowsResponse]
	getFlowState       *connect.Client[v1.GetFlowStateRequest, v1.GetFlowStateResponse]
	addMetric          *connect.Client[v1.AddMetricRequest, v1.AddMetricResponse]
	deleteMetric       *connect.Client[v1.DeleteMetricRequest, v1.DeleteMetricResponse]
	listMetrics        *connect.Client[v1.ListMetricsRequest, v1.ListMetricsResponse]
	queryMetrics       *connect.Client[v1.QueryMetricsRequest, v1.QueryMetricsResponse]
	streamMetrics      *connect.Client[v1.StreamMetricsRequest, v1.StreamMetricsResponse]
	getSystemDiagram   *connect.Client[v1.GetSystemDiagramRequest, v1.GetSystemDiagramResponse]
	getUtilization     *connect.Client[v1.GetUtilizationRequest, v1.GetUtilizationResponse]
}

// CreateCanvas calls sdl.v1.CanvasService.CreateCanvas.
func (c *canvasServiceClient) CreateCanvas(ctx context.Context, req *connect.Request[v1.CreateCanvasRequest]) (*connect.Response[v1.CreateCanvasResponse], error) {
	return c.createCanvas.CallUnary(ctx, req)
}

// ListCanvases calls sdl.v1.CanvasService.ListCanvases.
func (c *canvasServiceClient) ListCanvases(ctx context.Context, req *connect.Request[v1.ListCanvasesRequest]) (*connect.Response[v1.ListCanvasesResponse], error) {
	return c.listCanvases.CallUnary(ctx, req)
}

// GetCanvas calls sdl.v1.CanvasService.GetCanvas.
func (c *canvasServiceClient) GetCanvas(ctx context.Context, req *connect.Request[v1.GetCanvasRequest]) (*connect.Response[v1.GetCanvasResponse], error) {
	return c.getCanvas.CallUnary(ctx, req)
}

// LoadFile calls sdl.v1.CanvasService.LoadFile.
func (c *canvasServiceClient) LoadFile(ctx context.Context, req *connect.Request[v1.LoadFileRequest]) (*connect.Response[v1.LoadFileResponse], error) {
	return c.loadFile.CallUnary(ctx, req)
}

// UseSystem calls sdl.v1.CanvasService.UseSystem.
func (c *canvasServiceClient) UseSystem(ctx context.Context, req *connect.Request[v1.UseSystemRequest]) (*connect.Response[v1.UseSystemResponse], error) {
	return c.useSystem.CallUnary(ctx, req)
}

// DeleteCanvas calls sdl.v1.CanvasService.DeleteCanvas.
func (c *canvasServiceClient) DeleteCanvas(ctx context.Context, req *connect.Request[v1.DeleteCanvasRequest]) (*connect.Response[v1.DeleteCanvasResponse], error) {
	return c.deleteCanvas.CallUnary(ctx, req)
}

// ResetCanvas calls sdl.v1.CanvasService.ResetCanvas.
func (c *canvasServiceClient) ResetCanvas(ctx context.Context, req *connect.Request[v1.ResetCanvasRequest]) (*connect.Response[v1.ResetCanvasResponse], error) {
	return c.resetCanvas.CallUnary(ctx, req)
}

// AddGenerator calls sdl.v1.CanvasService.AddGenerator.
func (c *canvasServiceClient) AddGenerator(ctx context.Context, req *connect.Request[v1.AddGeneratorRequest]) (*connect.Response[v1.AddGeneratorResponse], error) {
	return c.addGenerator.CallUnary(ctx, req)
}

// StartAllGenerators calls sdl.v1.CanvasService.StartAllGenerators.
func (c *canvasServiceClient) StartAllGenerators(ctx context.Context, req *connect.Request[v1.StartAllGeneratorsRequest]) (*connect.Response[v1.StartAllGeneratorsResponse], error) {
	return c.startAllGenerators.CallUnary(ctx, req)
}

// StopAllGenerators calls sdl.v1.CanvasService.StopAllGenerators.
func (c *canvasServiceClient) StopAllGenerators(ctx context.Context, req *connect.Request[v1.StopAllGeneratorsRequest]) (*connect.Response[v1.StopAllGeneratorsResponse], error) {
	return c.stopAllGenerators.CallUnary(ctx, req)
}

// ListGenerators calls sdl.v1.CanvasService.ListGenerators.
func (c *canvasServiceClient) ListGenerators(ctx context.Context, req *connect.Request[v1.ListGeneratorsRequest]) (*connect.Response[v1.ListGeneratorsResponse], error) {
	return c.listGenerators.CallUnary(ctx, req)
}

// GetGenerator calls sdl.v1.CanvasService.GetGenerator.
func (c *canvasServiceClient) GetGenerator(ctx context.Context, req *connect.Request[v1.GetGeneratorRequest]) (*connect.Response[v1.GetGeneratorResponse], error) {
	return c.getGenerator.CallUnary(ctx, req)
}

// UpdateGenerator calls sdl.v1.CanvasService.UpdateGenerator.
func (c *canvasServiceClient) UpdateGenerator(ctx context.Context, req *connect.Request[v1.UpdateGeneratorRequest]) (*connect.Response[v1.UpdateGeneratorResponse], error) {
	return c.updateGenerator.CallUnary(ctx, req)
}

// StopGenerator calls sdl.v1.CanvasService.StopGenerator.
func (c *canvasServiceClient) StopGenerator(ctx context.Context, req *connect.Request[v1.StopGeneratorRequest]) (*connect.Response[v1.StopGeneratorResponse], error) {
	return c.stopGenerator.CallUnary(ctx, req)
}

// StartGenerator calls sdl.v1.CanvasService.StartGenerator.
func (c *canvasServiceClient) StartGenerator(ctx context.Context, req *connect.Request[v1.StartGeneratorRequest]) (*connect.Response[v1.StartGeneratorResponse], error) {
	return c.startGenerator.CallUnary(ctx, req)
}

// DeleteGenerator calls sdl.v1.CanvasService.DeleteGenerator.
func (c *canvasServiceClient) DeleteGenerator(ctx context.Context, req *connect.Request[v1.DeleteGeneratorRequest]) (*connect.Response[v1.DeleteGeneratorResponse], error) {
	return c.deleteGenerator.CallUnary(ctx, req)
}

// ExecuteTrace calls sdl.v1.CanvasService.ExecuteTrace.
func (c *canvasServiceClient) ExecuteTrace(ctx context.Context, req *connect.Request[v1.ExecuteTraceRequest]) (*connect.Response[v1.ExecuteTraceResponse], error) {
	return c.executeTrace.CallUnary(ctx, req)
}

// TraceAllPaths calls sdl.v1.CanvasService.TraceAllPaths.
func (c *canvasServiceClient) TraceAllPaths(ctx context.Context, req *connect.Request[v1.TraceAllPathsRequest]) (*connect.Response[v1.TraceAllPathsResponse], error) {
	return c.traceAllPaths.CallUnary(ctx, req)
}

// SetParameter calls sdl.v1.CanvasService.SetParameter.
func (c *canvasServiceClient) SetParameter(ctx context.Context, req *connect.Request[v1.SetParameterRequest]) (*connect.Response[v1.SetParameterResponse], error) {
	return c.setParameter.CallUnary(ctx, req)
}

// GetParameters calls sdl.v1.CanvasService.GetParameters.
func (c *canvasServiceClient) GetParameters(ctx context.Context, req *connect.Request[v1.GetParametersRequest]) (*connect.Response[v1.GetParametersResponse], error) {
	return c.getParameters.CallUnary(ctx, req)
}

// BatchSetParameters calls sdl.v1.CanvasService.BatchSetParameters.
func (c *canvasServiceClient) BatchSetParameters(ctx context.Context, req *connect.Request[v1.BatchSetParametersRequest]) (*connect.Response[v1.BatchSetParametersResponse], error) {
	return c.batchSetParameters.CallUnary(ctx, req)
}

// EvaluateFlows calls sdl.v1.CanvasService.EvaluateFlows.
func (c *canvasServiceClient) EvaluateFlows(ctx context.Context, req *connect.Request[v1.EvaluateFlowsRequest]) (*connect.Response[v1.EvaluateFlowsResponse], error) {
	return c.evaluateFlows.CallUnary(ctx, req)
}

// GetFlowState calls sdl.v1.CanvasService.GetFlowState.
func (c *canvasServiceClient) GetFlowState(ctx context.Context, req *connect.Request[v1.GetFlowStateRequest]) (*connect.Response[v1.GetFlowStateResponse], error) {
	return c.getFlowState.CallUnary(ctx, req)
}

// AddMetric calls sdl.v1.CanvasService.AddMetric.
func (c *canvasServiceClient) AddMetric(ctx context.Context, req *connect.Request[v1.AddMetricRequest]) (*connect.Response[v1.AddMetricResponse], error) {
	return c.addMetric.CallUnary(ctx, req)
}

// DeleteMetric calls sdl.v1.CanvasService.DeleteMetric.
func (c *canvasServiceClient) DeleteMetric(ctx context.Context, req *connect.Request[v1.DeleteMetricRequest]) (*connect.Response[v1.DeleteMetricResponse], error) {
	return c.deleteMetric.CallUnary(ctx, req)
}

// ListMetrics calls sdl.v1.CanvasService.ListMetrics.
func (c *canvasServiceClient) ListMetrics(ctx context.Context, req *connect.Request[v1.ListMetricsRequest]) (*connect.Response[v1.ListMetricsResponse], error) {
	return c.listMetrics.CallUnary(ctx, req)
}

// QueryMetrics calls sdl.v1.CanvasService.QueryMetrics.
func (c *canvasServiceClient) QueryMetrics(ctx context.Context, req *connect.Request[v1.QueryMetricsRequest]) (*connect.Response[v1.QueryMetricsResponse], error) {
	return c.queryMetrics.CallUnary(ctx, req)
}

// StreamMetrics calls sdl.v1.CanvasService.StreamMetrics.
func (c *canvasServiceClient) StreamMetrics(ctx context.Context, req *connect.Request[v1.StreamMetricsRequest]) (*connect.ServerStreamForClient[v1.StreamMetricsResponse], error) {
	return c.streamMetrics.CallServerStream(ctx, req)
}

// GetSystemDiagram calls sdl.v1.CanvasService.GetSystemDiagram.
func (c *canvasServiceClient) GetSystemDiagram(ctx context.Context, req *connect.Request[v1.GetSystemDiagramRequest]) (*connect.Response[v1.GetSystemDiagramResponse], error) {
	return c.getSystemDiagram.CallUnary(ctx, req)
}

// GetUtilization calls sdl.v1.CanvasService.GetUtilization.
func (c *canvasServiceClient) GetUtilization(ctx context.Context, req *connect.Request[v1.GetUtilizationRequest]) (*connect.Response[v1.GetUtilizationResponse], error) {
	return c.getUtilization.CallUnary(ctx, req)
}

// CanvasServiceHandler is an implementation of the sdl.v1.CanvasService service.
type CanvasServiceHandler interface {
	// *
	// Create a new canvas sesssion.
	CreateCanvas(context.Context, *connect.Request[v1.CreateCanvasRequest]) (*connect.Response[v1.CreateCanvasResponse], error)
	// *
	// List all canvases from a user.
	ListCanvases(context.Context, *connect.Request[v1.ListCanvasesRequest]) (*connect.Response[v1.ListCanvasesResponse], error)
	// *
	// Get details/stats for a particular canvas
	GetCanvas(context.Context, *connect.Request[v1.GetCanvasRequest]) (*connect.Response[v1.GetCanvasResponse], error)
	LoadFile(context.Context, *connect.Request[v1.LoadFileRequest]) (*connect.Response[v1.LoadFileResponse], error)
	UseSystem(context.Context, *connect.Request[v1.UseSystemRequest]) (*connect.Response[v1.UseSystemResponse], error)
	// *
	// Delete a particular canvas.  Frees up resources used by it and all the connections
	DeleteCanvas(context.Context, *connect.Request[v1.DeleteCanvasRequest]) (*connect.Response[v1.DeleteCanvasResponse], error)
	// *
	// Reset a canvas - clears all state, generators, and metrics
	ResetCanvas(context.Context, *connect.Request[v1.ResetCanvasRequest]) (*connect.Response[v1.ResetCanvasResponse], error)
	//	----- Generator Operations -----
	//
	// Adds a generator to a canvas's generator_ids list and creates the generator resource.
	AddGenerator(context.Context, *connect.Request[v1.AddGeneratorRequest]) (*connect.Response[v1.AddGeneratorResponse], error)
	// Request to start all generators
	StartAllGenerators(context.Context, *connect.Request[v1.StartAllGeneratorsRequest]) (*connect.Response[v1.StartAllGeneratorsResponse], error)
	// Request to start all generators
	StopAllGenerators(context.Context, *connect.Request[v1.StopAllGeneratorsRequest]) (*connect.Response[v1.StopAllGeneratorsResponse], error)
	ListGenerators(context.Context, *connect.Request[v1.ListGeneratorsRequest]) (*connect.Response[v1.ListGeneratorsResponse], error)
	GetGenerator(context.Context, *connect.Request[v1.GetGeneratorRequest]) (*connect.Response[v1.GetGeneratorResponse], error)
	// Use PATCH for partial updates to a generator (title, content)
	UpdateGenerator(context.Context, *connect.Request[v1.UpdateGeneratorRequest]) (*connect.Response[v1.UpdateGeneratorResponse], error)
	StopGenerator(context.Context, *connect.Request[v1.StopGeneratorRequest]) (*connect.Response[v1.StopGeneratorResponse], error)
	StartGenerator(context.Context, *connect.Request[v1.StartGeneratorRequest]) (*connect.Response[v1.StartGeneratorResponse], error)
	DeleteGenerator(context.Context, *connect.Request[v1.DeleteGeneratorRequest]) (*connect.Response[v1.DeleteGeneratorResponse], error)
	// Execute a single trace for debugging/analysis
	ExecuteTrace(context.Context, *connect.Request[v1.ExecuteTraceRequest]) (*connect.Response[v1.ExecuteTraceResponse], error)
	// Execute breadth-first traversal to find all possible execution paths
	TraceAllPaths(context.Context, *connect.Request[v1.TraceAllPathsRequest]) (*connect.Response[v1.TraceAllPathsResponse], error)
	// ----- Parameter Operations -----
	// Set a component parameter value
	SetParameter(context.Context, *connect.Request[v1.SetParameterRequest]) (*connect.Response[v1.SetParameterResponse], error)
	// Get parameter values
	GetParameters(context.Context, *connect.Request[v1.GetParametersRequest]) (*connect.Response[v1.GetParametersResponse], error)
	// Batch set multiple parameters atomically
	BatchSetParameters(context.Context, *connect.Request[v1.BatchSetParametersRequest]) (*connect.Response[v1.BatchSetParametersResponse], error)
	// ----- Flow Analysis Operations -----
	// Evaluate system flows using specified strategy
	EvaluateFlows(context.Context, *connect.Request[v1.EvaluateFlowsRequest]) (*connect.Response[v1.EvaluateFlowsResponse], error)
	// Get current flow state
	GetFlowState(context.Context, *connect.Request[v1.GetFlowStateRequest]) (*connect.Response[v1.GetFlowStateResponse], error)
	//	----- Generator Operations -----
	//
	// Adds a metric to live plot
	AddMetric(context.Context, *connect.Request[v1.AddMetricRequest]) (*connect.Response[v1.AddMetricResponse], error)
	// *
	// Delete a particular metriccanvas.  Frees up resources used by it and all the connections
	DeleteMetric(context.Context, *connect.Request[v1.DeleteMetricRequest]) (*connect.Response[v1.DeleteMetricResponse], error)
	// List all available metrics
	ListMetrics(context.Context, *connect.Request[v1.ListMetricsRequest]) (*connect.Response[v1.ListMetricsResponse], error)
	// Query raw metric data points
	QueryMetrics(context.Context, *connect.Request[v1.QueryMetricsRequest]) (*connect.Response[v1.QueryMetricsResponse], error)
	// Stream real-time metric updates
	StreamMetrics(context.Context, *connect.Request[v1.StreamMetricsRequest], *connect.ServerStream[v1.StreamMetricsResponse]) error
	// Get the system diagram for visualization
	GetSystemDiagram(context.Context, *connect.Request[v1.GetSystemDiagramRequest]) (*connect.Response[v1.GetSystemDiagramResponse], error)
	// Get resource utilization information
	GetUtilization(context.Context, *connect.Request[v1.GetUtilizationRequest]) (*connect.Response[v1.GetUtilizationResponse], error)
}

// NewCanvasServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCanvasServiceHandler(svc CanvasServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	canvasServiceMethods := v1.File_sdl_v1_canvas_proto.Services().ByName("CanvasService").Methods()
	canvasServiceCreateCanvasHandler := connect.NewUnaryHandler(
		CanvasServiceCreateCanvasProcedure,
		svc.CreateCanvas,
		connect.WithSchema(canvasServiceMethods.ByName("CreateCanvas")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceListCanvasesHandler := connect.NewUnaryHandler(
		CanvasServiceListCanvasesProcedure,
		svc.ListCanvases,
		connect.WithSchema(canvasServiceMethods.ByName("ListCanvases")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceGetCanvasHandler := connect.NewUnaryHandler(
		CanvasServiceGetCanvasProcedure,
		svc.GetCanvas,
		connect.WithSchema(canvasServiceMethods.ByName("GetCanvas")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceLoadFileHandler := connect.NewUnaryHandler(
		CanvasServiceLoadFileProcedure,
		svc.LoadFile,
		connect.WithSchema(canvasServiceMethods.ByName("LoadFile")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceUseSystemHandler := connect.NewUnaryHandler(
		CanvasServiceUseSystemProcedure,
		svc.UseSystem,
		connect.WithSchema(canvasServiceMethods.ByName("UseSystem")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceDeleteCanvasHandler := connect.NewUnaryHandler(
		CanvasServiceDeleteCanvasProcedure,
		svc.DeleteCanvas,
		connect.WithSchema(canvasServiceMethods.ByName("DeleteCanvas")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceResetCanvasHandler := connect.NewUnaryHandler(
		CanvasServiceResetCanvasProcedure,
		svc.ResetCanvas,
		connect.WithSchema(canvasServiceMethods.ByName("ResetCanvas")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceAddGeneratorHandler := connect.NewUnaryHandler(
		CanvasServiceAddGeneratorProcedure,
		svc.AddGenerator,
		connect.WithSchema(canvasServiceMethods.ByName("AddGenerator")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceStartAllGeneratorsHandler := connect.NewUnaryHandler(
		CanvasServiceStartAllGeneratorsProcedure,
		svc.StartAllGenerators,
		connect.WithSchema(canvasServiceMethods.ByName("StartAllGenerators")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceStopAllGeneratorsHandler := connect.NewUnaryHandler(
		CanvasServiceStopAllGeneratorsProcedure,
		svc.StopAllGenerators,
		connect.WithSchema(canvasServiceMethods.ByName("StopAllGenerators")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceListGeneratorsHandler := connect.NewUnaryHandler(
		CanvasServiceListGeneratorsProcedure,
		svc.ListGenerators,
		connect.WithSchema(canvasServiceMethods.ByName("ListGenerators")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceGetGeneratorHandler := connect.NewUnaryHandler(
		CanvasServiceGetGeneratorProcedure,
		svc.GetGenerator,
		connect.WithSchema(canvasServiceMethods.ByName("GetGenerator")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceUpdateGeneratorHandler := connect.NewUnaryHandler(
		CanvasServiceUpdateGeneratorProcedure,
		svc.UpdateGenerator,
		connect.WithSchema(canvasServiceMethods.ByName("UpdateGenerator")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceStopGeneratorHandler := connect.NewUnaryHandler(
		CanvasServiceStopGeneratorProcedure,
		svc.StopGenerator,
		connect.WithSchema(canvasServiceMethods.ByName("StopGenerator")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceStartGeneratorHandler := connect.NewUnaryHandler(
		CanvasServiceStartGeneratorProcedure,
		svc.StartGenerator,
		connect.WithSchema(canvasServiceMethods.ByName("StartGenerator")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceDeleteGeneratorHandler := connect.NewUnaryHandler(
		CanvasServiceDeleteGeneratorProcedure,
		svc.DeleteGenerator,
		connect.WithSchema(canvasServiceMethods.ByName("DeleteGenerator")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceExecuteTraceHandler := connect.NewUnaryHandler(
		CanvasServiceExecuteTraceProcedure,
		svc.ExecuteTrace,
		connect.WithSchema(canvasServiceMethods.ByName("ExecuteTrace")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceTraceAllPathsHandler := connect.NewUnaryHandler(
		CanvasServiceTraceAllPathsProcedure,
		svc.TraceAllPaths,
		connect.WithSchema(canvasServiceMethods.ByName("TraceAllPaths")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceSetParameterHandler := connect.NewUnaryHandler(
		CanvasServiceSetParameterProcedure,
		svc.SetParameter,
		connect.WithSchema(canvasServiceMethods.ByName("SetParameter")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceGetParametersHandler := connect.NewUnaryHandler(
		CanvasServiceGetParametersProcedure,
		svc.GetParameters,
		connect.WithSchema(canvasServiceMethods.ByName("GetParameters")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceBatchSetParametersHandler := connect.NewUnaryHandler(
		CanvasServiceBatchSetParametersProcedure,
		svc.BatchSetParameters,
		connect.WithSchema(canvasServiceMethods.ByName("BatchSetParameters")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceEvaluateFlowsHandler := connect.NewUnaryHandler(
		CanvasServiceEvaluateFlowsProcedure,
		svc.EvaluateFlows,
		connect.WithSchema(canvasServiceMethods.ByName("EvaluateFlows")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceGetFlowStateHandler := connect.NewUnaryHandler(
		CanvasServiceGetFlowStateProcedure,
		svc.GetFlowState,
		connect.WithSchema(canvasServiceMethods.ByName("GetFlowState")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceAddMetricHandler := connect.NewUnaryHandler(
		CanvasServiceAddMetricProcedure,
		svc.AddMetric,
		connect.WithSchema(canvasServiceMethods.ByName("AddMetric")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceDeleteMetricHandler := connect.NewUnaryHandler(
		CanvasServiceDeleteMetricProcedure,
		svc.DeleteMetric,
		connect.WithSchema(canvasServiceMethods.ByName("DeleteMetric")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceListMetricsHandler := connect.NewUnaryHandler(
		CanvasServiceListMetricsProcedure,
		svc.ListMetrics,
		connect.WithSchema(canvasServiceMethods.ByName("ListMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceQueryMetricsHandler := connect.NewUnaryHandler(
		CanvasServiceQueryMetricsProcedure,
		svc.QueryMetrics,
		connect.WithSchema(canvasServiceMethods.ByName("QueryMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceStreamMetricsHandler := connect.NewServerStreamHandler(
		CanvasServiceStreamMetricsProcedure,
		svc.StreamMetrics,
		connect.WithSchema(canvasServiceMethods.ByName("StreamMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceGetSystemDiagramHandler := connect.NewUnaryHandler(
		CanvasServiceGetSystemDiagramProcedure,
		svc.GetSystemDiagram,
		connect.WithSchema(canvasServiceMethods.ByName("GetSystemDiagram")),
		connect.WithHandlerOptions(opts...),
	)
	canvasServiceGetUtilizationHandler := connect.NewUnaryHandler(
		CanvasServiceGetUtilizationProcedure,
		svc.GetUtilization,
		connect.WithSchema(canvasServiceMethods.ByName("GetUtilization")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sdl.v1.CanvasService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CanvasServiceCreateCanvasProcedure:
			canvasServiceCreateCanvasHandler.ServeHTTP(w, r)
		case CanvasServiceListCanvasesProcedure:
			canvasServiceListCanvasesHandler.ServeHTTP(w, r)
		case CanvasServiceGetCanvasProcedure:
			canvasServiceGetCanvasHandler.ServeHTTP(w, r)
		case CanvasServiceLoadFileProcedure:
			canvasServiceLoadFileHandler.ServeHTTP(w, r)
		case CanvasServiceUseSystemProcedure:
			canvasServiceUseSystemHandler.ServeHTTP(w, r)
		case CanvasServiceDeleteCanvasProcedure:
			canvasServiceDeleteCanvasHandler.ServeHTTP(w, r)
		case CanvasServiceResetCanvasProcedure:
			canvasServiceResetCanvasHandler.ServeHTTP(w, r)
		case CanvasServiceAddGeneratorProcedure:
			canvasServiceAddGeneratorHandler.ServeHTTP(w, r)
		case CanvasServiceStartAllGeneratorsProcedure:
			canvasServiceStartAllGeneratorsHandler.ServeHTTP(w, r)
		case CanvasServiceStopAllGeneratorsProcedure:
			canvasServiceStopAllGeneratorsHandler.ServeHTTP(w, r)
		case CanvasServiceListGeneratorsProcedure:
			canvasServiceListGeneratorsHandler.ServeHTTP(w, r)
		case CanvasServiceGetGeneratorProcedure:
			canvasServiceGetGeneratorHandler.ServeHTTP(w, r)
		case CanvasServiceUpdateGeneratorProcedure:
			canvasServiceUpdateGeneratorHandler.ServeHTTP(w, r)
		case CanvasServiceStopGeneratorProcedure:
			canvasServiceStopGeneratorHandler.ServeHTTP(w, r)
		case CanvasServiceStartGeneratorProcedure:
			canvasServiceStartGeneratorHandler.ServeHTTP(w, r)
		case CanvasServiceDeleteGeneratorProcedure:
			canvasServiceDeleteGeneratorHandler.ServeHTTP(w, r)
		case CanvasServiceExecuteTraceProcedure:
			canvasServiceExecuteTraceHandler.ServeHTTP(w, r)
		case CanvasServiceTraceAllPathsProcedure:
			canvasServiceTraceAllPathsHandler.ServeHTTP(w, r)
		case CanvasServiceSetParameterProcedure:
			canvasServiceSetParameterHandler.ServeHTTP(w, r)
		case CanvasServiceGetParametersProcedure:
			canvasServiceGetParametersHandler.ServeHTTP(w, r)
		case CanvasServiceBatchSetParametersProcedure:
			canvasServiceBatchSetParametersHandler.ServeHTTP(w, r)
		case CanvasServiceEvaluateFlowsProcedure:
			canvasServiceEvaluateFlowsHandler.ServeHTTP(w, r)
		case CanvasServiceGetFlowStateProcedure:
			canvasServiceGetFlowStateHandler.ServeHTTP(w, r)
		case CanvasServiceAddMetricProcedure:
			canvasServiceAddMetricHandler.ServeHTTP(w, r)
		case CanvasServiceDeleteMetricProcedure:
			canvasServiceDeleteMetricHandler.ServeHTTP(w, r)
		case CanvasServiceListMetricsProcedure:
			canvasServiceListMetricsHandler.ServeHTTP(w, r)
		case CanvasServiceQueryMetricsProcedure:
			canvasServiceQueryMetricsHandler.ServeHTTP(w, r)
		case CanvasServiceStreamMetricsProcedure:
			canvasServiceStreamMetricsHandler.ServeHTTP(w, r)
		case CanvasServiceGetSystemDiagramProcedure:
			canvasServiceGetSystemDiagramHandler.ServeHTTP(w, r)
		case CanvasServiceGetUtilizationProcedure:
			canvasServiceGetUtilizationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCanvasServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCanvasServiceHandler struct{}

func (UnimplementedCanvasServiceHandler) CreateCanvas(context.Context, *connect.Request[v1.CreateCanvasRequest]) (*connect.Response[v1.CreateCanvasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.CreateCanvas is not implemented"))
}

func (UnimplementedCanvasServiceHandler) ListCanvases(context.Context, *connect.Request[v1.ListCanvasesRequest]) (*connect.Response[v1.ListCanvasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.ListCanvases is not implemented"))
}

func (UnimplementedCanvasServiceHandler) GetCanvas(context.Context, *connect.Request[v1.GetCanvasRequest]) (*connect.Response[v1.GetCanvasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.GetCanvas is not implemented"))
}

func (UnimplementedCanvasServiceHandler) LoadFile(context.Context, *connect.Request[v1.LoadFileRequest]) (*connect.Response[v1.LoadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.LoadFile is not implemented"))
}

func (UnimplementedCanvasServiceHandler) UseSystem(context.Context, *connect.Request[v1.UseSystemRequest]) (*connect.Response[v1.UseSystemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.UseSystem is not implemented"))
}

func (UnimplementedCanvasServiceHandler) DeleteCanvas(context.Context, *connect.Request[v1.DeleteCanvasRequest]) (*connect.Response[v1.DeleteCanvasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.DeleteCanvas is not implemented"))
}

func (UnimplementedCanvasServiceHandler) ResetCanvas(context.Context, *connect.Request[v1.ResetCanvasRequest]) (*connect.Response[v1.ResetCanvasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.ResetCanvas is not implemented"))
}

func (UnimplementedCanvasServiceHandler) AddGenerator(context.Context, *connect.Request[v1.AddGeneratorRequest]) (*connect.Response[v1.AddGeneratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.AddGenerator is not implemented"))
}

func (UnimplementedCanvasServiceHandler) StartAllGenerators(context.Context, *connect.Request[v1.StartAllGeneratorsRequest]) (*connect.Response[v1.StartAllGeneratorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.StartAllGenerators is not implemented"))
}

func (UnimplementedCanvasServiceHandler) StopAllGenerators(context.Context, *connect.Request[v1.StopAllGeneratorsRequest]) (*connect.Response[v1.StopAllGeneratorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.StopAllGenerators is not implemented"))
}

func (UnimplementedCanvasServiceHandler) ListGenerators(context.Context, *connect.Request[v1.ListGeneratorsRequest]) (*connect.Response[v1.ListGeneratorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.ListGenerators is not implemented"))
}

func (UnimplementedCanvasServiceHandler) GetGenerator(context.Context, *connect.Request[v1.GetGeneratorRequest]) (*connect.Response[v1.GetGeneratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.GetGenerator is not implemented"))
}

func (UnimplementedCanvasServiceHandler) UpdateGenerator(context.Context, *connect.Request[v1.UpdateGeneratorRequest]) (*connect.Response[v1.UpdateGeneratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.UpdateGenerator is not implemented"))
}

func (UnimplementedCanvasServiceHandler) StopGenerator(context.Context, *connect.Request[v1.StopGeneratorRequest]) (*connect.Response[v1.StopGeneratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.StopGenerator is not implemented"))
}

func (UnimplementedCanvasServiceHandler) StartGenerator(context.Context, *connect.Request[v1.StartGeneratorRequest]) (*connect.Response[v1.StartGeneratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.StartGenerator is not implemented"))
}

func (UnimplementedCanvasServiceHandler) DeleteGenerator(context.Context, *connect.Request[v1.DeleteGeneratorRequest]) (*connect.Response[v1.DeleteGeneratorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.DeleteGenerator is not implemented"))
}

func (UnimplementedCanvasServiceHandler) ExecuteTrace(context.Context, *connect.Request[v1.ExecuteTraceRequest]) (*connect.Response[v1.ExecuteTraceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.ExecuteTrace is not implemented"))
}

func (UnimplementedCanvasServiceHandler) TraceAllPaths(context.Context, *connect.Request[v1.TraceAllPathsRequest]) (*connect.Response[v1.TraceAllPathsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.TraceAllPaths is not implemented"))
}

func (UnimplementedCanvasServiceHandler) SetParameter(context.Context, *connect.Request[v1.SetParameterRequest]) (*connect.Response[v1.SetParameterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.SetParameter is not implemented"))
}

func (UnimplementedCanvasServiceHandler) GetParameters(context.Context, *connect.Request[v1.GetParametersRequest]) (*connect.Response[v1.GetParametersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.GetParameters is not implemented"))
}

func (UnimplementedCanvasServiceHandler) BatchSetParameters(context.Context, *connect.Request[v1.BatchSetParametersRequest]) (*connect.Response[v1.BatchSetParametersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.BatchSetParameters is not implemented"))
}

func (UnimplementedCanvasServiceHandler) EvaluateFlows(context.Context, *connect.Request[v1.EvaluateFlowsRequest]) (*connect.Response[v1.EvaluateFlowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.EvaluateFlows is not implemented"))
}

func (UnimplementedCanvasServiceHandler) GetFlowState(context.Context, *connect.Request[v1.GetFlowStateRequest]) (*connect.Response[v1.GetFlowStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.GetFlowState is not implemented"))
}

func (UnimplementedCanvasServiceHandler) AddMetric(context.Context, *connect.Request[v1.AddMetricRequest]) (*connect.Response[v1.AddMetricResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.AddMetric is not implemented"))
}

func (UnimplementedCanvasServiceHandler) DeleteMetric(context.Context, *connect.Request[v1.DeleteMetricRequest]) (*connect.Response[v1.DeleteMetricResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.DeleteMetric is not implemented"))
}

func (UnimplementedCanvasServiceHandler) ListMetrics(context.Context, *connect.Request[v1.ListMetricsRequest]) (*connect.Response[v1.ListMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.ListMetrics is not implemented"))
}

func (UnimplementedCanvasServiceHandler) QueryMetrics(context.Context, *connect.Request[v1.QueryMetricsRequest]) (*connect.Response[v1.QueryMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.QueryMetrics is not implemented"))
}

func (UnimplementedCanvasServiceHandler) StreamMetrics(context.Context, *connect.Request[v1.StreamMetricsRequest], *connect.ServerStream[v1.StreamMetricsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.StreamMetrics is not implemented"))
}

func (UnimplementedCanvasServiceHandler) GetSystemDiagram(context.Context, *connect.Request[v1.GetSystemDiagramRequest]) (*connect.Response[v1.GetSystemDiagramResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.GetSystemDiagram is not implemented"))
}

func (UnimplementedCanvasServiceHandler) GetUtilization(context.Context, *connect.Request[v1.GetUtilizationRequest]) (*connect.Response[v1.GetUtilizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.CanvasService.GetUtilization is not implemented"))
}
