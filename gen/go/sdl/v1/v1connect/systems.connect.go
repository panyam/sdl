// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sdl/v1/systems.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/panyam/sdl/gen/go/sdl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SystemsServiceName is the fully-qualified name of the SystemsService service.
	SystemsServiceName = "sdl.v1.SystemsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SystemsServiceListSystemsProcedure is the fully-qualified name of the SystemsService's
	// ListSystems RPC.
	SystemsServiceListSystemsProcedure = "/sdl.v1.SystemsService/ListSystems"
	// SystemsServiceGetSystemProcedure is the fully-qualified name of the SystemsService's GetSystem
	// RPC.
	SystemsServiceGetSystemProcedure = "/sdl.v1.SystemsService/GetSystem"
	// SystemsServiceGetSystemContentProcedure is the fully-qualified name of the SystemsService's
	// GetSystemContent RPC.
	SystemsServiceGetSystemContentProcedure = "/sdl.v1.SystemsService/GetSystemContent"
)

// SystemsServiceClient is a client for the sdl.v1.SystemsService service.
type SystemsServiceClient interface {
	// ListSystems returns all available systems
	ListSystems(context.Context, *connect.Request[v1.ListSystemsRequest]) (*connect.Response[v1.ListSystemsResponse], error)
	// GetSystem returns a specific system with metadata
	GetSystem(context.Context, *connect.Request[v1.GetSystemRequest]) (*connect.Response[v1.GetSystemResponse], error)
	// GetSystemContent returns the SDL and recipe content for a system
	GetSystemContent(context.Context, *connect.Request[v1.GetSystemContentRequest]) (*connect.Response[v1.GetSystemContentResponse], error)
}

// NewSystemsServiceClient constructs a client for the sdl.v1.SystemsService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSystemsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SystemsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	systemsServiceMethods := v1.File_sdl_v1_systems_proto.Services().ByName("SystemsService").Methods()
	return &systemsServiceClient{
		listSystems: connect.NewClient[v1.ListSystemsRequest, v1.ListSystemsResponse](
			httpClient,
			baseURL+SystemsServiceListSystemsProcedure,
			connect.WithSchema(systemsServiceMethods.ByName("ListSystems")),
			connect.WithClientOptions(opts...),
		),
		getSystem: connect.NewClient[v1.GetSystemRequest, v1.GetSystemResponse](
			httpClient,
			baseURL+SystemsServiceGetSystemProcedure,
			connect.WithSchema(systemsServiceMethods.ByName("GetSystem")),
			connect.WithClientOptions(opts...),
		),
		getSystemContent: connect.NewClient[v1.GetSystemContentRequest, v1.GetSystemContentResponse](
			httpClient,
			baseURL+SystemsServiceGetSystemContentProcedure,
			connect.WithSchema(systemsServiceMethods.ByName("GetSystemContent")),
			connect.WithClientOptions(opts...),
		),
	}
}

// systemsServiceClient implements SystemsServiceClient.
type systemsServiceClient struct {
	listSystems      *connect.Client[v1.ListSystemsRequest, v1.ListSystemsResponse]
	getSystem        *connect.Client[v1.GetSystemRequest, v1.GetSystemResponse]
	getSystemContent *connect.Client[v1.GetSystemContentRequest, v1.GetSystemContentResponse]
}

// ListSystems calls sdl.v1.SystemsService.ListSystems.
func (c *systemsServiceClient) ListSystems(ctx context.Context, req *connect.Request[v1.ListSystemsRequest]) (*connect.Response[v1.ListSystemsResponse], error) {
	return c.listSystems.CallUnary(ctx, req)
}

// GetSystem calls sdl.v1.SystemsService.GetSystem.
func (c *systemsServiceClient) GetSystem(ctx context.Context, req *connect.Request[v1.GetSystemRequest]) (*connect.Response[v1.GetSystemResponse], error) {
	return c.getSystem.CallUnary(ctx, req)
}

// GetSystemContent calls sdl.v1.SystemsService.GetSystemContent.
func (c *systemsServiceClient) GetSystemContent(ctx context.Context, req *connect.Request[v1.GetSystemContentRequest]) (*connect.Response[v1.GetSystemContentResponse], error) {
	return c.getSystemContent.CallUnary(ctx, req)
}

// SystemsServiceHandler is an implementation of the sdl.v1.SystemsService service.
type SystemsServiceHandler interface {
	// ListSystems returns all available systems
	ListSystems(context.Context, *connect.Request[v1.ListSystemsRequest]) (*connect.Response[v1.ListSystemsResponse], error)
	// GetSystem returns a specific system with metadata
	GetSystem(context.Context, *connect.Request[v1.GetSystemRequest]) (*connect.Response[v1.GetSystemResponse], error)
	// GetSystemContent returns the SDL and recipe content for a system
	GetSystemContent(context.Context, *connect.Request[v1.GetSystemContentRequest]) (*connect.Response[v1.GetSystemContentResponse], error)
}

// NewSystemsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSystemsServiceHandler(svc SystemsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	systemsServiceMethods := v1.File_sdl_v1_systems_proto.Services().ByName("SystemsService").Methods()
	systemsServiceListSystemsHandler := connect.NewUnaryHandler(
		SystemsServiceListSystemsProcedure,
		svc.ListSystems,
		connect.WithSchema(systemsServiceMethods.ByName("ListSystems")),
		connect.WithHandlerOptions(opts...),
	)
	systemsServiceGetSystemHandler := connect.NewUnaryHandler(
		SystemsServiceGetSystemProcedure,
		svc.GetSystem,
		connect.WithSchema(systemsServiceMethods.ByName("GetSystem")),
		connect.WithHandlerOptions(opts...),
	)
	systemsServiceGetSystemContentHandler := connect.NewUnaryHandler(
		SystemsServiceGetSystemContentProcedure,
		svc.GetSystemContent,
		connect.WithSchema(systemsServiceMethods.ByName("GetSystemContent")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sdl.v1.SystemsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SystemsServiceListSystemsProcedure:
			systemsServiceListSystemsHandler.ServeHTTP(w, r)
		case SystemsServiceGetSystemProcedure:
			systemsServiceGetSystemHandler.ServeHTTP(w, r)
		case SystemsServiceGetSystemContentProcedure:
			systemsServiceGetSystemContentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSystemsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSystemsServiceHandler struct{}

func (UnimplementedSystemsServiceHandler) ListSystems(context.Context, *connect.Request[v1.ListSystemsRequest]) (*connect.Response[v1.ListSystemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.SystemsService.ListSystems is not implemented"))
}

func (UnimplementedSystemsServiceHandler) GetSystem(context.Context, *connect.Request[v1.GetSystemRequest]) (*connect.Response[v1.GetSystemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.SystemsService.GetSystem is not implemented"))
}

func (UnimplementedSystemsServiceHandler) GetSystemContent(context.Context, *connect.Request[v1.GetSystemContentRequest]) (*connect.Response[v1.GetSystemContentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sdl.v1.SystemsService.GetSystemContent is not implemented"))
}
