// protos/leetcoach/v1/designs.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: leetcoach/v1/designs.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DesignService_CreateDesign_FullMethodName  = "/leetcoach.v1.DesignService/CreateDesign"
	DesignService_ListDesigns_FullMethodName   = "/leetcoach.v1.DesignService/ListDesigns"
	DesignService_GetDesign_FullMethodName     = "/leetcoach.v1.DesignService/GetDesign"
	DesignService_GetDesigns_FullMethodName    = "/leetcoach.v1.DesignService/GetDesigns"
	DesignService_DeleteDesign_FullMethodName  = "/leetcoach.v1.DesignService/DeleteDesign"
	DesignService_UpdateDesign_FullMethodName  = "/leetcoach.v1.DesignService/UpdateDesign"
	DesignService_AddSection_FullMethodName    = "/leetcoach.v1.DesignService/AddSection"
	DesignService_GetSection_FullMethodName    = "/leetcoach.v1.DesignService/GetSection"
	DesignService_UpdateSection_FullMethodName = "/leetcoach.v1.DesignService/UpdateSection"
	DesignService_MoveSection_FullMethodName   = "/leetcoach.v1.DesignService/MoveSection"
	DesignService_DeleteSection_FullMethodName = "/leetcoach.v1.DesignService/DeleteSection"
)

// DesignServiceClient is the client API for DesignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Service for operating on design documents
type DesignServiceClient interface {
	// *
	// Create a new sesssion
	CreateDesign(ctx context.Context, in *CreateDesignRequest, opts ...grpc.CallOption) (*CreateDesignResponse, error)
	// *
	// List all designs from a user.
	ListDesigns(ctx context.Context, in *ListDesignsRequest, opts ...grpc.CallOption) (*ListDesignsResponse, error)
	// *
	// Get a particular design
	GetDesign(ctx context.Context, in *GetDesignRequest, opts ...grpc.CallOption) (*GetDesignResponse, error)
	// *
	// Batch get multiple designs by ID
	GetDesigns(ctx context.Context, in *GetDesignsRequest, opts ...grpc.CallOption) (*GetDesignsResponse, error)
	// *
	// Delete a particular design
	DeleteDesign(ctx context.Context, in *DeleteDesignRequest, opts ...grpc.CallOption) (*DeleteDesignResponse, error)
	// *
	// Updates specific fields of a design
	UpdateDesign(ctx context.Context, in *UpdateDesignRequest, opts ...grpc.CallOption) (*UpdateDesignResponse, error)
	// Adds a section to a design's section_ids list and creates the section resource.
	AddSection(ctx context.Context, in *AddSectionRequest, opts ...grpc.CallOption) (*Section, error)
	GetSection(ctx context.Context, in *GetSectionRequest, opts ...grpc.CallOption) (*Section, error)
	// Use PATCH for partial updates to a section (title, content)
	UpdateSection(ctx context.Context, in *UpdateSectionRequest, opts ...grpc.CallOption) (*Section, error)
	// Moves a section within the Design's section_ids list
	// We could have done this via an UpdateDesign with the changed order but this is
	// clearer and only needs to deal with the current (and target) section instead of
	// needing to know all sections for an update.
	MoveSection(ctx context.Context, in *MoveSectionRequest, opts ...grpc.CallOption) (*MoveSectionResponse, error)
	DeleteSection(ctx context.Context, in *DeleteSectionRequest, opts ...grpc.CallOption) (*DeleteSectionResponse, error)
}

type designServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDesignServiceClient(cc grpc.ClientConnInterface) DesignServiceClient {
	return &designServiceClient{cc}
}

func (c *designServiceClient) CreateDesign(ctx context.Context, in *CreateDesignRequest, opts ...grpc.CallOption) (*CreateDesignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDesignResponse)
	err := c.cc.Invoke(ctx, DesignService_CreateDesign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designServiceClient) ListDesigns(ctx context.Context, in *ListDesignsRequest, opts ...grpc.CallOption) (*ListDesignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDesignsResponse)
	err := c.cc.Invoke(ctx, DesignService_ListDesigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designServiceClient) GetDesign(ctx context.Context, in *GetDesignRequest, opts ...grpc.CallOption) (*GetDesignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDesignResponse)
	err := c.cc.Invoke(ctx, DesignService_GetDesign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designServiceClient) GetDesigns(ctx context.Context, in *GetDesignsRequest, opts ...grpc.CallOption) (*GetDesignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDesignsResponse)
	err := c.cc.Invoke(ctx, DesignService_GetDesigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designServiceClient) DeleteDesign(ctx context.Context, in *DeleteDesignRequest, opts ...grpc.CallOption) (*DeleteDesignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDesignResponse)
	err := c.cc.Invoke(ctx, DesignService_DeleteDesign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designServiceClient) UpdateDesign(ctx context.Context, in *UpdateDesignRequest, opts ...grpc.CallOption) (*UpdateDesignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDesignResponse)
	err := c.cc.Invoke(ctx, DesignService_UpdateDesign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designServiceClient) AddSection(ctx context.Context, in *AddSectionRequest, opts ...grpc.CallOption) (*Section, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Section)
	err := c.cc.Invoke(ctx, DesignService_AddSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designServiceClient) GetSection(ctx context.Context, in *GetSectionRequest, opts ...grpc.CallOption) (*Section, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Section)
	err := c.cc.Invoke(ctx, DesignService_GetSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designServiceClient) UpdateSection(ctx context.Context, in *UpdateSectionRequest, opts ...grpc.CallOption) (*Section, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Section)
	err := c.cc.Invoke(ctx, DesignService_UpdateSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designServiceClient) MoveSection(ctx context.Context, in *MoveSectionRequest, opts ...grpc.CallOption) (*MoveSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveSectionResponse)
	err := c.cc.Invoke(ctx, DesignService_MoveSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designServiceClient) DeleteSection(ctx context.Context, in *DeleteSectionRequest, opts ...grpc.CallOption) (*DeleteSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSectionResponse)
	err := c.cc.Invoke(ctx, DesignService_DeleteSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DesignServiceServer is the server API for DesignService service.
// All implementations should embed UnimplementedDesignServiceServer
// for forward compatibility.
//
// *
// Service for operating on design documents
type DesignServiceServer interface {
	// *
	// Create a new sesssion
	CreateDesign(context.Context, *CreateDesignRequest) (*CreateDesignResponse, error)
	// *
	// List all designs from a user.
	ListDesigns(context.Context, *ListDesignsRequest) (*ListDesignsResponse, error)
	// *
	// Get a particular design
	GetDesign(context.Context, *GetDesignRequest) (*GetDesignResponse, error)
	// *
	// Batch get multiple designs by ID
	GetDesigns(context.Context, *GetDesignsRequest) (*GetDesignsResponse, error)
	// *
	// Delete a particular design
	DeleteDesign(context.Context, *DeleteDesignRequest) (*DeleteDesignResponse, error)
	// *
	// Updates specific fields of a design
	UpdateDesign(context.Context, *UpdateDesignRequest) (*UpdateDesignResponse, error)
	// Adds a section to a design's section_ids list and creates the section resource.
	AddSection(context.Context, *AddSectionRequest) (*Section, error)
	GetSection(context.Context, *GetSectionRequest) (*Section, error)
	// Use PATCH for partial updates to a section (title, content)
	UpdateSection(context.Context, *UpdateSectionRequest) (*Section, error)
	// Moves a section within the Design's section_ids list
	// We could have done this via an UpdateDesign with the changed order but this is
	// clearer and only needs to deal with the current (and target) section instead of
	// needing to know all sections for an update.
	MoveSection(context.Context, *MoveSectionRequest) (*MoveSectionResponse, error)
	DeleteSection(context.Context, *DeleteSectionRequest) (*DeleteSectionResponse, error)
}

// UnimplementedDesignServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDesignServiceServer struct{}

func (UnimplementedDesignServiceServer) CreateDesign(context.Context, *CreateDesignRequest) (*CreateDesignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDesign not implemented")
}
func (UnimplementedDesignServiceServer) ListDesigns(context.Context, *ListDesignsRequest) (*ListDesignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDesigns not implemented")
}
func (UnimplementedDesignServiceServer) GetDesign(context.Context, *GetDesignRequest) (*GetDesignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesign not implemented")
}
func (UnimplementedDesignServiceServer) GetDesigns(context.Context, *GetDesignsRequest) (*GetDesignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesigns not implemented")
}
func (UnimplementedDesignServiceServer) DeleteDesign(context.Context, *DeleteDesignRequest) (*DeleteDesignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDesign not implemented")
}
func (UnimplementedDesignServiceServer) UpdateDesign(context.Context, *UpdateDesignRequest) (*UpdateDesignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDesign not implemented")
}
func (UnimplementedDesignServiceServer) AddSection(context.Context, *AddSectionRequest) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSection not implemented")
}
func (UnimplementedDesignServiceServer) GetSection(context.Context, *GetSectionRequest) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSection not implemented")
}
func (UnimplementedDesignServiceServer) UpdateSection(context.Context, *UpdateSectionRequest) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSection not implemented")
}
func (UnimplementedDesignServiceServer) MoveSection(context.Context, *MoveSectionRequest) (*MoveSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveSection not implemented")
}
func (UnimplementedDesignServiceServer) DeleteSection(context.Context, *DeleteSectionRequest) (*DeleteSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSection not implemented")
}
func (UnimplementedDesignServiceServer) testEmbeddedByValue() {}

// UnsafeDesignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DesignServiceServer will
// result in compilation errors.
type UnsafeDesignServiceServer interface {
	mustEmbedUnimplementedDesignServiceServer()
}

func RegisterDesignServiceServer(s grpc.ServiceRegistrar, srv DesignServiceServer) {
	// If the following call pancis, it indicates UnimplementedDesignServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DesignService_ServiceDesc, srv)
}

func _DesignService_CreateDesign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDesignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignServiceServer).CreateDesign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignService_CreateDesign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignServiceServer).CreateDesign(ctx, req.(*CreateDesignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignService_ListDesigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDesignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignServiceServer).ListDesigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignService_ListDesigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignServiceServer).ListDesigns(ctx, req.(*ListDesignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignService_GetDesign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDesignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignServiceServer).GetDesign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignService_GetDesign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignServiceServer).GetDesign(ctx, req.(*GetDesignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignService_GetDesigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDesignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignServiceServer).GetDesigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignService_GetDesigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignServiceServer).GetDesigns(ctx, req.(*GetDesignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignService_DeleteDesign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDesignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignServiceServer).DeleteDesign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignService_DeleteDesign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignServiceServer).DeleteDesign(ctx, req.(*DeleteDesignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignService_UpdateDesign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDesignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignServiceServer).UpdateDesign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignService_UpdateDesign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignServiceServer).UpdateDesign(ctx, req.(*UpdateDesignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignService_AddSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignServiceServer).AddSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignService_AddSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignServiceServer).AddSection(ctx, req.(*AddSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignService_GetSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignServiceServer).GetSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignService_GetSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignServiceServer).GetSection(ctx, req.(*GetSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignService_UpdateSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignServiceServer).UpdateSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignService_UpdateSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignServiceServer).UpdateSection(ctx, req.(*UpdateSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignService_MoveSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignServiceServer).MoveSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignService_MoveSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignServiceServer).MoveSection(ctx, req.(*MoveSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignService_DeleteSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignServiceServer).DeleteSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesignService_DeleteSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignServiceServer).DeleteSection(ctx, req.(*DeleteSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DesignService_ServiceDesc is the grpc.ServiceDesc for DesignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DesignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leetcoach.v1.DesignService",
	HandlerType: (*DesignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDesign",
			Handler:    _DesignService_CreateDesign_Handler,
		},
		{
			MethodName: "ListDesigns",
			Handler:    _DesignService_ListDesigns_Handler,
		},
		{
			MethodName: "GetDesign",
			Handler:    _DesignService_GetDesign_Handler,
		},
		{
			MethodName: "GetDesigns",
			Handler:    _DesignService_GetDesigns_Handler,
		},
		{
			MethodName: "DeleteDesign",
			Handler:    _DesignService_DeleteDesign_Handler,
		},
		{
			MethodName: "UpdateDesign",
			Handler:    _DesignService_UpdateDesign_Handler,
		},
		{
			MethodName: "AddSection",
			Handler:    _DesignService_AddSection_Handler,
		},
		{
			MethodName: "GetSection",
			Handler:    _DesignService_GetSection_Handler,
		},
		{
			MethodName: "UpdateSection",
			Handler:    _DesignService_UpdateSection_Handler,
		},
		{
			MethodName: "MoveSection",
			Handler:    _DesignService_MoveSection_Handler,
		},
		{
			MethodName: "DeleteSection",
			Handler:    _DesignService_DeleteSection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leetcoach/v1/designs.proto",
}
