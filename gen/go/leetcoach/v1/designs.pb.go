// protos/leetcoach/v1/designs.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: leetcoach/v1/designs.proto

package protos

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used for positioning new/moved sections
type PositionType int32

const (
	PositionType_POSITION_TYPE_UNSPECIFIED PositionType = 0
	PositionType_POSITION_TYPE_BEFORE      PositionType = 1 // Insert before the relative_section_id
	PositionType_POSITION_TYPE_AFTER       PositionType = 2 // Insert after the relative_section_id
	PositionType_POSITION_TYPE_END         PositionType = 3 // Append to the end of the design
)

// Enum value maps for PositionType.
var (
	PositionType_name = map[int32]string{
		0: "POSITION_TYPE_UNSPECIFIED",
		1: "POSITION_TYPE_BEFORE",
		2: "POSITION_TYPE_AFTER",
		3: "POSITION_TYPE_END",
	}
	PositionType_value = map[string]int32{
		"POSITION_TYPE_UNSPECIFIED": 0,
		"POSITION_TYPE_BEFORE":      1,
		"POSITION_TYPE_AFTER":       2,
		"POSITION_TYPE_END":         3,
	}
)

func (x PositionType) Enum() *PositionType {
	p := new(PositionType)
	*p = x
	return p
}

func (x PositionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionType) Descriptor() protoreflect.EnumDescriptor {
	return file_leetcoach_v1_designs_proto_enumTypes[0].Descriptor()
}

func (PositionType) Type() protoreflect.EnumType {
	return &file_leetcoach_v1_designs_proto_enumTypes[0]
}

func (x PositionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionType.Descriptor instead.
func (PositionType) EnumDescriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{0}
}

// *
// Design creation request object
type CreateDesignRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Design being updated
	Design        *Design `protobuf:"bytes,1,opt,name=design,proto3" json:"design,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDesignRequest) Reset() {
	*x = CreateDesignRequest{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDesignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDesignRequest) ProtoMessage() {}

func (x *CreateDesignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDesignRequest.ProtoReflect.Descriptor instead.
func (*CreateDesignRequest) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDesignRequest) GetDesign() *Design {
	if x != nil {
		return x.Design
	}
	return nil
}

// *
// Response of an design creation.
type CreateDesignResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Design being created
	Design *Design `protobuf:"bytes,1,opt,name=design,proto3" json:"design,omitempty"`
	// *
	// Error specific to a field if there are any errors.
	FieldErrors   map[string]string `protobuf:"bytes,2,rep,name=field_errors,json=fieldErrors,proto3" json:"field_errors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDesignResponse) Reset() {
	*x = CreateDesignResponse{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDesignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDesignResponse) ProtoMessage() {}

func (x *CreateDesignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDesignResponse.ProtoReflect.Descriptor instead.
func (*CreateDesignResponse) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDesignResponse) GetDesign() *Design {
	if x != nil {
		return x.Design
	}
	return nil
}

func (x *CreateDesignResponse) GetFieldErrors() map[string]string {
	if x != nil {
		return x.FieldErrors
	}
	return nil
}

// *
// An design search request.  For now only paginations params are provided.
type ListDesignsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pagination info
	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// *
	// Limit to designs of a particular user
	OwnerId string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// *
	// Whether to only get public ones.
	LimitToPublic bool `protobuf:"varint,5,opt,name=limit_to_public,json=limitToPublic,proto3" json:"limit_to_public,omitempty"`
	// *
	// "recent" or "name"
	OrderBy       string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDesignsRequest) Reset() {
	*x = ListDesignsRequest{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDesignsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesignsRequest) ProtoMessage() {}

func (x *ListDesignsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesignsRequest.ProtoReflect.Descriptor instead.
func (*ListDesignsRequest) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{2}
}

func (x *ListDesignsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListDesignsRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *ListDesignsRequest) GetLimitToPublic() bool {
	if x != nil {
		return x.LimitToPublic
	}
	return false
}

func (x *ListDesignsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// *
// Response of a design search/listing.
type ListDesignsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The list of designs found as part of this response.
	Designs       []*Design           `protobuf:"bytes,1,rep,name=designs,proto3" json:"designs,omitempty"`
	Pagination    *PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDesignsResponse) Reset() {
	*x = ListDesignsResponse{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDesignsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesignsResponse) ProtoMessage() {}

func (x *ListDesignsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesignsResponse.ProtoReflect.Descriptor instead.
func (*ListDesignsResponse) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{3}
}

func (x *ListDesignsResponse) GetDesigns() []*Design {
	if x != nil {
		return x.Designs
	}
	return nil
}

func (x *ListDesignsResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// *
// Request to get an design.
type GetDesignRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// ID of the design to be fetched
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// New flag to request metadata inclusion.  Note section content is NOT returned here but instead with GetSection
	IncludeSectionMetadata bool `protobuf:"varint,2,opt,name=include_section_metadata,json=includeSectionMetadata,proto3" json:"include_section_metadata,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetDesignRequest) Reset() {
	*x = GetDesignRequest{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDesignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesignRequest) ProtoMessage() {}

func (x *GetDesignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesignRequest.ProtoReflect.Descriptor instead.
func (*GetDesignRequest) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{4}
}

func (x *GetDesignRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDesignRequest) GetIncludeSectionMetadata() bool {
	if x != nil {
		return x.IncludeSectionMetadata
	}
	return false
}

// *
// Design get response
type GetDesignResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Design *Design                `protobuf:"bytes,1,opt,name=design,proto3" json:"design,omitempty"`
	// Optionally populated by server if include_section_metadata was true.
	// Sections in this list will *not* have their 'content' oneof populated.
	// The order should match design.section_ids.
	SectionsMetadata []*Section `protobuf:"bytes,2,rep,name=sections_metadata,json=sectionsMetadata,proto3" json:"sections_metadata,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetDesignResponse) Reset() {
	*x = GetDesignResponse{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDesignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesignResponse) ProtoMessage() {}

func (x *GetDesignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesignResponse.ProtoReflect.Descriptor instead.
func (*GetDesignResponse) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{5}
}

func (x *GetDesignResponse) GetDesign() *Design {
	if x != nil {
		return x.Design
	}
	return nil
}

func (x *GetDesignResponse) GetSectionsMetadata() []*Section {
	if x != nil {
		return x.SectionsMetadata
	}
	return nil
}

// *
// Request to batch get designs
type GetDesignsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// IDs of the design to be fetched
	Ids           []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDesignsRequest) Reset() {
	*x = GetDesignsRequest{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDesignsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesignsRequest) ProtoMessage() {}

func (x *GetDesignsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesignsRequest.ProtoReflect.Descriptor instead.
func (*GetDesignsRequest) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{6}
}

func (x *GetDesignsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// *
// Design batch-get response
type GetDesignsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Designs       map[string]*Design     `protobuf:"bytes,1,rep,name=designs,proto3" json:"designs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDesignsResponse) Reset() {
	*x = GetDesignsResponse{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDesignsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesignsResponse) ProtoMessage() {}

func (x *GetDesignsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesignsResponse.ProtoReflect.Descriptor instead.
func (*GetDesignsResponse) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{7}
}

func (x *GetDesignsResponse) GetDesigns() map[string]*Design {
	if x != nil {
		return x.Designs
	}
	return nil
}

// *
// Request to delete an design.
type DeleteDesignRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// ID of the design to be deleted.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDesignRequest) Reset() {
	*x = DeleteDesignRequest{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDesignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDesignRequest) ProtoMessage() {}

func (x *DeleteDesignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDesignRequest.ProtoReflect.Descriptor instead.
func (*DeleteDesignRequest) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDesignRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// *
// Design deletion response
type DeleteDesignResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDesignResponse) Reset() {
	*x = DeleteDesignResponse{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDesignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDesignResponse) ProtoMessage() {}

func (x *DeleteDesignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDesignResponse.ProtoReflect.Descriptor instead.
func (*DeleteDesignResponse) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{9}
}

// *
// The request for (partially) updating an Design.  Note this only updates design level metadata.
// Specific changes to section contetn will not happen here.
type UpdateDesignRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Design being updated
	Design *Design `protobuf:"bytes,1,opt,name=design,proto3" json:"design,omitempty"`
	// *
	// Mask of fields being updated in this Design to make partial changes.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDesignRequest) Reset() {
	*x = UpdateDesignRequest{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDesignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDesignRequest) ProtoMessage() {}

func (x *UpdateDesignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDesignRequest.ProtoReflect.Descriptor instead.
func (*UpdateDesignRequest) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDesignRequest) GetDesign() *Design {
	if x != nil {
		return x.Design
	}
	return nil
}

func (x *UpdateDesignRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// *
// The request for (partially) updating an Design.
type UpdateDesignResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Design being updated
	Design        *Design `protobuf:"bytes,1,opt,name=design,proto3" json:"design,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDesignResponse) Reset() {
	*x = UpdateDesignResponse{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDesignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDesignResponse) ProtoMessage() {}

func (x *UpdateDesignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDesignResponse.ProtoReflect.Descriptor instead.
func (*UpdateDesignResponse) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateDesignResponse) GetDesign() *Design {
	if x != nil {
		return x.Design
	}
	return nil
}

type AddSectionRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Section           *Section               `protobuf:"bytes,1,opt,name=section,proto3" json:"section,omitempty"`
	RelativeSectionId string                 `protobuf:"bytes,2,opt,name=relative_section_id,json=relativeSectionId,proto3" json:"relative_section_id,omitempty"`
	Position          PositionType           `protobuf:"varint,3,opt,name=position,proto3,enum=leetcoach.v1.PositionType" json:"position,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AddSectionRequest) Reset() {
	*x = AddSectionRequest{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSectionRequest) ProtoMessage() {}

func (x *AddSectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSectionRequest.ProtoReflect.Descriptor instead.
func (*AddSectionRequest) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{12}
}

func (x *AddSectionRequest) GetSection() *Section {
	if x != nil {
		return x.Section
	}
	return nil
}

func (x *AddSectionRequest) GetRelativeSectionId() string {
	if x != nil {
		return x.RelativeSectionId
	}
	return ""
}

func (x *AddSectionRequest) GetPosition() PositionType {
	if x != nil {
		return x.Position
	}
	return PositionType_POSITION_TYPE_UNSPECIFIED
}

type GetSectionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DesignId      string                 `protobuf:"bytes,1,opt,name=design_id,json=designId,proto3" json:"design_id,omitempty"`
	SectionId     string                 `protobuf:"bytes,2,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSectionRequest) Reset() {
	*x = GetSectionRequest{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSectionRequest) ProtoMessage() {}

func (x *GetSectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSectionRequest.ProtoReflect.Descriptor instead.
func (*GetSectionRequest) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{13}
}

func (x *GetSectionRequest) GetDesignId() string {
	if x != nil {
		return x.DesignId
	}
	return ""
}

func (x *GetSectionRequest) GetSectionId() string {
	if x != nil {
		return x.SectionId
	}
	return ""
}

// Consolidate section updates into one RPC using PATCH and FieldMask
type UpdateSectionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Section object containing *only* the fields to be updated.
	// The server will use the update_mask to know which fields from
	// this 'section' message to apply to the stored section.
	Section       *Section               `protobuf:"bytes,1,opt,name=section,proto3" json:"section,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"` // e.g., paths: "title", paths: "text_content"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSectionRequest) Reset() {
	*x = UpdateSectionRequest{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSectionRequest) ProtoMessage() {}

func (x *UpdateSectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSectionRequest) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateSectionRequest) GetSection() *Section {
	if x != nil {
		return x.Section
	}
	return nil
}

func (x *UpdateSectionRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type MoveSectionRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DesignId          string                 `protobuf:"bytes,1,opt,name=design_id,json=designId,proto3" json:"design_id,omitempty"`
	SectionId         string                 `protobuf:"bytes,2,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"` // The section being moved
	RelativeSectionId string                 `protobuf:"bytes,3,opt,name=relative_section_id,json=relativeSectionId,proto3" json:"relative_section_id,omitempty"`
	Position          PositionType           `protobuf:"varint,4,opt,name=position,proto3,enum=leetcoach.v1.PositionType" json:"position,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MoveSectionRequest) Reset() {
	*x = MoveSectionRequest{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveSectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveSectionRequest) ProtoMessage() {}

func (x *MoveSectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveSectionRequest.ProtoReflect.Descriptor instead.
func (*MoveSectionRequest) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{15}
}

func (x *MoveSectionRequest) GetDesignId() string {
	if x != nil {
		return x.DesignId
	}
	return ""
}

func (x *MoveSectionRequest) GetSectionId() string {
	if x != nil {
		return x.SectionId
	}
	return ""
}

func (x *MoveSectionRequest) GetRelativeSectionId() string {
	if x != nil {
		return x.RelativeSectionId
	}
	return ""
}

func (x *MoveSectionRequest) GetPosition() PositionType {
	if x != nil {
		return x.Position
	}
	return PositionType_POSITION_TYPE_UNSPECIFIED
}

type MoveSectionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveSectionResponse) Reset() {
	*x = MoveSectionResponse{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveSectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveSectionResponse) ProtoMessage() {}

func (x *MoveSectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveSectionResponse.ProtoReflect.Descriptor instead.
func (*MoveSectionResponse) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{16}
}

type DeleteSectionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DesignId      string                 `protobuf:"bytes,1,opt,name=design_id,json=designId,proto3" json:"design_id,omitempty"`
	SectionId     string                 `protobuf:"bytes,2,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSectionRequest) Reset() {
	*x = DeleteSectionRequest{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSectionRequest) ProtoMessage() {}

func (x *DeleteSectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSectionRequest) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteSectionRequest) GetDesignId() string {
	if x != nil {
		return x.DesignId
	}
	return ""
}

func (x *DeleteSectionRequest) GetSectionId() string {
	if x != nil {
		return x.SectionId
	}
	return ""
}

type DeleteSectionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSectionResponse) Reset() {
	*x = DeleteSectionResponse{}
	mi := &file_leetcoach_v1_designs_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSectionResponse) ProtoMessage() {}

func (x *DeleteSectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leetcoach_v1_designs_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSectionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSectionResponse) Descriptor() ([]byte, []int) {
	return file_leetcoach_v1_designs_proto_rawDescGZIP(), []int{18}
}

var File_leetcoach_v1_designs_proto protoreflect.FileDescriptor

var file_leetcoach_v1_designs_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x65,
	0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6c, 0x65,
	0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61,
	0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x43, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63,
	0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x06,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x06, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x56, 0x0a,
	0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x52, 0x07, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x85, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x06, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x12, 0x42, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x65,
	0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x1a, 0x50, 0x0a, 0x0c, 0x44,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c,
	0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x06, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x3a,
	0x1a, 0x92, 0x41, 0x17, 0x0a, 0x15, 0x2a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x06, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x3a, 0x1b, 0x92, 0x41, 0x18, 0x0a, 0x16, 0x2a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac,
	0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f,
	0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x84,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63,
	0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xb8, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x65,
	0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x15, 0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x77, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x46, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x32, 0xdd, 0x0a,
	0x0a, 0x0d, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x6d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x12,
	0x21, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01,
	0x2a, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x67,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x20, 0x2e,
	0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x1e, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a,
	0x7d, 0x12, 0x6d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x12,
	0x1f, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x12, 0x71, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x12, 0x21, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a,
	0x12, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x12, 0x7b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x21, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x32, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x69, 0x64, 0x3d, 0x2a, 0x7d,
	0x12, 0x79, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01,
	0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x2f, 0x7b,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7b, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x6c, 0x65, 0x65, 0x74,
	0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6c, 0x65, 0x65,
	0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6c, 0x65, 0x65,
	0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x01, 0x2a,
	0x32, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x2f, 0x7b, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f,
	0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x65, 0x65, 0x74,
	0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e,
	0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x8e, 0x01,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x42, 0x0c, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x1b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0xa2,
	0x02, 0x03, 0x4c, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x4c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63,
	0x68, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x4c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x4c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0d, 0x4c, 0x65, 0x65, 0x74, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_leetcoach_v1_designs_proto_rawDescOnce sync.Once
	file_leetcoach_v1_designs_proto_rawDescData []byte
)

func file_leetcoach_v1_designs_proto_rawDescGZIP() []byte {
	file_leetcoach_v1_designs_proto_rawDescOnce.Do(func() {
		file_leetcoach_v1_designs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_leetcoach_v1_designs_proto_rawDesc), len(file_leetcoach_v1_designs_proto_rawDesc)))
	})
	return file_leetcoach_v1_designs_proto_rawDescData
}

var file_leetcoach_v1_designs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_leetcoach_v1_designs_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_leetcoach_v1_designs_proto_goTypes = []any{
	(PositionType)(0),             // 0: leetcoach.v1.PositionType
	(*CreateDesignRequest)(nil),   // 1: leetcoach.v1.CreateDesignRequest
	(*CreateDesignResponse)(nil),  // 2: leetcoach.v1.CreateDesignResponse
	(*ListDesignsRequest)(nil),    // 3: leetcoach.v1.ListDesignsRequest
	(*ListDesignsResponse)(nil),   // 4: leetcoach.v1.ListDesignsResponse
	(*GetDesignRequest)(nil),      // 5: leetcoach.v1.GetDesignRequest
	(*GetDesignResponse)(nil),     // 6: leetcoach.v1.GetDesignResponse
	(*GetDesignsRequest)(nil),     // 7: leetcoach.v1.GetDesignsRequest
	(*GetDesignsResponse)(nil),    // 8: leetcoach.v1.GetDesignsResponse
	(*DeleteDesignRequest)(nil),   // 9: leetcoach.v1.DeleteDesignRequest
	(*DeleteDesignResponse)(nil),  // 10: leetcoach.v1.DeleteDesignResponse
	(*UpdateDesignRequest)(nil),   // 11: leetcoach.v1.UpdateDesignRequest
	(*UpdateDesignResponse)(nil),  // 12: leetcoach.v1.UpdateDesignResponse
	(*AddSectionRequest)(nil),     // 13: leetcoach.v1.AddSectionRequest
	(*GetSectionRequest)(nil),     // 14: leetcoach.v1.GetSectionRequest
	(*UpdateSectionRequest)(nil),  // 15: leetcoach.v1.UpdateSectionRequest
	(*MoveSectionRequest)(nil),    // 16: leetcoach.v1.MoveSectionRequest
	(*MoveSectionResponse)(nil),   // 17: leetcoach.v1.MoveSectionResponse
	(*DeleteSectionRequest)(nil),  // 18: leetcoach.v1.DeleteSectionRequest
	(*DeleteSectionResponse)(nil), // 19: leetcoach.v1.DeleteSectionResponse
	nil,                           // 20: leetcoach.v1.CreateDesignResponse.FieldErrorsEntry
	nil,                           // 21: leetcoach.v1.GetDesignsResponse.DesignsEntry
	(*Design)(nil),                // 22: leetcoach.v1.Design
	(*Pagination)(nil),            // 23: leetcoach.v1.Pagination
	(*PaginationResponse)(nil),    // 24: leetcoach.v1.PaginationResponse
	(*Section)(nil),               // 25: leetcoach.v1.Section
	(*fieldmaskpb.FieldMask)(nil), // 26: google.protobuf.FieldMask
}
var file_leetcoach_v1_designs_proto_depIdxs = []int32{
	22, // 0: leetcoach.v1.CreateDesignRequest.design:type_name -> leetcoach.v1.Design
	22, // 1: leetcoach.v1.CreateDesignResponse.design:type_name -> leetcoach.v1.Design
	20, // 2: leetcoach.v1.CreateDesignResponse.field_errors:type_name -> leetcoach.v1.CreateDesignResponse.FieldErrorsEntry
	23, // 3: leetcoach.v1.ListDesignsRequest.pagination:type_name -> leetcoach.v1.Pagination
	22, // 4: leetcoach.v1.ListDesignsResponse.designs:type_name -> leetcoach.v1.Design
	24, // 5: leetcoach.v1.ListDesignsResponse.pagination:type_name -> leetcoach.v1.PaginationResponse
	22, // 6: leetcoach.v1.GetDesignResponse.design:type_name -> leetcoach.v1.Design
	25, // 7: leetcoach.v1.GetDesignResponse.sections_metadata:type_name -> leetcoach.v1.Section
	21, // 8: leetcoach.v1.GetDesignsResponse.designs:type_name -> leetcoach.v1.GetDesignsResponse.DesignsEntry
	22, // 9: leetcoach.v1.UpdateDesignRequest.design:type_name -> leetcoach.v1.Design
	26, // 10: leetcoach.v1.UpdateDesignRequest.update_mask:type_name -> google.protobuf.FieldMask
	22, // 11: leetcoach.v1.UpdateDesignResponse.design:type_name -> leetcoach.v1.Design
	25, // 12: leetcoach.v1.AddSectionRequest.section:type_name -> leetcoach.v1.Section
	0,  // 13: leetcoach.v1.AddSectionRequest.position:type_name -> leetcoach.v1.PositionType
	25, // 14: leetcoach.v1.UpdateSectionRequest.section:type_name -> leetcoach.v1.Section
	26, // 15: leetcoach.v1.UpdateSectionRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 16: leetcoach.v1.MoveSectionRequest.position:type_name -> leetcoach.v1.PositionType
	22, // 17: leetcoach.v1.GetDesignsResponse.DesignsEntry.value:type_name -> leetcoach.v1.Design
	1,  // 18: leetcoach.v1.DesignService.CreateDesign:input_type -> leetcoach.v1.CreateDesignRequest
	3,  // 19: leetcoach.v1.DesignService.ListDesigns:input_type -> leetcoach.v1.ListDesignsRequest
	5,  // 20: leetcoach.v1.DesignService.GetDesign:input_type -> leetcoach.v1.GetDesignRequest
	7,  // 21: leetcoach.v1.DesignService.GetDesigns:input_type -> leetcoach.v1.GetDesignsRequest
	9,  // 22: leetcoach.v1.DesignService.DeleteDesign:input_type -> leetcoach.v1.DeleteDesignRequest
	11, // 23: leetcoach.v1.DesignService.UpdateDesign:input_type -> leetcoach.v1.UpdateDesignRequest
	13, // 24: leetcoach.v1.DesignService.AddSection:input_type -> leetcoach.v1.AddSectionRequest
	14, // 25: leetcoach.v1.DesignService.GetSection:input_type -> leetcoach.v1.GetSectionRequest
	15, // 26: leetcoach.v1.DesignService.UpdateSection:input_type -> leetcoach.v1.UpdateSectionRequest
	16, // 27: leetcoach.v1.DesignService.MoveSection:input_type -> leetcoach.v1.MoveSectionRequest
	18, // 28: leetcoach.v1.DesignService.DeleteSection:input_type -> leetcoach.v1.DeleteSectionRequest
	2,  // 29: leetcoach.v1.DesignService.CreateDesign:output_type -> leetcoach.v1.CreateDesignResponse
	4,  // 30: leetcoach.v1.DesignService.ListDesigns:output_type -> leetcoach.v1.ListDesignsResponse
	6,  // 31: leetcoach.v1.DesignService.GetDesign:output_type -> leetcoach.v1.GetDesignResponse
	8,  // 32: leetcoach.v1.DesignService.GetDesigns:output_type -> leetcoach.v1.GetDesignsResponse
	10, // 33: leetcoach.v1.DesignService.DeleteDesign:output_type -> leetcoach.v1.DeleteDesignResponse
	12, // 34: leetcoach.v1.DesignService.UpdateDesign:output_type -> leetcoach.v1.UpdateDesignResponse
	25, // 35: leetcoach.v1.DesignService.AddSection:output_type -> leetcoach.v1.Section
	25, // 36: leetcoach.v1.DesignService.GetSection:output_type -> leetcoach.v1.Section
	25, // 37: leetcoach.v1.DesignService.UpdateSection:output_type -> leetcoach.v1.Section
	17, // 38: leetcoach.v1.DesignService.MoveSection:output_type -> leetcoach.v1.MoveSectionResponse
	19, // 39: leetcoach.v1.DesignService.DeleteSection:output_type -> leetcoach.v1.DeleteSectionResponse
	29, // [29:40] is the sub-list for method output_type
	18, // [18:29] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_leetcoach_v1_designs_proto_init() }
func file_leetcoach_v1_designs_proto_init() {
	if File_leetcoach_v1_designs_proto != nil {
		return
	}
	file_leetcoach_v1_models_proto_init()
	file_leetcoach_v1_content_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_leetcoach_v1_designs_proto_rawDesc), len(file_leetcoach_v1_designs_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_leetcoach_v1_designs_proto_goTypes,
		DependencyIndexes: file_leetcoach_v1_designs_proto_depIdxs,
		EnumInfos:         file_leetcoach_v1_designs_proto_enumTypes,
		MessageInfos:      file_leetcoach_v1_designs_proto_msgTypes,
	}.Build()
	File_leetcoach_v1_designs_proto = out.File
	file_leetcoach_v1_designs_proto_goTypes = nil
	file_leetcoach_v1_designs_proto_depIdxs = nil
}
