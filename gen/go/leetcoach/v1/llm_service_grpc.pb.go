// FILE: ./proto/leetcoach/v1/llm_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: leetcoach/v1/llm_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LlmService_SimpleLlmQuery_FullMethodName         = "/leetcoach.v1.LlmService/SimpleLlmQuery"
	LlmService_SuggestSections_FullMethodName        = "/leetcoach.v1.LlmService/SuggestSections"
	LlmService_GenerateTextContent_FullMethodName    = "/leetcoach.v1.LlmService/GenerateTextContent"
	LlmService_ReviewTextContent_FullMethodName      = "/leetcoach.v1.LlmService/ReviewTextContent"
	LlmService_GenerateDefaultPrompts_FullMethodName = "/leetcoach.v1.LlmService/GenerateDefaultPrompts"
)

// LlmServiceClient is the client API for LlmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LlmService provides access to Large Language Model features.
type LlmServiceClient interface {
	// SimpleLlmQuery sends a basic prompt to the LLM.
	// Primarily for initial testing and simple use cases.
	SimpleLlmQuery(ctx context.Context, in *SimpleLlmQueryRequest, opts ...grpc.CallOption) (*SimpleLlmQueryResponse, error)
	// SuggestSections recommends relevant sections to add based on existing ones.
	SuggestSections(ctx context.Context, in *SuggestSectionsRequest, opts ...grpc.CallOption) (*SuggestSectionsResponse, error)
	// GenerateTextContent attempts to generate content for a text section.
	GenerateTextContent(ctx context.Context, in *GenerateTextContentRequest, opts ...grpc.CallOption) (*GenerateTextContentResponse, error)
	// ReviewTextContent asks the LLM to review existing text content.
	ReviewTextContent(ctx context.Context, in *ReviewTextContentRequest, opts ...grpc.CallOption) (*ReviewTextContentResponse, error)
	// GenerateDefaultPrompts generates and saves default prompts for a section.
	GenerateDefaultPrompts(ctx context.Context, in *GenerateDefaultPromptsRequest, opts ...grpc.CallOption) (*GenerateDefaultPromptsResponse, error)
}

type llmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLlmServiceClient(cc grpc.ClientConnInterface) LlmServiceClient {
	return &llmServiceClient{cc}
}

func (c *llmServiceClient) SimpleLlmQuery(ctx context.Context, in *SimpleLlmQueryRequest, opts ...grpc.CallOption) (*SimpleLlmQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleLlmQueryResponse)
	err := c.cc.Invoke(ctx, LlmService_SimpleLlmQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmServiceClient) SuggestSections(ctx context.Context, in *SuggestSectionsRequest, opts ...grpc.CallOption) (*SuggestSectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuggestSectionsResponse)
	err := c.cc.Invoke(ctx, LlmService_SuggestSections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmServiceClient) GenerateTextContent(ctx context.Context, in *GenerateTextContentRequest, opts ...grpc.CallOption) (*GenerateTextContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateTextContentResponse)
	err := c.cc.Invoke(ctx, LlmService_GenerateTextContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmServiceClient) ReviewTextContent(ctx context.Context, in *ReviewTextContentRequest, opts ...grpc.CallOption) (*ReviewTextContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewTextContentResponse)
	err := c.cc.Invoke(ctx, LlmService_ReviewTextContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmServiceClient) GenerateDefaultPrompts(ctx context.Context, in *GenerateDefaultPromptsRequest, opts ...grpc.CallOption) (*GenerateDefaultPromptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateDefaultPromptsResponse)
	err := c.cc.Invoke(ctx, LlmService_GenerateDefaultPrompts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LlmServiceServer is the server API for LlmService service.
// All implementations should embed UnimplementedLlmServiceServer
// for forward compatibility.
//
// LlmService provides access to Large Language Model features.
type LlmServiceServer interface {
	// SimpleLlmQuery sends a basic prompt to the LLM.
	// Primarily for initial testing and simple use cases.
	SimpleLlmQuery(context.Context, *SimpleLlmQueryRequest) (*SimpleLlmQueryResponse, error)
	// SuggestSections recommends relevant sections to add based on existing ones.
	SuggestSections(context.Context, *SuggestSectionsRequest) (*SuggestSectionsResponse, error)
	// GenerateTextContent attempts to generate content for a text section.
	GenerateTextContent(context.Context, *GenerateTextContentRequest) (*GenerateTextContentResponse, error)
	// ReviewTextContent asks the LLM to review existing text content.
	ReviewTextContent(context.Context, *ReviewTextContentRequest) (*ReviewTextContentResponse, error)
	// GenerateDefaultPrompts generates and saves default prompts for a section.
	GenerateDefaultPrompts(context.Context, *GenerateDefaultPromptsRequest) (*GenerateDefaultPromptsResponse, error)
}

// UnimplementedLlmServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLlmServiceServer struct{}

func (UnimplementedLlmServiceServer) SimpleLlmQuery(context.Context, *SimpleLlmQueryRequest) (*SimpleLlmQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleLlmQuery not implemented")
}
func (UnimplementedLlmServiceServer) SuggestSections(context.Context, *SuggestSectionsRequest) (*SuggestSectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestSections not implemented")
}
func (UnimplementedLlmServiceServer) GenerateTextContent(context.Context, *GenerateTextContentRequest) (*GenerateTextContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTextContent not implemented")
}
func (UnimplementedLlmServiceServer) ReviewTextContent(context.Context, *ReviewTextContentRequest) (*ReviewTextContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewTextContent not implemented")
}
func (UnimplementedLlmServiceServer) GenerateDefaultPrompts(context.Context, *GenerateDefaultPromptsRequest) (*GenerateDefaultPromptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDefaultPrompts not implemented")
}
func (UnimplementedLlmServiceServer) testEmbeddedByValue() {}

// UnsafeLlmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LlmServiceServer will
// result in compilation errors.
type UnsafeLlmServiceServer interface {
	mustEmbedUnimplementedLlmServiceServer()
}

func RegisterLlmServiceServer(s grpc.ServiceRegistrar, srv LlmServiceServer) {
	// If the following call pancis, it indicates UnimplementedLlmServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LlmService_ServiceDesc, srv)
}

func _LlmService_SimpleLlmQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleLlmQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmServiceServer).SimpleLlmQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LlmService_SimpleLlmQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmServiceServer).SimpleLlmQuery(ctx, req.(*SimpleLlmQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LlmService_SuggestSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmServiceServer).SuggestSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LlmService_SuggestSections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmServiceServer).SuggestSections(ctx, req.(*SuggestSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LlmService_GenerateTextContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTextContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmServiceServer).GenerateTextContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LlmService_GenerateTextContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmServiceServer).GenerateTextContent(ctx, req.(*GenerateTextContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LlmService_ReviewTextContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewTextContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmServiceServer).ReviewTextContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LlmService_ReviewTextContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmServiceServer).ReviewTextContent(ctx, req.(*ReviewTextContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LlmService_GenerateDefaultPrompts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDefaultPromptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmServiceServer).GenerateDefaultPrompts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LlmService_GenerateDefaultPrompts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmServiceServer).GenerateDefaultPrompts(ctx, req.(*GenerateDefaultPromptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LlmService_ServiceDesc is the grpc.ServiceDesc for LlmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LlmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leetcoach.v1.LlmService",
	HandlerType: (*LlmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleLlmQuery",
			Handler:    _LlmService_SimpleLlmQuery_Handler,
		},
		{
			MethodName: "SuggestSections",
			Handler:    _LlmService_SuggestSections_Handler,
		},
		{
			MethodName: "GenerateTextContent",
			Handler:    _LlmService_GenerateTextContent_Handler,
		},
		{
			MethodName: "ReviewTextContent",
			Handler:    _LlmService_ReviewTextContent_Handler,
		},
		{
			MethodName: "GenerateDefaultPrompts",
			Handler:    _LlmService_GenerateDefaultPrompts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leetcoach/v1/llm_service.proto",
}
