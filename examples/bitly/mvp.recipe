
#!/usr/bin/env bash
# Bitly MVP Demo Script
# Shows the evolution from a simple monolithic system to a distributed architecture

# "=== Bitly MVP Demo - 'URL Shortener' ==="
# "Loading the MVP system" 
sdl load examples/bitly/mvp.sdl

# "Activate the UberMVP system"
sdl use Bitly

# Load the MVP system

# "=== Setting up metrics ==="
# "Let's set up metrics to monitor our system performance."
# "We'll track request latency, database query time and resource utilization."

# Add all metrics
# "Adding request latency metric" 
sdl metrics add request_latency webserver RequestRide --type latency --window=1 --aggregation=p90

# "Adding Maps API latency metric" 
sdl metrics add maps_latency mapsService CalculateRoute  --type latency --window=1 --aggregation=p90

# "Adding database query time metric" 
sdl metrics add db_query database FindNearestDriver  --type latency --window=1 --aggregation=p90

# "Adding utilization metric for db" 
sdl metrics add db_utilization database --type utilization --window 1

# Note: Pool utilization metrics not supported yet - only latency and count
# execWithConfirm "Adding database pool utilization metric" sdl metrics add db_pool database pool utilization
# execWithConfirm "Adding server pool utilization metric" sdl metrics add server_pool webserver pool utilization

# "=== Setting Pool Parameters ==="
# "First, let's configure the resource pools with realistic hold times..."

# Database connections held for average of all operations
# FindNearestDriver: full scan time, CreateRide: 50ms, UpdateLocation: Find + 10ms
# The scan time will vary based on number of records

# "Setting database pool hold time" 
sdl set database.pool.AvgHoldTime 0.15

# Maps API calls take 100ms
# "Setting maps API hold time" 
sdl set mapsService.pool.AvgHoldTime 0.1


# "=== Baseline Traffic (5 RPS) ==="
# "Let's start with normal traffic - 5 requests per second."
# "The system should handle this, but notice the latency..."

# Start baseline traffic
# "Creating baseline generator (5 RPS) with automatic flow calculation" 
sdl gen add baseline webserver.RequestRide 5 --apply-flows

# execWithConfirm "Starting baseline traffic" sdl gen start baseline

# sdl canvas diagram


# "=== Database Performance Demo ==="
# "Let's see how the database performs with different numbers of drivers..."
# execWithConfirm "Check current scan time with 10k drivers" sdl run database.driverTable.Scan

# "Now let's simulate growth - more drivers in the system..."
# "Increase to 50k drivers" 
sdl set database.driverTable.NumRecords 50000


echo "Let's reset back to 10k for our demo..."
echo "Reset to 10k drivers" 
sdl set database.driverTable.NumRecords 10000

# Note: Arrival rates are now automatically calculated and applied with --apply-flows

echo "=== Observing Baseline Performance ==="
echo "Notice:"
echo "- Latency is 350-400ms per request (quite high!)"
echo "- Database query takes 200ms (full table scan)"
echo "- Every request hits the Maps API (100ms)"
echo "- But it works! All requests succeed"
echo ""
echo "Press enter to add driver location updates..."
read

# Add background driver updates
execWithConfirm "Creating driver location update generator (10 RPS) with automatic flow calculation..." sdl gen add drivers webserver.UpdateLocation 10 --apply-flows
execWithConfirm "Starting driver updates..." sdl gen start drivers

# Note: Arrival rates are automatically calculated and applied with --apply-flows

echo ""
echo "=== Morning Rush Hour (20 RPS) ==="
echo "Now let's simulate morning rush hour with 20 requests per second."
echo "Watch what happens to our tiny connection pool..."
echo ""
echo "Press enter to simulate morning rush..."
read

# Increase load by updating the baseline generator rate
execWithConfirm "Updating baseline generator to 20 RPS for morning rush..." sdl gen update baseline 20 --apply-flows

# Note: Arrival rates are automatically calculated and applied with --apply-flows

echo ""
echo "=== System Under Stress ==="
echo "Observe:"
echo "- Database queries taking longer (connection pool contention)"
echo "- Latency spikes to 500-600ms"
echo "- Some requests start failing"
echo "- We're finding the same drivers repeatedly (no cache!)"
echo ""
echo "Press enter to simulate a surge event..."
read

# Simulate surge by updating baseline generator to very high rate
execWithConfirm "Updating baseline generator to 50 RPS for surge event..." sdl gen update baseline 50 --apply-flows

# Note: Arrival rates are automatically calculated and applied with --apply-flows

echo ""
echo "=== System Breakdown - New Year's Eve! ==="
echo "The system is now completely overwhelmed!"
echo "Notice:"
echo "- Massive failure rate (>50%)"
echo "- Database completely overwhelmed (3 connections!)"
echo "- Every failed request still took 200ms+ of DB time"
echo "- This is when your VP of Engineering gets paged!"
echo ""
echo "Press enter to stop the chaos..."
read

# Return to normal traffic levels
execWithConfirm "Reducing baseline generator back to 5 RPS..." sdl gen update baseline 5 --apply-flows
execWithConfirm "Stopping driver updates..." sdl gen stop drivers --apply-flows

# Note: Arrival rates are automatically recalculated when generators are stopped

echo ""
echo "=== Key Problems Identified ==="
echo "1. No Caching - Same queries repeated constantly"
echo "2. No Indexes - 200ms full table scan for every driver search"
echo "3. Tiny Connection Pool - Only 3 connections!"
echo "4. Synchronous Everything - Maps API blocks requests"
echo "5. No Fault Isolation - One slow query affects everyone"
echo ""
echo "Press enter to see what happens if Maps API fails..."
read

echo ""
echo "=== Disaster Scenario: Maps API Outage ==="
echo "Let's simulate the Maps API being slow or down..."
echo ""
echo "Press enter to modify Maps API latency..."
read

# Make Maps API very slow
execWithConfirm "Making Maps API very slow (2 second latency)..." sdl set mapsService.pool.AcquireLatency 2000ms

# Restart baseline traffic
execWithConfirm "Restarting baseline traffic to see the impact..." sdl gen start baseline --apply-flows

echo ""
echo "=== Complete System Failure ==="
echo "With Maps API slow, the entire system grinds to a halt!"
echo "This is why we need:"
echo "- Circuit breakers"
echo "- Timeouts"
echo "- Asynchronous operations"
echo "- Service isolation"
echo ""
echo "Press enter to restore normal operations..."
read

# Restore Maps API
execWithConfirm "Restoring Maps API to normal latency..." sdl set mapsService.pool.AcquireLatency 10ms
execWithConfirm "Stopping baseline traffic..." sdl gen stop baseline --apply-flows

echo ""
echo "=== Cost Analysis ==="
echo "Fun fact: This MVP setup would cost approximately:"
echo "- 1x t2.small EC2 instance: $20/month"
echo "- 1x RDS t2.small (3 connections): $30/month"
echo "- Total: ~$50/month"
echo ""
echo "It actually works for hundreds of users!"
echo "But not for millions..."
echo ""
echo "Press enter to clean up..."
read

# Clean up
execWithConfirm "Stopping all generators..." sdl gen stop --all

echo ""
echo "=== Next Steps ==="
echo "In the intermediate version, we'll add:"
echo "- Redis cache for hot data"
echo "- Service boundaries (User, Driver, Matching services)"
echo "- Basic geo-indexing"
echo "- Connection pooling"
echo "- Asynchronous notifications"
echo ""
echo "The journey from MVP to scale is about evolution, not revolution!"
echo ""
echo "Demo complete. Press enter to exit..."
read
