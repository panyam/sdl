// Uber Intermediate Architecture (v2)
// This shows the evolution from MVP to a more scalable system
// Key improvements:
// - Redis cache for hot data
// - Service boundaries (User, Driver, Matching services)
// - Basic geo-indexing for efficient driver searches
// - Improved connection pooling with utilization tracking
// - Asynchronous notifications with queueing
// - Float rate support and automatic flow calculation
// - Performance cliff detection via utilization monitoring

import ResourcePool, MM1Queue, MMCKQueue, Cache, HttpStatusCode, delay from "../common.sdl"

// Define enums for more realistic return types
enum AuthResult {
  Success,
  InvalidToken,
  TokenExpired,
  UserNotFound,
  RateLimited,
  Failed
}

enum MatchResult {
  Matched,
  NoDriversAvailable,
  OutsideServiceArea,
  RateLimited,
  Failed
}

enum NotificationResult {
  Sent,
  Queued,
  Failed,
  DeviceNotRegistered
}

// Database component that wraps a connection pool and storage
component Database {
  uses Pool ResourcePool
  
  param ReadLatency Float = 50ms
  param WriteLatency Float = 100ms
  
  method Read() Bool {
    let acquired = self.Pool.Acquire()
    if not acquired {
      return false
    }
    delay(self.ReadLatency)
    return true
  }
  
  method Write() Bool {
    let acquired = self.Pool.Acquire()
    if not acquired {
      return false
    }
    delay(self.WriteLatency)
    return true
  }
}

system UberIntermediate {
  use gateway APIGateway(
    userService = userService,
    driverService = driverService,
    matchingService = matchingService,
    notificationService = notificationService
  )
  use userService UserService
  use driverService DriverService
  use matchingService MatchingService
  use notificationService NotificationService
}

component UserService {
  uses pool1 ResourcePool(Size = 50, AvgHoldTime = 20ms)  // Utilization tracking enabled
  uses pool2 ResourcePool(Size = 20, AvgHoldTime = 25ms)

  uses redis Cache(HitRate = 0.7)  // 70% cache hit for user data

  uses userDB Database(
    Pool = pool2,         // Better connection pooling with utilization 
    ReadLatency = 50ms,   // Indexed queries
    WriteLatency = 100ms
  )

  method GetUser() AuthResult {
    let acquired = self.pool1.Acquire()
    if not acquired {
      return AuthResult.RateLimited  // Pool exhausted
    }
    
    // Try cache first
    let cached = self.redis.Read()
    if cached {
      return AuthResult.Success
    }
    
    // Cache miss - hit database
    let user = self.userDB.Read()
    if not user {
      return AuthResult.UserNotFound
    }
    
    // Write to cache for next time
    let written = self.redis.Write()
    if written {
      return AuthResult.Success
    }
    return AuthResult.Failed
  }

  method AuthenticateUser() AuthResult {
    let acquired = self.pool1.Acquire()
    if not acquired {
      return AuthResult.RateLimited  // Pool exhausted
    }
    
    // Auth tokens cached for 5 minutes
    let cached = self.redis.Read()
    if cached {
      // 95% tokens valid, 5% expired
      return AuthResult.Success  // Simplified for now
    }
    
    let user = self.userDB.Read()
    if not user {
      return AuthResult.InvalidToken
    }
    
    let written = self.redis.Write()
    if written {
      return AuthResult.Success
    }
    return AuthResult.Failed
  }
}

component DriverService {
  uses pool ResourcePool(Size = 50, AvgHoldTime = 15ms)  // Driver operations are faster

  uses locationCache Cache(HitRate = 0.9)  // Driver locations heavily cached

  uses pool2 ResourcePool(Size = 20, AvgHoldTime = 20ms)
  uses driverDB Database(
    Pool = pool2,
    ReadLatency = 30ms,   // Geo-indexed queries
    WriteLatency = 50ms
  )

  method UpdateLocation() Bool {
    let acquired = self.pool.Acquire()
    if not acquired {
      return false  // Pool exhausted
    }
    
    // Update in cache first (write-through)
    let cacheWritten = self.locationCache.Write()
    if not cacheWritten {
      return false
    }
    
    // Async write to database (fire and forget)
    // In real system, this would be queued
    let dbWritten = self.driverDB.Write()
    
    return dbWritten
  }

  method FindNearbyDrivers() Bool {
    let acquired = self.pool.Acquire()
    if not acquired {
      return false  // Pool exhausted
    }
    
    // Check if we have this grid cell cached
    let cached = self.locationCache.Read()
    if cached {
      return true
    }
    
    // Use geo-indexed query (much faster than full scan)
    let drivers = self.driverDB.Read()  // Geo-indexed read
    if not drivers {
      return false
    }
    
    // Cache the grid cell for 30 seconds
    let cacheWritten = self.locationCache.Write()
    
    return cacheWritten
  }

  method GetDriver() Bool {
    let acquired = self.pool.Acquire()
    if not acquired {
      return false  // Pool exhausted
    }
    
    let cached = self.locationCache.Read()
    if cached {
      return true
    }
    
    let driver = self.driverDB.Read()
    if not driver {
      return false
    }
    
    let cacheWritten = self.locationCache.Write()
    return cacheWritten
  }
}

component MatchingService {
  uses pool ResourcePool(Size = 100, AvgHoldTime = 30ms)  // Handles the heavy lifting - longer operations

  uses routeCache Cache(HitRate = 0.6)  // Route caching helps

  uses mapsAPI ResourcePool(Size = 30, AvgHoldTime = 100ms)  // External API rate limits

  method MatchRider() MatchResult {
    let acquired = self.pool.Acquire()
    if not acquired {
      return MatchResult.RateLimited  // Pool exhausted
    }
    
    // Find nearby drivers (service call simulation)
    delay(20ms)  // Service call latency
    
    // Check cached route
    let route = self.routeCache.Read()
    
    if not route {
      // Calculate route via external API
      let apiAcquired = self.mapsAPI.Acquire()
      if not apiAcquired {
        return MatchResult.RateLimited  // External API rate limited
      }
      
      // Cache the route
      let cacheWritten = self.routeCache.Write()
      if not cacheWritten {
        return MatchResult.Failed
      }
    }
    
    return MatchResult.Matched
  }

  method CalculateFare() Bool {
    // Simple fare calculation - just a compute operation
    delay(5ms)  // Fare calculation latency
    return true
  }
}

component NotificationService {
  uses pool ResourcePool(Size = 200, AvgHoldTime = 10ms)  // Async, can handle more
  uses queue MM1Queue(ArrivalRate = 100.0, AvgServiceTime = 50ms)  // Notification queue with utilization tracking

  method NotifyDriver() NotificationResult {
    let acquired = self.pool.Acquire()
    if not acquired {
      return NotificationResult.Failed  // Pool exhausted
    }
    
    // Just enqueue - don't block
    let enqueued = self.queue.Enqueue()
    if enqueued {
      return NotificationResult.Queued
    }
    return NotificationResult.Failed
  }

  method NotifyRider() NotificationResult {
    let acquired = self.pool.Acquire()
    if not acquired {
      return NotificationResult.Failed  // Pool exhausted
    }
    
    let enqueued = self.queue.Enqueue()
    if enqueued {
      return NotificationResult.Queued
    }
    return NotificationResult.Failed
  }

  // Background worker processes queue
  method ProcessNotifications() NotificationResult {
    let notification = self.queue.Dequeue()
    if notification {
      // Send via push notification service
      delay(50ms)  // Simulate sending
      return NotificationResult.Sent
    }
    return NotificationResult.Failed
  }
}

component APIGateway {
  uses pool ResourcePool(Size = 100, AvgHoldTime = 15ms)  // API gateway processing time

  uses userService UserService
  uses driverService DriverService  
  uses matchingService MatchingService
  uses notificationService NotificationService

  method RequestRide() HttpStatusCode {
    let acquired = self.pool.Acquire()
    if not acquired {
      return HttpStatusCode.ServiceUnavailable  // Gateway overloaded
    }
    
    // Authenticate user
    let authResult = self.userService.AuthenticateUser()
    if authResult == AuthResult.InvalidToken {
      return HttpStatusCode.Unauthorized
    }
    if authResult == AuthResult.TokenExpired {
      return HttpStatusCode.Unauthorized
    }
    if authResult != AuthResult.Success {
      return HttpStatusCode.InternalServerError
    }
    
    // Find a match
    let matchResult = matchingService.MatchRider()
    
    if matchResult == MatchResult.NoDriversAvailable {
      return HttpStatusCode.NotFound
    }
    if matchResult == MatchResult.OutsideServiceArea {
      return HttpStatusCode.BadRequest
    }
    if matchResult == MatchResult.RateLimited {
      return HttpStatusCode.ServiceUnavailable
    }
    if matchResult != MatchResult.Matched {
      return HttpStatusCode.InternalServerError
    }
    
    // Notify driver (async - don't wait for result)
    let driverNotified = self.notificationService.NotifyDriver()
    
    // Notify rider with ETA
    let riderNotified = self.notificationService.NotifyRider()
    
    // Even if notifications fail, ride is created
    return HttpStatusCode.Ok
  }

  method UpdateDriverLocation() HttpStatusCode {
    let acquired = self.pool.Acquire()
    if not acquired {
      return HttpStatusCode.ServiceUnavailable  // Gateway overloaded
    }
    
    // Simple auth check (in reality would be different)
    let authResult = self.userService.AuthenticateUser()
    if authResult != AuthResult.Success {
      return HttpStatusCode.Unauthorized
    }
    
    let updated = self.driverService.UpdateLocation()
    if updated {
      return HttpStatusCode.Ok
    }
    return HttpStatusCode.InternalServerError
  }

  method GenerateId() HttpStatusCode {
    delay(1ms)  // ID generation latency
    return HttpStatusCode.Ok
  }
}
