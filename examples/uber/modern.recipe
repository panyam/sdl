#!/usr/bin/env bash
# Uber Modern Microservices Architecture Demo Script
# Shows a globally distributed, event-driven architecture

# Setup canvas for modern demo
export SDL_CANVAS_ID=uberv3

sdl canvas create $SDL_CANVAS_ID
sdl canvas reset $SDL_CANVAS_ID

function execWithConfirm() {
  msg=$1; shift
  cmd=$1; shift
  args=$*
  echo ""
  echo "    >    $cmd $args"
  echo ""
  echo "$msg ... Press enter to continue"
  read
  $cmd $args
}

echo "=== Uber Modern Architecture Demo ==="
echo "Welcome to the future - a globally distributed, event-driven architecture"
echo "capable of handling millions of requests per second."
execWithConfirm "Loading the modern system" sdl load examples/uber/modern.sdl
execWithConfirm "Activate the UberModern system" sdl use UberModern

echo ""
echo "=== Revolutionary Architecture Changes ==="
echo "1. Event-driven with Kafka-like event bus"
echo "2. Microservices with dedicated databases (no shared state)"
echo "3. ML-powered matching with feature store"
echo "4. Real-time analytics with stream processing"
echo "5. Multi-channel notifications with priority queues"
echo "6. Circuit breakers and rate limiting"
echo "7. CQRS pattern with read replicas"
echo ""
echo "Press enter to set up comprehensive metrics..."
read

# Core metrics
execWithConfirm "Adding request latency" sdl metrics add request_latency gateway.RequestRide latency
execWithConfirm "Adding match quality (ML score)" sdl metrics add match_quality gateway.matchingService.FindOptimalMatch latency
# Using latency metrics instead of utilization/throughput
execWithConfirm "Adding location lookup latency" sdl metrics add location_lookup gateway.locationService.FindNearbyDrivers latency
execWithConfirm "Adding event publish latency" sdl metrics add event_publish gateway.eventBus.Publish latency
execWithConfirm "Adding notification send latency" sdl metrics add notification_send gateway.notificationService.SendNotification latency
# Note: Rate limiter drops would need count metric on failures

echo ""
echo "=== Normal Operations (100 RPS) ==="
echo "Let's start with normal load - 100 RPS"
echo "This was enough to break our MVP, but is nothing for this architecture..."
echo ""
echo "Press enter to start normal traffic..."
read

# Start normal traffic
execWithConfirm "Creating normal traffic generator (100 RPS)" sdl gen add normal gateway.RequestRide 100
execWithConfirm "Starting normal traffic" sdl gen start normal

echo ""
echo "=== Observing Modern Performance ==="
echo "Notice the incredible improvements:"
echo "- Request latency under 50ms (was 350ms in MVP)"
echo "- ML matching finding optimal drivers"
echo "- 95% location cache hit rate"
echo "- Events flowing through the system"
echo "- Zero stress on any component"
echo ""
echo "Press enter to add realistic driver updates..."
read

# Add driver location updates - much higher volume
execWithConfirm "Creating driver fleet updates (1000 RPS)" sdl gen add drivers gateway.UpdateDriverLocation 1000
execWithConfirm "Starting driver updates" sdl gen start drivers

echo ""
echo "=== Handling Fleet-Scale Updates ==="
echo "1000 drivers updating location every second!"
echo "Notice:"
echo "- Location service barely affected (1ms latency)"
echo "- Geo cache handling the load perfectly"
echo "- Time-series DB batching writes efficiently"
echo "- Main request flow completely isolated"
echo ""
echo "Press enter to simulate peak hours..."
read

# Peak traffic - 1000 RPS
execWithConfirm "Creating peak traffic (900 RPS additional)" sdl gen add peak gateway.RequestRide 900
execWithConfirm "Starting peak traffic" sdl gen start peak

echo ""
echo "=== Peak Hours (1000 RPS) ==="
echo "We're now at 1000 RPS - 50x the MVP breaking point!"
echo "Observe:"
echo "- Still maintaining <60ms latency"
echo "- ML model cached and scoring drivers efficiently"
echo "- Event bus handling thousands of events/second"
echo "- Notification priority queue managing load"
echo "- All components handling load efficiently"
echo ""
echo "Press enter to simulate a regional surge..."
read

# Surge event - 2000 RPS
execWithConfirm "Creating surge traffic (1000 RPS additional)" sdl gen add surge gateway.RequestRide 1000
execWithConfirm "Starting surge event" sdl gen start surge

echo ""
echo "=== Regional Surge Event (2000 RPS) ==="
echo "Major event just ended - 2000 requests per second!"
echo "The system handles it gracefully:"
echo "- Latency still under 80ms"
echo "- Rate limiter protecting from abuse"
echo "- Some users seeing 'rate limit' messages (by design)"
echo "- Analytics tracking surge patterns in real-time"
echo ""
echo "Press enter to demonstrate resilience..."
read

echo ""
echo "=== Resilience Demonstration ==="
echo "Let's simulate a partial outage..."
echo ""
echo "Press enter to fail the user service read replicas..."
read

# Simulate read replica failure
execWithConfirm "Increasing read replica latency (simulating issues)" sdl set gateway.userService.readDB.pool.AcquireLatency 500ms

echo ""
echo "=== Circuit Breaker in Action ==="
echo "Notice what happens:"
echo "- Circuit breaker detects slow responses"
echo "- Automatically fails fast instead of waiting"
echo "- System serves from cache when possible"
echo "- Partial degradation, not complete failure!"
echo ""
echo "Press enter to restore service..."
read

# Restore service
execWithConfirm "Restoring read replica performance" sdl set gateway.userService.readDB.pool.AcquireLatency 1ms

echo ""
echo "=== Multi-Channel Notifications ==="
echo "The notification system handles multiple channels:"
echo "- Push notifications (50ms latency)"
echo "- SMS for high-priority (200ms latency)"
echo "- Email for receipts (not shown)"
echo "All processed through priority queue!"
echo ""
echo "Press enter to see extreme scale..."
read

# Stop previous load
execWithConfirm "Stopping surge traffic" sdl gen stop surge
execWithConfirm "Stopping peak traffic" sdl gen stop peak

# Extreme load test
execWithConfirm "Creating extreme load (5000 RPS)" sdl gen add extreme gateway.RequestRide 5000
execWithConfirm "Starting extreme load test" sdl gen start extreme

echo ""
echo "=== Extreme Scale Test (5000 RPS) ==="
echo "This is 250x the load that broke our MVP!"
echo "Finally seeing some limits:"
echo "- Gateway pool starting to queue"
echo "- Rate limiter dropping excess requests"
echo "- But latency still under 150ms for accepted requests"
echo "- System degrading gracefully, not crashing"
echo ""
echo "Press enter to examine costs..."
read

# Clean up extreme load
execWithConfirm "Stopping extreme load" sdl gen stop extreme
execWithConfirm "Returning to normal traffic" sdl gen start normal

echo ""
echo "=== Cost Analysis ==="
echo "This architecture requires significant investment:"
echo ""
echo "Per Region (3 regions globally):"
echo "- 20x c5.2xlarge instances (services): $2,500/month"
echo "- RDS Aurora clusters: $1,000/month"
echo "- ElastiCache Redis clusters: $500/month"
echo "- Kafka/Kinesis: $800/month"
echo "- CloudWatch/monitoring: $300/month"
echo ""
echo "Total per region: ~$5,100/month"
echo "Global total: ~$15,300/month"
echo ""
echo "But this handles:"
echo "- 5 million rides per day"
echo "- 100,000 concurrent drivers"
echo "- Sub-100ms global latency"
echo "- 99.99% availability"
echo ""
echo "Press enter to see analytics capabilities..."
read

echo ""
echo "=== Real-Time Analytics ==="
echo "The analytics service provides insights like:"
echo "- Live surge detection and pricing"
echo "- Driver utilization optimization"
echo "- Demand prediction by area"
echo "- Route optimization based on traffic"
echo "- Fraud detection in real-time"
echo ""
echo "All processed through stream processing!"
echo ""
echo "Press enter to clean up..."
read

# Final cleanup
execWithConfirm "Stopping all generators" sdl gen stop --all

echo ""
echo "=== Architecture Evolution Summary ==="
echo ""
echo "MVP (Monolith):"
echo "- 20 RPS max"
echo "- 350ms latency"
echo "- $50/month"
echo "- Single point of failure"
echo ""
echo "Intermediate (Service-Oriented):"
echo "- 300 RPS max"
echo "- 150ms latency"
echo "- $205/month"
echo "- Partial resilience"
echo ""
echo "Modern (Microservices + Events):"
echo "- 5000+ RPS"
echo "- 50ms latency"
echo "- $15,300/month"
echo "- Full resilience and global scale"
echo ""
echo "The journey from startup to scale!"
echo ""
echo "Demo complete. Press enter to exit..."
read