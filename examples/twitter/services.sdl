
import WaitAll, WaitAny, HttpStatusCode from "../common.sdl"
import Database from "./dbs.sdl"

system Twitter {
  use tdb Database
  use ts TweetService(TweetsDB = tdb)

  use fdb Database
  use fs FollowsService(FollowsDB = fdb)

  use tls TimelineService(TweetsSvc = ts, FollowsSvc = fs)
}

component TweetService {
  uses TweetsDB Database

  method CreateTweet() HttpStatusCode {
    if self.TweetsDB.Create() {
      return HttpStatusCode.Ok
    } else {
      return HttpStatusCode.InternalError
    }
  }

  // Gets a tweet by ID
  method GetTweet() HttpStatusCode {
    if self.TweetsDB.GetById() {
      return HttpStatusCode.Ok
    } else {
      return HttpStatusCode.InternalError
    }
  }

  /**
   * List tweets for a user - assume Database's ItemList index is by user
   * and with a secondary index on creation time
   */
  method ListTweets() HttpStatusCode {
    if self.TweetsDB.ListItems() {
      return HttpStatusCode.Ok
    } else {
      return HttpStatusCode.InternalError
    }
  }
}


component FollowsService {
  uses FollowsDB Database

  method FollowUser() HttpStatusCode {
    if self.FollowsDB.Create() {
      return HttpStatusCode.Ok
    } else {
      return HttpStatusCode.InternalError
    }
  }

  // Get followers - assume ItemList is btree index with a pkey of follwee-id
  method GetFollowers() HttpStatusCode {
    if self.FollowsDB.ListItems() {
      return HttpStatusCode.Ok
    } else {
      return HttpStatusCode.InternalError
    }
  }

  // Gets the follower count of a user
  // This is needed to know how many times to "iterate" to build a timeline
  // Note how this returns a distribution instead
  //
  // This could also be a parameter 
  method GetFollowerCount() (HttpStatusCode, Int) {
    delay sample dist {
      89 => 10ms
      5 => 100ms
      1 => 1s
    }
    return (HttpStatusCode.Ok, sample dist {
      900 => 1000,      // 90% of users have < 1k followers
      40  => 10000,     // 4% of users have < 10k followers
      10  => 1000000,   // 1% users have upto 1M followers
      1   => 100000000, // .1% users have upto 100M followers
    })
  }
}

// The main timeline service
component TimelineService {
  uses TweetsSvc TweetService
  uses FollowsSvc FollowsService

  /**
   * Gets the timeline for a user by merging tweets from users they are following:
   *
   * ```
   * followees = 
   * select * from tweets where owner in 
   * (select leader from follows where follows.follower = id)
   * order by created_at desc limit N
   * ```
   */
  method GetTimeline() HttpStatusCode {
    // Get followee counts - we dont need actual users being followed (by this user)
    // using the count we can kick of batch calls and that *distribution* is 
    // what this is all about
    let _, followerCount = FollowsSvc.GetFollowerCount()

    // Get tweets from the followees
    let future = gobatch followerCount {
      return TweetsSvc.ListTweets()
    }

    // Wait for entire batch to complete
    let result = wait future using WaitAll(HttpStatusCode.Ok)

    log("Ok here we are")

    return result
  }
}

// Our native function could look like
// func AllHttpStatusesLessThan(batchreceipt BatchReceipt, parameters ...Value) Outcomes[Value] { }
