// For HttpStatusCode, we'll assume it's defined in twitter_common.sdl and imported by services
// For native components, they'd return an Int or a pre-defined status enum value that SDL maps to HttpStatusCode if needed.
// For simplicity, let's assume native methods return an Int that can be mapped to HttpStatusCode by the SDL component wrapper.

native component StdCache {
  param MaxItems Int
  param DefaultTTL Duration // e.g. 5min, 60s

  // Get might return a Tuple[String, HttpStatusCode] where String is value, HttpStatusCode is cache status
  // For this discrete model, maybe Get just returns a status indicating hit/miss.
  method Get(key String) Int // Returns HttpStatusCode.StatusOk on hit, .StatusNotFound on miss
  method Put(key String, valueSizeEstimate Int) Int // valueSizeEstimate is a proxy for value. Returns HttpStatusCode.
  method Delete(key String) Int // Returns HttpStatusCode.
}

native component StdKVStore {
  param DiskProfile String // "SSD" or "HDD"

  // Operations return HttpStatusCode (as Int)
  method Get(key String) Int // Status: OK if found, NOT_FOUND, etc. Latency reflects operation.
  method Put(key String, valueCategory String) Int // valueCategory could represent type/size for cost modeling
  method Delete(key String) Int

  // List-like operations focus on counts and status
  method AppendToList(listKey String, valueCategory String) Int
  method GetListCount(listKey String) Tuple[Int, Int] // Returns (count, HttpStatusCode)
  method RemoveFromList(listKey String, valueCategory String) Int
  method GetListRangeCount(listKey String, offset Int, max_count Int) Tuple[Int, Int] // (actual_count_retrieved, HttpStatusCode)
}
