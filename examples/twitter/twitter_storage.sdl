// twitter_storage.sdl

import StdKVStore from "std_native.sdl"
import HttpStatusCode from "./twitter_common.sdl"

component UserStore {
  uses userProfileDB StdKVStore (DiskProfile = "SSD")
  uses followersDB StdKVStore (DiskProfile = "SSD")
  uses followingDB StdKVStore (DiskProfile = "SSD")

  param DefaultProfileCategory String = "standard_user_profile"

  method CreateUserProfile(userID Int, userType String) HttpStatusCode { // userType for potential different storage costs
    delay 5ms
    let status_code = self.userProfileDB.Put("user_" + userID, self.DefaultProfileCategory)
    return status_code // Assuming int maps to HttpStatusCode by convention
  }

  method GetUserExistence(userID Int) HttpStatusCode {
    delay 3ms
    return self.userProfileDB.Get("user_" + userID)
  }

  method AddFollow(followerID Int, followeeID Int) HttpStatusCode {
    delay 10ms
    let s1 = self.followersDB.AppendToList("followers_of_" + followeeID, "follow_record")
    let s2 = self.followingDB.AppendToList("following_by_" + followerID, "follow_record")
    if s1 == HttpStatusCode.OK && s2 == HttpStatusCode.OK {
      return HttpStatusCode.OK
    }
    return HttpStatusCode.INTERNAL_SERVER_ERROR // Simplified error
  }

  method RemoveFollow(followerID Int, followeeID Int) HttpStatusCode {
    delay 10ms
    let s1 = self.followersDB.RemoveFromList("followers_of_" + followeeID, "follow_record")
    let s2 = self.followingDB.RemoveFromList("following_by_" + followerID, "follow_record")
     if s1 == HttpStatusCode.OK && s2 == HttpStatusCode.OK {
      return HttpStatusCode.OK
    }
    return HttpStatusCode.INTERNAL_SERVER_ERROR
  }

  // Returns (count, status)
  method GetFollowingCount(userID Int) Tuple[Int, HttpStatusCode] {
    delay 5ms
    return self.followingDB.GetListCount("following_by_" + userID)
  }
}

component TweetStore {
  uses tweetsDB StdKVStore (DiskProfile = "SSD")
  uses userTweetsDB StdKVStore (DiskProfile = "SSD") // UserID -> list of their TweetIDs (for "my tweets")

  param DefaultTweetCategory String = "text_tweet"
  param MaxTweetsToFetchPerUser Int = 20 // Default for GetUserTweetIDsCount if not specified

  method SaveTweet(tweetID Int, userID Int, contentType String) HttpStatusCode {
    delay 7ms
    let tweetSaved = self.tweetsDB.Put("tweet_" + tweetID, contentType)
    delay 3ms
    let listUpdated = self.userTweetsDB.AppendToList("tweets_by_" + userID, "tweet_id_ref_" + tweetID)

    if tweetSaved == HttpStatusCode.OK && listUpdated == HttpStatusCode.OK {
      return HttpStatusCode.OK
    }
    return HttpStatusCode.INTERNAL_SERVER_ERROR
  }

  method GetTweetExistence(tweetID Int) HttpStatusCode {
    delay 2ms
    return self.tweetsDB.Get("tweet_" + tweetID)
  }

  // Gets the count of TweetIDs posted by a user, for a given range (e.g. for "my tweets" pagination)
  method GetUserTweetIDsCount(userID Int, offset Int, max_count Int) Tuple[Int, HttpStatusCode] {
    delay 4ms
    return self.userTweetsDB.GetListRangeCount("tweets_by_" + userID, offset, max_count)
  }
}
