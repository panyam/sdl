
import ResourcePool, delay, log from "./common.sdl"

// A basic disk that has no concept of contention and have the same
// performance guarantees regardless of inbound QPS
component InfiniteBandwidtthDisk {
  // How about *just* latencies
  // Option 1 - Define them purely as a single dimentional entities
  param ReadSuccessLatencies = dist {
     999 => 10us
     9 => 50us
     1 => 10ms
  }

  param ReadFailureLatencies = dist {
     999 => 10us
     1 => 100us
  }

  // Just a duration of latencies
  param WriteLatencies = dist 1000 {
     999 => 10us
     9 => 50us
     1 => 10ms
  }

  // 5 9s of read success!
  param ReadOutcomes = dist {
    99999 => (true, ReadSuccessLatencies)
    1 => (false, ReadFailureLatencies)
  }

  param WriteOutcomes = dist {
    99999 => (true, WriteLatencies)
    1 => (false, WriteLatencies)
  }

  method Read() Bool {
    let outcome, latency = sample ReadOutcomes
    delay(sample latency)
    return outcome
  }

  method Write() Bool {
    let outcome, latency = sample WriteOutcomes
    delay(sample latency)
    return outcome
  }
}

// A Disk component with a built-in ResourcePool to model
// contention and queuing under load.
component DiskWithCapacity {
    // Internal pool to model the disk's IOPS capacity.
    // Size = 1 simulates a simple disk that handles one I/O at a time.
    uses _pool ResourcePool(Size = 1)

    // The raw, no-contention latency of the physical I/O operation.
    param _rawReadLatency = dist {
        90 => 10ms,
         9 => 50ms,
         1 => 500ms
    }

    // Read performs a read operation, subject to queuing delays.
    method Read() Bool {
        // Step 1: Acquire a slot from the pool.
        // This call will add queuing delay if the disk is busy.
        // If the pool is saturated (utilization >= 1), this will fail.
        let success = self._pool.Acquire()
        if not success {
            return false // Request failed/dropped due to overload.
        }

        // Step 2: Perform the actual disk operation.
        // The latency for this part is the raw, no-contention latency.
        delay(sample self._rawReadLatency)

        // Step 3: Return the success/failure of the physical operation itself.
        return sample dist {
            999 => true,
              1 => false
        }
    }
}

// A simple system that uses our capacity-aware disk.
system TestCapacitySystem {
    use MyDisk DiskWithCapacity
}
